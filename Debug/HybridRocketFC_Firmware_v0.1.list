
HybridRocketFC_Firmware_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b830  0800b830  0001b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc84  0800bc84  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc8c  0800bc8c  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc90  0800bc90  0001bc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800bc94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000350  0800bfe4  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f28  0800bfe4  00021f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018581  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003729  00000000  00000000  00038901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1e0  00000000  00000000  0003dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142e8  00000000  00000000  00057f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bed4  00000000  00000000  0006c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f80bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  000f8110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b814 	.word	0x0800b814

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	0800b814 	.word	0x0800b814

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU9250_ReadRegister>:
#include "MPU9250.h"

/*
 * Low-Level Functions
 */
HAL_StatusTypeDef MPU9250_ReadRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	21d0      	movs	r1, #208	; 0xd0
 8000f78:	f001 fd1e 	bl	80029b8 <HAL_I2C_Mem_Read>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <MPU9250_ReadRegisters>:

HAL_StatusTypeDef MPU9250_ReadRegisters (MPU9250 *dev, uint8_t reg, uint8_t *data, uint8_t length) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b088      	sub	sp, #32
 8000f8a:	af04      	add	r7, sp, #16
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	461a      	mov	r2, r3
 8000f92:	460b      	mov	r3, r1
 8000f94:	72fb      	strb	r3, [r7, #11]
 8000f96:	4613      	mov	r3, r2
 8000f98:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8000faa:	9102      	str	r1, [sp, #8]
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
 8000fb6:	f001 fcff 	bl	80029b8 <HAL_I2C_Mem_Read>
 8000fba:	4603      	mov	r3, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <MPU9250_WriteRegister>:

HAL_StatusTypeDef MPU9250_WriteRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	21d0      	movs	r1, #208	; 0xd0
 8000fec:	f001 fbea 	bl	80027c4 <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <AK8963_ReadRegister>:

HAL_StatusTypeDef AK8963_ReadRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b088      	sub	sp, #32
 8000ffe:	af04      	add	r7, sp, #16
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	460b      	mov	r3, r1
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, AK8963_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	b29a      	uxth	r2, r3
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	2118      	movs	r1, #24
 8001022:	f001 fcc9 	bl	80029b8 <HAL_I2C_Mem_Read>
 8001026:	4603      	mov	r3, r0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <AK8963_ReadRegisters>:

HAL_StatusTypeDef AK8963_ReadRegisters (MPU9250 *dev, uint8_t reg, uint8_t *data, uint8_t length) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	460b      	mov	r3, r1
 800103e:	72fb      	strb	r3, [r7, #11]
 8001040:	4613      	mov	r3, r2
 8001042:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, AK8963_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	b29a      	uxth	r2, r3
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	b29b      	uxth	r3, r3
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	9102      	str	r1, [sp, #8]
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2118      	movs	r1, #24
 8001060:	f001 fcaa 	bl	80029b8 <HAL_I2C_Mem_Read>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <AK8963_WriteRegister>:

HAL_StatusTypeDef AK8963_WriteRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 800106e:	b580      	push	{r7, lr}
 8001070:	b088      	sub	sp, #32
 8001072:	af04      	add	r7, sp, #16
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	460b      	mov	r3, r1
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev-> i2cHandle, AK8963_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	b29a      	uxth	r2, r3
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2118      	movs	r1, #24
 8001096:	f001 fb95 	bl	80027c4 <HAL_I2C_Mem_Write>
 800109a:	4603      	mov	r3, r0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <MPU9250_Init>:

uint8_t MPU9250_Init (MPU9250 *dev, I2C_HandleTypeDef *i2cHandle) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = i2cHandle;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0] = 0.0f;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.0f;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.0f;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]

	dev->temp_C = 0.0f;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28

	dev->quat[0] = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
	dev->quat[1] = 0;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
	dev->quat[2] = 0;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34

	uint8_t errNum = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;
	status = MPU9250_ReadRegister( dev, MPU9250_WHO_AM_I, &regData);
 80010ea:	f107 030d 	add.w	r3, r7, #13
 80010ee:	461a      	mov	r2, r3
 80010f0:	2175      	movs	r1, #117	; 0x75
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff2c 	bl	8000f50 <MPU9250_ReadRegister>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf14      	ite	ne
 8001102:	2301      	movne	r3, #1
 8001104:	2300      	moveq	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	4413      	add	r3, r2
 800110e:	73fb      	strb	r3, [r7, #15]
	if (regData != MPU9250_DEVICE_ID) {
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	2b71      	cmp	r3, #113	; 0x71
 8001114:	d001      	beq.n	800111a <MPU9250_Init+0x76>
		return 255; // Device has unexpected ID
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	e175      	b.n	8001406 <MPU9250_Init+0x362>
	}

	/* Reset chip */
	regData = 0x80; // SLEEP = 1 (p. 40)
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_PWR_MGMT_1, &regData);
 800111e:	f107 030d 	add.w	r3, r7, #13
 8001122:	461a      	mov	r2, r3
 8001124:	216b      	movs	r1, #107	; 0x6b
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff4c 	bl	8000fc4 <MPU9250_WriteRegister>
 800112c:	4603      	mov	r3, r0
 800112e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	4413      	add	r3, r2
 8001142:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8001144:	2064      	movs	r0, #100	; 0x64
 8001146:	f000 fef5 	bl	8001f34 <HAL_Delay>
	/* Wake up chip. */
	regData = 0x01; // SLEEP = 0 (p. 40), CLOCK reference is gyro
 800114a:	2301      	movs	r3, #1
 800114c:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_PWR_MGMT_1, &regData);
 800114e:	f107 030d 	add.w	r3, r7, #13
 8001152:	461a      	mov	r2, r3
 8001154:	216b      	movs	r1, #107	; 0x6b
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff34 	bl	8000fc4 <MPU9250_WriteRegister>
 800115c:	4603      	mov	r3, r0
 800115e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	4413      	add	r3, r2
 8001172:	73fb      	strb	r3, [r7, #15]
	/* Config. Gyro. */
	regData = 0x04; // DLPF_CFG = 4 20Hz(p. 13)
 8001174:	2304      	movs	r3, #4
 8001176:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_CONFIG, &regData);
 8001178:	f107 030d 	add.w	r3, r7, #13
 800117c:	461a      	mov	r2, r3
 800117e:	211a      	movs	r1, #26
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff1f 	bl	8000fc4 <MPU9250_WriteRegister>
 8001186:	4603      	mov	r3, r0
 8001188:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf14      	ite	ne
 8001190:	2301      	movne	r3, #1
 8001192:	2300      	moveq	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	4413      	add	r3, r2
 800119c:	73fb      	strb	r3, [r7, #15]
	regData = 0x08; // GYRO_FS_SEL = 01 +-500dps (p. 14)
 800119e:	2308      	movs	r3, #8
 80011a0:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_GYRO_CONFIG, &regData);
 80011a2:	f107 030d 	add.w	r3, r7, #13
 80011a6:	461a      	mov	r2, r3
 80011a8:	211b      	movs	r1, #27
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff0a 	bl	8000fc4 <MPU9250_WriteRegister>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	4413      	add	r3, r2
 80011c6:	73fb      	strb	r3, [r7, #15]
	/* Config. Accel. */
	regData = 0x08; // ACCEL_FS_SEL = 01 +-4g (p. 14)
 80011c8:	2308      	movs	r3, #8
 80011ca:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_ACCEL_CONFIG, &regData);
 80011cc:	f107 030d 	add.w	r3, r7, #13
 80011d0:	461a      	mov	r2, r3
 80011d2:	211c      	movs	r1, #28
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fef5 	bl	8000fc4 <MPU9250_WriteRegister>
 80011da:	4603      	mov	r3, r0
 80011dc:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80011de:	7bbb      	ldrb	r3, [r7, #14]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	4413      	add	r3, r2
 80011f0:	73fb      	strb	r3, [r7, #15]
	regData = 0x04; // A_DLPFCFG = 4 21Hz(p. 15)
 80011f2:	2304      	movs	r3, #4
 80011f4:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_ACCEL_CONFIG_2, &regData);
 80011f6:	f107 030d 	add.w	r3, r7, #13
 80011fa:	461a      	mov	r2, r3
 80011fc:	211d      	movs	r1, #29
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fee0 	bl	8000fc4 <MPU9250_WriteRegister>
 8001204:	4603      	mov	r3, r0
 8001206:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	4413      	add	r3, r2
 800121a:	73fb      	strb	r3, [r7, #15]
	/* Config. Mag. */
	regData = 0x02; // BYPASS_EN
 800121c:	2302      	movs	r3, #2
 800121e:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_INT_PIN_CFG, &regData);
 8001220:	f107 030d 	add.w	r3, r7, #13
 8001224:	461a      	mov	r2, r3
 8001226:	2137      	movs	r1, #55	; 0x37
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fecb 	bl	8000fc4 <MPU9250_WriteRegister>
 800122e:	4603      	mov	r3, r0
 8001230:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf14      	ite	ne
 8001238:	2301      	movne	r3, #1
 800123a:	2300      	moveq	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	4413      	add	r3, r2
 8001244:	73fb      	strb	r3, [r7, #15]
	regData = 0x1F; // Fuse ROM access mode
 8001246:	231f      	movs	r3, #31
 8001248:	737b      	strb	r3, [r7, #13]
	status = AK8963_WriteRegister (dev, AK8963_CNTL, &regData);
 800124a:	f107 030d 	add.w	r3, r7, #13
 800124e:	461a      	mov	r2, r3
 8001250:	210a      	movs	r1, #10
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff0b 	bl	800106e <AK8963_WriteRegister>
 8001258:	4603      	mov	r3, r0
 800125a:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf14      	ite	ne
 8001262:	2301      	movne	r3, #1
 8001264:	2300      	moveq	r3, #0
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4413      	add	r3, r2
 800126e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f000 fe5f 	bl	8001f34 <HAL_Delay>
	//READ FROM MAG FOR SENSITIVITY ADJ.
	uint8_t asa[3];
	status = AK8963_ReadRegisters (dev, AK8963_ASAX, asa, 3);
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	2303      	movs	r3, #3
 800127c:	2110      	movs	r1, #16
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fed6 	bl	8001030 <AK8963_ReadRegisters>
 8001284:	4603      	mov	r3, r0
 8001286:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4413      	add	r3, r2
 800129a:	73fb      	strb	r3, [r7, #15]
	dev->mag_asa[0] = (asa[0] - 128)*0.5/128+1;
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	3b80      	subs	r3, #128	; 0x80
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f947 	bl	8000534 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b59      	ldr	r3, [pc, #356]	; (8001410 <MPU9250_Init+0x36c>)
 80012ac:	f7ff f9ac 	bl	8000608 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <MPU9250_Init+0x370>)
 80012be:	f7ff facd 	bl	800085c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b52      	ldr	r3, [pc, #328]	; (8001418 <MPU9250_Init+0x374>)
 80012d0:	f7fe ffe4 	bl	800029c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc6c 	bl	8000bb8 <__aeabi_d2f>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
	dev->mag_asa[1] = (asa[1] - 128)*0.5/128+1;
 80012e6:	7a7b      	ldrb	r3, [r7, #9]
 80012e8:	3b80      	subs	r3, #128	; 0x80
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f922 	bl	8000534 <__aeabi_i2d>
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b46      	ldr	r3, [pc, #280]	; (8001410 <MPU9250_Init+0x36c>)
 80012f6:	f7ff f987 	bl	8000608 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <MPU9250_Init+0x370>)
 8001308:	f7ff faa8 	bl	800085c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <MPU9250_Init+0x374>)
 800131a:	f7fe ffbf 	bl	800029c <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc47 	bl	8000bb8 <__aeabi_d2f>
 800132a:	4602      	mov	r2, r0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	641a      	str	r2, [r3, #64]	; 0x40
	dev->mag_asa[2] = (asa[2] - 128)*0.5/128+1;
 8001330:	7abb      	ldrb	r3, [r7, #10]
 8001332:	3b80      	subs	r3, #128	; 0x80
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8fd 	bl	8000534 <__aeabi_i2d>
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <MPU9250_Init+0x36c>)
 8001340:	f7ff f962 	bl	8000608 <__aeabi_dmul>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <MPU9250_Init+0x370>)
 8001352:	f7ff fa83 	bl	800085c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <MPU9250_Init+0x374>)
 8001364:	f7fe ff9a 	bl	800029c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc22 	bl	8000bb8 <__aeabi_d2f>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
	regData = 0x00; // Power down mode
 800137a:	2300      	movs	r3, #0
 800137c:	737b      	strb	r3, [r7, #13]
	status = AK8963_WriteRegister (dev, AK8963_CNTL, &regData); //CNTL1_AD
 800137e:	f107 030d 	add.w	r3, r7, #13
 8001382:	461a      	mov	r2, r3
 8001384:	210a      	movs	r1, #10
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fe71 	bl	800106e <AK8963_WriteRegister>
 800138c:	4603      	mov	r3, r0
 800138e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4413      	add	r3, r2
 80013a2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f000 fdc5 	bl	8001f34 <HAL_Delay>
	regData = 0x16; // Continuous mode
 80013aa:	2316      	movs	r3, #22
 80013ac:	737b      	strb	r3, [r7, #13]
	status = AK8963_WriteRegister (dev, AK8963_CNTL, &regData); //CNTL1_AD
 80013ae:	f107 030d 	add.w	r3, r7, #13
 80013b2:	461a      	mov	r2, r3
 80013b4:	210a      	movs	r1, #10
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fe59 	bl	800106e <AK8963_WriteRegister>
 80013bc:	4603      	mov	r3, r0
 80013be:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4413      	add	r3, r2
 80013d2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 80013d4:	2064      	movs	r0, #100	; 0x64
 80013d6:	f000 fdad 	bl	8001f34 <HAL_Delay>
	/* Enable the Int pin */
	regData = 0x01; // RAW_RDY_EN = 1 (p. 30)
 80013da:	2301      	movs	r3, #1
 80013dc:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_INT_ENABLE, &regData);
 80013de:	f107 030d 	add.w	r3, r7, #13
 80013e2:	461a      	mov	r2, r3
 80013e4:	2138      	movs	r1, #56	; 0x38
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fdec 	bl	8000fc4 <MPU9250_WriteRegister>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	4413      	add	r3, r2
 8001402:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	3fe00000 	.word	0x3fe00000
 8001414:	40600000 	.word	0x40600000
 8001418:	3ff00000 	.word	0x3ff00000

0800141c <MPU9250_ReadTemp>:
	regData = 0x00;
	HAL_StatusTypeDef status = MPU9250_WriteRegister (dev, MPU9250_INT_STATUS, &regData);
	return status;
}

HAL_StatusTypeDef MPU9250_ReadTemp ( MPU9250 *dev ) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	uint8_t regData[2];
	HAL_StatusTypeDef status = MPU9250_ReadRegisters(dev, MPU9250_TEMP_OUT_H, regData, 2);
 8001424:	f107 0208 	add.w	r2, r7, #8
 8001428:	2302      	movs	r3, #2
 800142a:	2141      	movs	r1, #65	; 0x41
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fdaa 	bl	8000f86 <MPU9250_ReadRegisters>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
	int16_t tempRaw = (((regData[0] & 0x0F) << 4) | regData[1]);
 8001436:	7a3b      	ldrb	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b21b      	sxth	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	b21a      	sxth	r2, r3
 8001440:	7a7b      	ldrb	r3, [r7, #9]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	81bb      	strh	r3, [r7, #12]
	dev->temp_C = ((float)tempRaw - 0.0f)/321.0f + 21.0f;
 8001448:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001474 <MPU9250_ReadTemp+0x58>
 8001458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8001460:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	43a08000 	.word	0x43a08000

08001478 <MPU9250_ReadAccel>:

HAL_StatusTypeDef MPU9250_ReadAccel ( MPU9250 *dev ) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	uint8_t regData[6];
	HAL_StatusTypeDef status = MPU9250_ReadRegisters(dev, MPU9250_ACCEL_XOUT_H, regData, 6);
 8001480:	f107 0210 	add.w	r2, r7, #16
 8001484:	2306      	movs	r3, #6
 8001486:	213b      	movs	r1, #59	; 0x3b
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fd7c 	bl	8000f86 <MPU9250_ReadRegisters>
 800148e:	4603      	mov	r3, r0
 8001490:	75fb      	strb	r3, [r7, #23]
	int16_t accelRawSigned[3];
	accelRawSigned[0] = (regData[0] << 8) | regData[1];
 8001492:	7c3b      	ldrb	r3, [r7, #16]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7c7b      	ldrb	r3, [r7, #17]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21b      	sxth	r3, r3
 80014a0:	813b      	strh	r3, [r7, #8]
	accelRawSigned[1] = (regData[2] << 8) | regData[3];
 80014a2:	7cbb      	ldrb	r3, [r7, #18]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	817b      	strh	r3, [r7, #10]
	accelRawSigned[2] = (regData[4] << 8) | regData[5];
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	7d7b      	ldrb	r3, [r7, #21]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	81bb      	strh	r3, [r7, #12]
	// Range +- 4G
	dev->acc_mps2[0] = 9.81f * accelRawSigned[0] / 8192.0f;
 80014c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001534 <MPU9250_ReadAccel+0xbc>
 80014d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001538 <MPU9250_ReadAccel+0xc0>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = 9.81f * accelRawSigned[1] / 8192.0f;
 80014e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001534 <MPU9250_ReadAccel+0xbc>
 80014f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f8:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001538 <MPU9250_ReadAccel+0xc0>
 80014fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = 9.81f * accelRawSigned[2] / 8192.0f;
 8001506:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001534 <MPU9250_ReadAccel+0xbc>
 8001516:	ee27 7a87 	vmul.f32	s14, s15, s14
 800151a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001538 <MPU9250_ReadAccel+0xc0>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a03 	vstr	s15, [r3, #12]
	return status;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	411cf5c3 	.word	0x411cf5c3
 8001538:	46000000 	.word	0x46000000

0800153c <MPU9250_ReadGyro>:

HAL_StatusTypeDef MPU9250_ReadGyro ( MPU9250 *dev ) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	uint8_t regData[6];
	HAL_StatusTypeDef status = MPU9250_ReadRegisters(dev, MPU9250_GYRO_XOUT_H, regData, 6);
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	2306      	movs	r3, #6
 800154a:	2143      	movs	r1, #67	; 0x43
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fd1a 	bl	8000f86 <MPU9250_ReadRegisters>
 8001552:	4603      	mov	r3, r0
 8001554:	75fb      	strb	r3, [r7, #23]
	int16_t gyroRawSigned[3];
	gyroRawSigned[0] = (regData[0] << 8) | regData[1];
 8001556:	7c3b      	ldrb	r3, [r7, #16]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	7c7b      	ldrb	r3, [r7, #17]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21b      	sxth	r3, r3
 8001564:	813b      	strh	r3, [r7, #8]
	gyroRawSigned[1] = (regData[2] << 8) | regData[3];
 8001566:	7cbb      	ldrb	r3, [r7, #18]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b21a      	sxth	r2, r3
 800156c:	7cfb      	ldrb	r3, [r7, #19]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	817b      	strh	r3, [r7, #10]
	gyroRawSigned[2] = (regData[4] << 8) | regData[5];
 8001576:	7d3b      	ldrb	r3, [r7, #20]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	81bb      	strh	r3, [r7, #12]
	// Range +- 500dps
	dev->gyro_dps[0] = gyroRawSigned[0] / 32.8f;
 8001586:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001592:	eddf 6a13 	vldr	s13, [pc, #76]	; 80015e0 <MPU9250_ReadGyro+0xa4>
 8001596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro_dps[1] = gyroRawSigned[1] / 32.8f;
 80015a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ac:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80015e0 <MPU9250_ReadGyro+0xa4>
 80015b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro_dps[2] = gyroRawSigned[2] / 32.8f;
 80015ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c6:	eddf 6a06 	vldr	s13, [pc, #24]	; 80015e0 <MPU9250_ReadGyro+0xa4>
 80015ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	edc3 7a06 	vstr	s15, [r3, #24]
	return status;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	42033333 	.word	0x42033333

080015e4 <MPU9250_ReadMag>:

HAL_StatusTypeDef MPU9250_ReadMag ( MPU9250 *dev ) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint8_t regData[7];
	HAL_StatusTypeDef status = AK8963_ReadRegister (dev, AK8963_ST1, regData);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	461a      	mov	r2, r3
 80015f2:	2102      	movs	r1, #2
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd00 	bl	8000ffa <AK8963_ReadRegister>
 80015fa:	4603      	mov	r3, r0
 80015fc:	75fb      	strb	r3, [r7, #23]
	if( regData[0] & 0x01 ) {
 80015fe:	7c3b      	ldrb	r3, [r7, #16]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <MPU9250_ReadMag+0xdc>
		status = AK8963_ReadRegisters (dev, AK8963_HXL, regData, 7);
 8001608:	f107 0210 	add.w	r2, r7, #16
 800160c:	2307      	movs	r3, #7
 800160e:	2103      	movs	r1, #3
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fd0d 	bl	8001030 <AK8963_ReadRegisters>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]
		if( !(regData[6] & 0x08) ) { //Check AK8963_ST2
 800161a:	7dbb      	ldrb	r3, [r7, #22]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d14d      	bne.n	80016c0 <MPU9250_ReadMag+0xdc>
			int16_t magRawSigned[3];
			magRawSigned[0] = regData[0]  | (regData[1] << 8);
 8001624:	7c3b      	ldrb	r3, [r7, #16]
 8001626:	b21a      	sxth	r2, r3
 8001628:	7c7b      	ldrb	r3, [r7, #17]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	813b      	strh	r3, [r7, #8]
			magRawSigned[1] = regData[2]  | (regData[3] << 8);
 8001634:	7cbb      	ldrb	r3, [r7, #18]
 8001636:	b21a      	sxth	r2, r3
 8001638:	7cfb      	ldrb	r3, [r7, #19]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	817b      	strh	r3, [r7, #10]
			magRawSigned[2] = regData[4]  | (regData[5] << 8);
 8001644:	7d3b      	ldrb	r3, [r7, #20]
 8001646:	b21a      	sxth	r2, r3
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
 8001652:	81bb      	strh	r3, [r7, #12]
			// Range +-
			dev->mag_mt[0] = 0.1499f * dev->mag_asa[0] * magRawSigned[0]; // 4912/32760 uT/tick
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800165a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016cc <MPU9250_ReadMag+0xe8>
 800165e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001662:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edc3 7a07 	vstr	s15, [r3, #28]
			dev->mag_mt[1] = 0.1499f * dev->mag_asa[1] * magRawSigned[1];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800167e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80016cc <MPU9250_ReadMag+0xe8>
 8001682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001686:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->mag_mt[2] = 0.1499f * dev->mag_asa[2] * magRawSigned[2];
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016cc <MPU9250_ReadMag+0xe8>
 80016a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			//Include calibration values somehow (subtract bias, multiply by scale);
		}
	}
	return status;
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	3e197f63 	.word	0x3e197f63

080016d0 <MPU9250_ReadFIFO>:


	return errNum;
}

HAL_StatusTypeDef MPU9250_ReadFIFO ( MPU9250 *dev) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	uint8_t regData[16]; //16 bytes for 6-Axis Quaternion
	uint8_t fifo_count, index = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status;

	status = MPU9250_ReadRegisters (dev, MPU9250_FIFO_COUNTH, regData, 2);
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	2302      	movs	r3, #2
 80016e2:	2172      	movs	r1, #114	; 0x72
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fc4e 	bl	8000f86 <MPU9250_ReadRegisters>
 80016ea:	4603      	mov	r3, r0
 80016ec:	77bb      	strb	r3, [r7, #30]
	fifo_count = (regData[0] << 8) | regData[1];
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	b25a      	sxtb	r2, r3
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	777b      	strb	r3, [r7, #29]
	//Maybe check for overflow and reset?
	status = MPU9250_ReadRegisters (dev, MPU9250_FIFO_R_W, regData, 16);
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	2310      	movs	r3, #16
 8001704:	2174      	movs	r1, #116	; 0x74
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc3d 	bl	8000f86 <MPU9250_ReadRegisters>
 800170c:	4603      	mov	r3, r0
 800170e:	77bb      	strb	r3, [r7, #30]
	//Parse regData into 4 quaternion values 4-bytes each
	//long quat[4];
	dev->quat[0] = (long)regData[0]<<24  |  (long)regData[1]<<16  |  (long)regData[2]<<8  |  (long)regData[3];
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	061a      	lsls	r2, r3, #24
 8001714:	7b7b      	ldrb	r3, [r7, #13]
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	431a      	orrs	r2, r3
 800171a:	7bbb      	ldrb	r3, [r7, #14]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	4313      	orrs	r3, r2
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
	dev->quat[1] = (long)regData[4]<<24  |  (long)regData[5]<<16  |  (long)regData[6]<<8  |  (long)regData[7];
 8001728:	7c3b      	ldrb	r3, [r7, #16]
 800172a:	061a      	lsls	r2, r3, #24
 800172c:	7c7b      	ldrb	r3, [r7, #17]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
 8001732:	7cbb      	ldrb	r3, [r7, #18]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	4313      	orrs	r3, r2
 8001738:	7cfa      	ldrb	r2, [r7, #19]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
	dev->quat[2] = (long)regData[8]<<24  |  (long)regData[9]<<16  |  (long)regData[10]<<8  |  (long)regData[11];
 8001740:	7d3b      	ldrb	r3, [r7, #20]
 8001742:	061a      	lsls	r2, r3, #24
 8001744:	7d7b      	ldrb	r3, [r7, #21]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	431a      	orrs	r2, r3
 800174a:	7dbb      	ldrb	r3, [r7, #22]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	4313      	orrs	r3, r2
 8001750:	7dfa      	ldrb	r2, [r7, #23]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
	dev->quat[3] = (long)regData[12]<<24  |  (long)regData[13]<<16  |  (long)regData[14]<<8  |  (long)regData[15];
 8001758:	7e3b      	ldrb	r3, [r7, #24]
 800175a:	061a      	lsls	r2, r3, #24
 800175c:	7e7b      	ldrb	r3, [r7, #25]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	7ebb      	ldrb	r3, [r7, #26]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	4313      	orrs	r3, r2
 8001768:	7efa      	ldrb	r2, [r7, #27]
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	639a      	str	r2, [r3, #56]	; 0x38

	return status;
 8001770:	7fbb      	ldrb	r3, [r7, #30]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3720      	adds	r7, #32
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback ( uint16_t GPIO_Pin ) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == MPU_INT_Pin ) {
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178c:	d102      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x18>
		mpuDataReady = 1;
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
	}
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	20000638 	.word	0x20000638

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b0c9      	sub	sp, #292	; 0x124
 80017a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017aa:	f000 fb51 	bl	8001e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ae:	f000 f87f 	bl	80018b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b2:	f000 f913 	bl	80019dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80017b6:	f000 f8e3 	bl	8001980 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80017ba:	f006 fc3f 	bl	800803c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100); //Allow MPU to power on
 80017be:	2064      	movs	r0, #100	; 0x64
 80017c0:	f000 fbb8 	bl	8001f34 <HAL_Delay>
  MPU9250_Init(&mpu, &hi2c1);
 80017c4:	4934      	ldr	r1, [pc, #208]	; (8001898 <main+0xf4>)
 80017c6:	4835      	ldr	r0, [pc, #212]	; (800189c <main+0xf8>)
 80017c8:	f7ff fc6c 	bl	80010a4 <MPU9250_Init>
  char usbBuf[256];
  uint32_t timerLog = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mpuDataReady = 0;
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <main+0xfc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if ( mpuDataReady || !HAL_GPIO_ReadPin(GPIOA, KEY_Pin) ) {
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <main+0xfc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d106      	bne.n	80017ee <main+0x4a>
 80017e0:	2101      	movs	r1, #1
 80017e2:	4830      	ldr	r0, [pc, #192]	; (80018a4 <main+0x100>)
 80017e4:	f000 fe60 	bl	80024a8 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d125      	bne.n	800183a <main+0x96>
		//Check INT_STATUS reg. for DMP or Raw data (0x02 = DMP)
		uint8_t regData;
		MPU9250_ReadRegister (&mpu, MPU9250_INT_STATUS, &regData);
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	461a      	mov	r2, r3
 80017f2:	213a      	movs	r1, #58	; 0x3a
 80017f4:	4829      	ldr	r0, [pc, #164]	; (800189c <main+0xf8>)
 80017f6:	f7ff fbab 	bl	8000f50 <MPU9250_ReadRegister>
		if ( regData == 0x02 ) {
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d103      	bne.n	800180a <main+0x66>
			//Data from DMP, read from FIFO into quaternion
			MPU9250_ReadFIFO( &mpu );
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <main+0xf8>)
 8001804:	f7ff ff64 	bl	80016d0 <MPU9250_ReadFIFO>
 8001808:	e00b      	b.n	8001822 <main+0x7e>
		} else {
			MPU9250_ReadTemp( &mpu );
 800180a:	4824      	ldr	r0, [pc, #144]	; (800189c <main+0xf8>)
 800180c:	f7ff fe06 	bl	800141c <MPU9250_ReadTemp>
			MPU9250_ReadAccel( &mpu );
 8001810:	4822      	ldr	r0, [pc, #136]	; (800189c <main+0xf8>)
 8001812:	f7ff fe31 	bl	8001478 <MPU9250_ReadAccel>
			MPU9250_ReadGyro( &mpu );
 8001816:	4821      	ldr	r0, [pc, #132]	; (800189c <main+0xf8>)
 8001818:	f7ff fe90 	bl	800153c <MPU9250_ReadGyro>
			MPU9250_ReadMag( &mpu );
 800181c:	481f      	ldr	r0, [pc, #124]	; (800189c <main+0xf8>)
 800181e:	f7ff fee1 	bl	80015e4 <MPU9250_ReadMag>
		}
		HAL_Delay(10);
 8001822:	200a      	movs	r0, #10
 8001824:	f000 fb86 	bl	8001f34 <HAL_Delay>
		GPIOC -> ODR ^= LED_Pin;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <main+0x104>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <main+0x104>)
 800182e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001832:	6153      	str	r3, [r2, #20]
		mpuDataReady = 0;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <main+0xfc>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
	}
    if ( (HAL_GetTick() - timerLog) >= LOG_DELAY ) {
 800183a:	f000 fb6f 	bl	8001f1c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800184a:	d3c5      	bcc.n	80017d8 <main+0x34>
      uint8_t usbBufLen;
	  //usbBufLen = snprintf( usbBuf, 256, "Temp: %.2f, Accel: %.2f, %.2f, %.2f, Gyro: %.2f, %.2f, %.2f, Mag: %.2f, %.2f, %.2f\r\n",
			  //mpu.temp_C, mpu.acc_mps2[0], mpu.acc_mps2[1], mpu.acc_mps2[2], mpu.gyro_dps[0], mpu.gyro_dps[1], mpu.gyro_dps[2], mpu.mag_mt[0], mpu.mag_mt[1], mpu.mag_mt[2] );
	  usbBufLen = snprintf( usbBuf, 256, "%d, %d, %d, %d\r\n",
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <main+0xf8>)
 800184e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <main+0xf8>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <main+0xf8>)
 8001856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001858:	4910      	ldr	r1, [pc, #64]	; (800189c <main+0xf8>)
 800185a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800185c:	f107 0008 	add.w	r0, r7, #8
 8001860:	9102      	str	r1, [sp, #8]
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4623      	mov	r3, r4
 8001868:	4a10      	ldr	r2, [pc, #64]	; (80018ac <main+0x108>)
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	f007 fd91 	bl	8009394 <sniprintf>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	  			  mpu.quat[0], mpu.quat[1], mpu.quat[2], mpu.quat[3]);
	  CDC_Transmit_FS( (uint8_t*) usbBuf, usbBufLen );
 8001878:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800187c:	b29a      	uxth	r2, r3
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fc97 	bl	80081b8 <CDC_Transmit_FS>
	  timerLog += LOG_DELAY;
 800188a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800188e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001892:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    if ( mpuDataReady || !HAL_GPIO_ReadPin(GPIOA, KEY_Pin) ) {
 8001896:	e79f      	b.n	80017d8 <main+0x34>
 8001898:	2000059c 	.word	0x2000059c
 800189c:	200005f0 	.word	0x200005f0
 80018a0:	20000638 	.word	0x20000638
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020800 	.word	0x40020800
 80018ac:	0800b830 	.word	0x0800b830

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
 80018b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	2230      	movs	r2, #48	; 0x30
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f007 f8f6 	bl	8008ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <SystemClock_Config+0xc8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <SystemClock_Config+0xc8>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	; 0x40
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <SystemClock_Config+0xc8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	2300      	movs	r3, #0
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <SystemClock_Config+0xcc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <SystemClock_Config+0xcc>)
 80018fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <SystemClock_Config+0xcc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001916:	2302      	movs	r3, #2
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001920:	230f      	movs	r3, #15
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001924:	2390      	movs	r3, #144	; 0x90
 8001926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001928:	2304      	movs	r3, #4
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800192c:	2305      	movs	r3, #5
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4618      	mov	r0, r3
 8001936:	f002 ff43 	bl	80047c0 <HAL_RCC_OscConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001940:	f000 f8d2 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001944:	230f      	movs	r3, #15
 8001946:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001948:	2302      	movs	r3, #2
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f9a5 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800196c:	f000 f8bc 	bl	8001ae8 <Error_Handler>
  }
}
 8001970:	bf00      	nop
 8001972:	3750      	adds	r7, #80	; 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000

08001980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_I2C1_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_I2C1_Init+0x50>)
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_I2C1_Init+0x58>)
 800198e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_I2C1_Init+0x50>)
 800199e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_I2C1_Init+0x50>)
 80019be:	f000 fdbd 	bl	800253c <HAL_I2C_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c8:	f000 f88e 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000059c 	.word	0x2000059c
 80019d4:	40005400 	.word	0x40005400
 80019d8:	000186a0 	.word	0x000186a0

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_GPIO_Init+0xfc>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a68:	481c      	ldr	r0, [pc, #112]	; (8001adc <MX_GPIO_Init+0x100>)
 8001a6a:	f000 fd35 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4815      	ldr	r0, [pc, #84]	; (8001adc <MX_GPIO_Init+0x100>)
 8001a88:	f000 fb8a 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4810      	ldr	r0, [pc, #64]	; (8001ae0 <MX_GPIO_Init+0x104>)
 8001aa0:	f000 fb7e 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_INT_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <MX_GPIO_Init+0x108>)
 8001abc:	f000 fb70 	bl	80021a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	2017      	movs	r0, #23
 8001ac6:	f000 fb34 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aca:	2017      	movs	r0, #23
 8001acc:	f000 fb4d 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>
	...

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_I2C_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12b      	bne.n	8001bbe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	2312      	movs	r3, #18
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b92:	2304      	movs	r3, #4
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <HAL_I2C_MspInit+0x8c>)
 8001b9e:	f000 faff 	bl	80021a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_I2C_MspInit+0x88>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <NMI_Handler+0x4>

08001bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <HardFault_Handler+0x4>

08001be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <MemManage_Handler+0x4>

08001be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bea:	e7fe      	b.n	8001bea <BusFault_Handler+0x4>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <UsageFault_Handler+0x4>

08001bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 f968 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c30:	f000 fc6c 	bl	800250c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <OTG_FS_IRQHandler+0x10>)
 8001c3e:	f001 fd8c 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20001b10 	.word	0x20001b10

08001c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_kill>:

int _kill(int pid, int sig)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c66:	f006 fef9 	bl	8008a5c <__errno>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2216      	movs	r2, #22
 8001c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_exit>:

void _exit (int status)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ffe7 	bl	8001c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c8e:	e7fe      	b.n	8001c8e <_exit+0x12>

08001c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e00a      	b.n	8001cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ca2:	f3af 8000 	nop.w
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	b2ca      	uxtb	r2, r1
 8001cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf0      	blt.n	8001ca2 <_read+0x12>
	}

return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e009      	b.n	8001cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	60ba      	str	r2, [r7, #8]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf1      	blt.n	8001cdc <_write+0x12>
	}
	return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_close>:

int _close(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
	return -1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_isatty>:

int _isatty(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	return 1;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d9c:	f006 fe5e 	bl	8008a5c <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20020000 	.word	0x20020000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	2000036c 	.word	0x2000036c
 8001dd4:	20001f28 	.word	0x20001f28

08001dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e02:	490e      	ldr	r1, [pc, #56]	; (8001e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e18:	4c0b      	ldr	r4, [pc, #44]	; (8001e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e26:	f7ff ffd7 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f006 fe1d 	bl	8008a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7ff fcb9 	bl	80017a4 <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001e40:	0800bc94 	.word	0x0800bc94
  ldr r2, =_sbss
 8001e44:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001e48:	20001f28 	.word	0x20001f28

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_Init+0x40>)
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_Init+0x40>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_Init+0x40>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 f94f 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	200f      	movs	r0, #15
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fe36 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f967 	bl	8002186 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f92f 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008
 8001f18:	2000063c 	.word	0x2000063c

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000063c 	.word	0x2000063c

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff3e 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff8e 	bl	8002070 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5d 	bl	800201c <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff31 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e159      	b.n	8002470 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8148 	bne.w	800246a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a2 	beq.w	800246a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_GPIO_Init+0x2e8>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a56      	ldr	r2, [pc, #344]	; (8002488 <HAL_GPIO_Init+0x2e8>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b54      	ldr	r3, [pc, #336]	; (8002488 <HAL_GPIO_Init+0x2e8>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_GPIO_Init+0x2ec>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a49      	ldr	r2, [pc, #292]	; (8002490 <HAL_GPIO_Init+0x2f0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x202>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a48      	ldr	r2, [pc, #288]	; (8002494 <HAL_GPIO_Init+0x2f4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x1fe>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_GPIO_Init+0x2f8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x1fa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a46      	ldr	r2, [pc, #280]	; (800249c <HAL_GPIO_Init+0x2fc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x1f6>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a45      	ldr	r2, [pc, #276]	; (80024a0 <HAL_GPIO_Init+0x300>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x1f2>
 800238e:	2304      	movs	r3, #4
 8002390:	e008      	b.n	80023a4 <HAL_GPIO_Init+0x204>
 8002392:	2307      	movs	r3, #7
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x204>
 8002396:	2303      	movs	r3, #3
 8002398:	e004      	b.n	80023a4 <HAL_GPIO_Init+0x204>
 800239a:	2302      	movs	r3, #2
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_Init+0x204>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_GPIO_Init+0x204>
 80023a2:	2300      	movs	r3, #0
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	f002 0203 	and.w	r2, r2, #3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4093      	lsls	r3, r2
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b4:	4935      	ldr	r1, [pc, #212]	; (800248c <HAL_GPIO_Init+0x2ec>)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_GPIO_Init+0x304>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e6:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <HAL_GPIO_Init+0x304>)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_GPIO_Init+0x304>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002410:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_GPIO_Init+0x304>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b0f      	cmp	r3, #15
 8002474:	f67f aea2 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40013800 	.word	0x40013800
 8002490:	40020000 	.word	0x40020000
 8002494:	40020400 	.word	0x40020400
 8002498:	40020800 	.word	0x40020800
 800249c:	40020c00 	.word	0x40020c00
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e001      	b.n	80024ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	041a      	lsls	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	4013      	ands	r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f926 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff faee 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f002 fd2e 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff fb9d 	bl	8001f1c <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 80d9 	bne.w	80029a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	496d      	ldr	r1, [pc, #436]	; (80029b0 <HAL_I2C_Mem_Write+0x1ec>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fc7f 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e0cc      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Write+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e0c5      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fab6 	bl	8002e04 <I2C_RequestMemoryWrite>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e081      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fd00 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06b      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d11b      	bne.n	8002944 <HAL_I2C_Mem_Write+0x180>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1aa      	bne.n	80028a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fcec 	bl	800332e <I2C_WaitOnBTFFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e016      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000

080029b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d2:	f7ff faa3 	bl	8001f1c <HAL_GetTick>
 80029d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 8208 	bne.w	8002df6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2319      	movs	r3, #25
 80029ec:	2201      	movs	r2, #1
 80029ee:	497b      	ldr	r1, [pc, #492]	; (8002bdc <HAL_I2C_Mem_Read+0x224>)
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fb85 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
 80029fe:	e1fb      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Mem_Read+0x56>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e1f4      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d007      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2222      	movs	r2, #34	; 0x22
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <HAL_I2C_Mem_Read+0x228>)
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a76:	88f8      	ldrh	r0, [r7, #6]
 8002a78:	893a      	ldrh	r2, [r7, #8]
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4603      	mov	r3, r0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa52 	bl	8002f30 <I2C_RequestMemoryRead>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1b0      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d113      	bne.n	8002ac6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e184      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d11b      	bne.n	8002b06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e164      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d11b      	bne.n	8002b46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	e144      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b5c:	e138      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	f200 80f1 	bhi.w	8002d4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d123      	bne.n	8002bb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 fc1b 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e139      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bb6:	e10b      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d14e      	bne.n	8002c5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4906      	ldr	r1, [pc, #24]	; (8002be4 <HAL_I2C_Mem_Read+0x22c>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa98 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e10e      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
 8002bda:	bf00      	nop
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000
 8002be4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5c:	e0b8      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2200      	movs	r2, #0
 8002c66:	4966      	ldr	r1, [pc, #408]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa49 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0bf      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	494f      	ldr	r1, [pc, #316]	; (8002e00 <HAL_I2C_Mem_Read+0x448>)
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fa1b 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e091      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d48:	e042      	b.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fb2e 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e04c      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d118      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f aec2 	bne.w	8002b5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010004 	.word	0x00010004

08002e04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f960 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d103      	bne.n	8002e5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e05f      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	492d      	ldr	r1, [pc, #180]	; (8002f2c <I2C_RequestMemoryWrite+0x128>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f998 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04c      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa02 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02b      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	e021      	b.n	8002f20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9dc 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e005      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	00010002 	.word	0x00010002

08002f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8c2 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d103      	bne.n	8002f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0aa      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	4952      	ldr	r1, [pc, #328]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8fa 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e097      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f964 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e021      	b.n	800305c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f93e 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e050      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f923 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e035      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f82b 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e013      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f863 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	e025      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe feff 	bl	8001f1c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e023      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10d      	bne.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	e00c      	b.n	800319e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d0b6      	beq.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031bc:	e051      	b.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d123      	bne.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e046      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d021      	beq.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe fe7d 	bl	8001f1c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e020      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10c      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e00b      	b.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d18d      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b8:	e02d      	b.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8ce 	bl	800345c <I2C_IsAcknowledgeFailed>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02d      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d021      	beq.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe fe23 	bl	8001f1c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d1ca      	bne.n	80032ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333a:	e02d      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f88d 	bl	800345c <I2C_IsAcknowledgeFailed>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02d      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d021      	beq.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fde2 	bl	8001f1c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1ca      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033bc:	e042      	b.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d119      	bne.n	8003400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0210 	mvn.w	r2, #16
 80033d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e029      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fe fd8c 	bl	8001f1c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d1b5      	bne.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d11b      	bne.n	80034ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800347c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b08f      	sub	sp, #60	; 0x3c
 80034be:	af0a      	add	r7, sp, #40	; 0x28
 80034c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e10f      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f004 ffae 	bl	8008448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fea1 	bl	8005252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	687e      	ldr	r6, [r7, #4]
 8003518:	466d      	mov	r5, sp
 800351a:	f106 0410 	add.w	r4, r6, #16
 800351e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352a:	e885 0003 	stmia.w	r5, {r0, r1}
 800352e:	1d33      	adds	r3, r6, #4
 8003530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f001 fd78 	bl	8005028 <USB_CoreInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0d0      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fe8f 	bl	8005274 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e04a      	b.n	80035f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	333d      	adds	r3, #61	; 0x3d
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	; 0x3c
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	b298      	uxth	r0, r3
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3342      	adds	r3, #66	; 0x42
 8003598:	4602      	mov	r2, r0
 800359a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	333f      	adds	r3, #63	; 0x3f
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3344      	adds	r3, #68	; 0x44
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3348      	adds	r3, #72	; 0x48
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3350      	adds	r3, #80	; 0x50
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3af      	bcc.n	800355c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e044      	b.n	800368c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b5      	bcc.n	8003602 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	687e      	ldr	r6, [r7, #4]
 800369e:	466d      	mov	r5, sp
 80036a0:	f106 0410 	add.w	r4, r6, #16
 80036a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b4:	1d33      	adds	r3, r6, #4
 80036b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f001 fe27 	bl	800530c <USB_DevInit>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e00d      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 fea3 	bl	8006430 <USB_DevDisconnect>

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_PCD_Start+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e020      	b.n	8003752 <HAL_PCD_Start+0x5e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d109      	bne.n	8003734 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003724:	2b01      	cmp	r3, #1
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fd79 	bl	8005230 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fe53 	bl	80063ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b08d      	sub	sp, #52	; 0x34
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 ff11 	bl	8006598 <USB_GetMode>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 839d 	bne.w	8003eb8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fe75 	bl	8006472 <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8393 	beq.w	8003eb6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fe6c 	bl	8006472 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f002 0202 	and.w	r2, r2, #2
 80037b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fe5a 	bl	8006472 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d161      	bne.n	800388c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 020f 	and.w	r2, r3, #15
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	0c5b      	lsrs	r3, r3, #17
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	2b02      	cmp	r3, #2
 8003802:	d124      	bne.n	800384e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d035      	beq.n	800387c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800381a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	6a38      	ldr	r0, [r7, #32]
 8003824:	f002 fc91 	bl	800614a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	441a      	add	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003846:	441a      	add	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e016      	b.n	800387c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	0c5b      	lsrs	r3, r3, #17
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	2b06      	cmp	r3, #6
 8003858:	d110      	bne.n	800387c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003860:	2208      	movs	r2, #8
 8003862:	4619      	mov	r1, r3
 8003864:	6a38      	ldr	r0, [r7, #32]
 8003866:	f002 fc70 	bl	800614a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003876:	441a      	add	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f002 fdee 	bl	8006472 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038a0:	d16e      	bne.n	8003980 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f002 fdf4 	bl	8006498 <USB_ReadDevAllOutEpInterrupt>
 80038b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038b2:	e062      	b.n	800397a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d057      	beq.n	800396e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fe19 	bl	8006500 <USB_ReadDevOutEPInterrupt>
 80038ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	461a      	mov	r2, r3
 80038e8:	2301      	movs	r3, #1
 80038ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fdb0 	bl	8004454 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2308      	movs	r3, #8
 800390e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 feaa 	bl	800466c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	2310      	movs	r3, #16
 8003932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	2320      	movs	r3, #32
 800394e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	461a      	mov	r2, r3
 8003968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800396c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	3301      	adds	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d199      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fd74 	bl	8006472 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003994:	f040 80c0 	bne.w	8003b18 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 fd95 	bl	80064cc <USB_ReadDevAllInEpInterrupt>
 80039a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039a8:	e0b2      	b.n	8003b10 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a7 	beq.w	8003b04 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 fdbb 	bl	800653c <USB_ReadDevInEPInterrupt>
 80039c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d057      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	2201      	movs	r2, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f2:	4013      	ands	r3, r2
 80039f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	461a      	mov	r2, r3
 8003a04:	2301      	movs	r3, #1
 8003a06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d132      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3348      	adds	r3, #72	; 0x48
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4403      	add	r3, r0
 8003a30:	3344      	adds	r3, #68	; 0x44
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4419      	add	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4403      	add	r3, r0
 8003a44:	3348      	adds	r3, #72	; 0x48
 8003a46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d113      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x31c>
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3350      	adds	r3, #80	; 0x50
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2101      	movs	r1, #1
 8003a72:	f002 fdc3 	bl	80065fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f004 fd64 	bl	800854a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aec:	461a      	mov	r2, r3
 8003aee:	2302      	movs	r3, #2
 8003af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fc1b 	bl	800433a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	3301      	adds	r3, #1
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	085b      	lsrs	r3, r3, #1
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f47f af49 	bne.w	80039aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 fca8 	bl	8006472 <USB_ReadInterrupts>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2c:	d122      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d108      	bne.n	8003b5e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b54:	2100      	movs	r1, #0
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fe26 	bl	80047a8 <HAL_PCDEx_LPM_Callback>
 8003b5c:	e002      	b.n	8003b64 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 fd60 	bl	8008624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 fc7a 	bl	8006472 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b88:	d112      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f004 fd1c 	bl	80085d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f002 fc5c 	bl	8006472 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc4:	f040 80c7 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2110      	movs	r1, #16
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 fcf6 	bl	80055d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bec:	e056      	b.n	8003c9c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c00:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c20:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	3301      	adds	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3a3      	bcc.n	8003bee <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd2:	f043 030b 	orr.w	r3, r3, #11
 8003cd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce8:	f043 030b 	orr.w	r3, r3, #11
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	e015      	b.n	8003d1c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d16:	f043 030b 	orr.w	r3, r3, #11
 8003d1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d40:	461a      	mov	r2, r3
 8003d42:	f002 fc5b 	bl	80065fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f002 fb89 	bl	8006472 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d124      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 fc1f 	bl	80065b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fc87 	bl	800568e <USB_GetDevSpeed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	f001 f92c 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f001 f9a6 	bl	80050ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f004 fbfa 	bl	800859a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 fb59 	bl	8006472 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d10a      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f004 fbd7 	bl	800857e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f002 0208 	and.w	r2, r2, #8
 8003dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 fb44 	bl	8006472 <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df4:	d10f      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f004 fc2f 	bl	8008664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fb29 	bl	8006472 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e2a:	d10f      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f004 fc02 	bl	8008640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f002 fb0e 	bl	8006472 <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d10a      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f004 fc10 	bl	8008688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 faf8 	bl	8006472 <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d115      	bne.n	8003eb8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f004 fc00 	bl	80086a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e000      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003eb6:	bf00      	nop
    }
  }
}
 8003eb8:	3734      	adds	r7, #52	; 0x34
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}

08003ebe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_SetAddress+0x1a>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e013      	b.n	8003f00 <HAL_PCD_SetAddress+0x42>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 fa56 	bl	80063a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	4608      	mov	r0, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4603      	mov	r3, r0
 8003f18:	70fb      	strb	r3, [r7, #3]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	803b      	strh	r3, [r7, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da0f      	bge.n	8003f4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	3338      	adds	r3, #56	; 0x38
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	3304      	adds	r3, #4
 8003f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	705a      	strb	r2, [r3, #1]
 8003f4c:	e00f      	b.n	8003f6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4413      	add	r3, r2
 8003f64:	3304      	adds	r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f7a:	883a      	ldrh	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	78ba      	ldrb	r2, [r7, #2]
 8003f84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f98:	78bb      	ldrb	r3, [r7, #2]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_PCD_EP_Open+0xaa>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e00e      	b.n	8003fd0 <HAL_PCD_EP_Open+0xc8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fb89 	bl	80056d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fce:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da0f      	bge.n	800400c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 020f 	and.w	r2, r3, #15
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3338      	adds	r3, #56	; 0x38
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4413      	add	r3, r2
 8004000:	3304      	adds	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	705a      	strb	r2, [r3, #1]
 800400a:	e00f      	b.n	800402c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	3304      	adds	r3, #4
 8004024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_PCD_EP_Close+0x6e>
 8004042:	2302      	movs	r3, #2
 8004044:	e00e      	b.n	8004064 <HAL_PCD_EP_Close+0x8c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fbc7 	bl	80057e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407c:	7afb      	ldrb	r3, [r7, #11]
 800407e:	f003 020f 	and.w	r2, r3, #15
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2200      	movs	r2, #0
 80040a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ae:	7afb      	ldrb	r3, [r7, #11]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d102      	bne.n	80040c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c8:	7afb      	ldrb	r3, [r7, #11]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	6979      	ldr	r1, [r7, #20]
 80040e0:	f001 fea2 	bl	8005e28 <USB_EP0StartXfer>
 80040e4:	e008      	b.n	80040f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	f001 fc54 	bl	80059a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004124:	681b      	ldr	r3, [r3, #0]
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	60f8      	str	r0, [r7, #12]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	460b      	mov	r3, r1
 8004140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	3338      	adds	r3, #56	; 0x38
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2201      	movs	r2, #1
 8004170:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	b2da      	uxtb	r2, r3
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800418c:	7afb      	ldrb	r3, [r7, #11]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	6979      	ldr	r1, [r7, #20]
 80041a4:	f001 fe40 	bl	8005e28 <USB_EP0StartXfer>
 80041a8:	e008      	b.n	80041bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	f001 fbf2 	bl	80059a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 020f 	and.w	r2, r3, #15
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d901      	bls.n	80041e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e050      	b.n	8004286 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	da0f      	bge.n	800420c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 020f 	and.w	r2, r3, #15
 80041f2:	4613      	mov	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	3338      	adds	r3, #56	; 0x38
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	3304      	adds	r3, #4
 8004202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2201      	movs	r2, #1
 8004208:	705a      	strb	r2, [r3, #1]
 800420a:	e00d      	b.n	8004228 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	3304      	adds	r3, #4
 8004220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	b2da      	uxtb	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_PCD_EP_SetStall+0x82>
 8004244:	2302      	movs	r3, #2
 8004246:	e01e      	b.n	8004286 <HAL_PCD_EP_SetStall+0xc0>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	4618      	mov	r0, r3
 8004258:	f001 ffcf 	bl	80061fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	b2d9      	uxtb	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004276:	461a      	mov	r2, r3
 8004278:	f002 f9c0 	bl	80065fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 020f 	and.w	r2, r3, #15
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d901      	bls.n	80042ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e042      	b.n	8004332 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	da0f      	bge.n	80042d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	3338      	adds	r3, #56	; 0x38
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	705a      	strb	r2, [r3, #1]
 80042d2:	e00f      	b.n	80042f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 020f 	and.w	r2, r3, #15
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_PCD_EP_ClrStall+0x86>
 8004310:	2302      	movs	r3, #2
 8004312:	e00e      	b.n	8004332 <HAL_PCD_EP_ClrStall+0xa4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68f9      	ldr	r1, [r7, #12]
 8004322:	4618      	mov	r0, r3
 8004324:	f001 ffd7 	bl	80062d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08a      	sub	sp, #40	; 0x28
 800433e:	af02      	add	r7, sp, #8
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	3338      	adds	r3, #56	; 0x38
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	429a      	cmp	r2, r3
 800436c:	d901      	bls.n	8004372 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e06c      	b.n	800444c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	429a      	cmp	r2, r3
 8004386:	d902      	bls.n	800438e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3303      	adds	r3, #3
 8004392:	089b      	lsrs	r3, r3, #2
 8004394:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004396:	e02b      	b.n	80043f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d902      	bls.n	80043b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3303      	adds	r3, #3
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68d9      	ldr	r1, [r3, #12]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4603      	mov	r3, r0
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f001 fe7b 	bl	80060ce <USB_WritePacket>

    ep->xfer_buff  += len;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	441a      	add	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	441a      	add	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d809      	bhi.n	800441a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800440e:	429a      	cmp	r2, r3
 8004410:	d203      	bcs.n	800441a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1be      	bne.n	8004398 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	429a      	cmp	r2, r3
 8004424:	d811      	bhi.n	800444a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2201      	movs	r2, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	43db      	mvns	r3, r3
 8004440:	6939      	ldr	r1, [r7, #16]
 8004442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004446:	4013      	ands	r3, r2
 8004448:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	333c      	adds	r3, #60	; 0x3c
 800446c:	3304      	adds	r3, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b01      	cmp	r3, #1
 8004488:	f040 80a0 	bne.w	80045cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d015      	beq.n	80044c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a72      	ldr	r2, [pc, #456]	; (8004664 <PCD_EP_OutXfrComplete_int+0x210>)
 800449a:	4293      	cmp	r3, r2
 800449c:	f240 80dd 	bls.w	800465a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80d7 	beq.w	800465a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	e0cb      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	461a      	mov	r2, r3
 80044da:	2320      	movs	r3, #32
 80044dc:	6093      	str	r3, [r2, #8]
 80044de:	e0bc      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f040 80b7 	bne.w	800465a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a5d      	ldr	r2, [pc, #372]	; (8004664 <PCD_EP_OutXfrComplete_int+0x210>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d90f      	bls.n	8004514 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	461a      	mov	r2, r3
 800450c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004510:	6093      	str	r3, [r2, #8]
 8004512:	e0a2      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004526:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	0159      	lsls	r1, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	440b      	add	r3, r1
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800453a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4403      	add	r3, r0
 800454a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800454e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4403      	add	r3, r0
 8004572:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4419      	add	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4403      	add	r3, r0
 8004588:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800458c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d114      	bne.n	80045be <PCD_EP_OutXfrComplete_int+0x16a>
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045b6:	461a      	mov	r2, r3
 80045b8:	2101      	movs	r1, #1
 80045ba:	f002 f81f 	bl	80065fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f003 ffa5 	bl	8008514 <HAL_PCD_DataOutStageCallback>
 80045ca:	e046      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a26      	ldr	r2, [pc, #152]	; (8004668 <PCD_EP_OutXfrComplete_int+0x214>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d124      	bne.n	800461e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	461a      	mov	r2, r3
 80045ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f0:	6093      	str	r3, [r2, #8]
 80045f2:	e032      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	2320      	movs	r3, #32
 800460e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f003 ff7c 	bl	8008514 <HAL_PCD_DataOutStageCallback>
 800461c:	e01d      	b.n	800465a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d108      	bne.n	800464e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004646:	461a      	mov	r2, r3
 8004648:	2100      	movs	r1, #0
 800464a:	f001 ffd7 	bl	80065fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f003 ff5d 	bl	8008514 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	4f54300a 	.word	0x4f54300a
 8004668:	4f54310a 	.word	0x4f54310a

0800466c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	333c      	adds	r3, #60	; 0x3c
 8004684:	3304      	adds	r3, #4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d90e      	bls.n	80046c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	461a      	mov	r2, r3
 80046ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f003 ff15 	bl	80084f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d90c      	bls.n	80046e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d108      	bne.n	80046e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046e0:	461a      	mov	r2, r3
 80046e2:	2101      	movs	r1, #1
 80046e4:	f001 ff8a 	bl	80065fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	4f54300a 	.word	0x4f54300a

080046f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
 8004704:	4613      	mov	r3, r2
 8004706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d107      	bne.n	8004726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004716:	883b      	ldrh	r3, [r7, #0]
 8004718:	0419      	lsls	r1, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	430a      	orrs	r2, r1
 8004722:	629a      	str	r2, [r3, #40]	; 0x28
 8004724:	e028      	b.n	8004778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e00d      	b.n	8004756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3340      	adds	r3, #64	; 0x40
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4413      	add	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	3301      	adds	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	3b01      	subs	r3, #1
 800475c:	429a      	cmp	r2, r3
 800475e:	d3ec      	bcc.n	800473a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004760:	883b      	ldrh	r3, [r7, #0]
 8004762:	0418      	lsls	r0, r3, #16
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	3b01      	subs	r3, #1
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4302      	orrs	r2, r0
 8004770:	3340      	adds	r3, #64	; 0x40
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e264      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d075      	beq.n	80048ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047de:	4ba3      	ldr	r3, [pc, #652]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d00c      	beq.n	8004804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ea:	4ba0      	ldr	r3, [pc, #640]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d112      	bne.n	800481c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f6:	4b9d      	ldr	r3, [pc, #628]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004802:	d10b      	bne.n	800481c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	4b99      	ldr	r3, [pc, #612]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05b      	beq.n	80048c8 <HAL_RCC_OscConfig+0x108>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d157      	bne.n	80048c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e23f      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d106      	bne.n	8004834 <HAL_RCC_OscConfig+0x74>
 8004826:	4b91      	ldr	r3, [pc, #580]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a90      	ldr	r2, [pc, #576]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e01d      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x98>
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a8a      	ldr	r2, [pc, #552]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a87      	ldr	r2, [pc, #540]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0xb0>
 8004858:	4b84      	ldr	r3, [pc, #528]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a83      	ldr	r2, [pc, #524]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fd fb50 	bl	8001f1c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004880:	f7fd fb4c 	bl	8001f1c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e204      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b76      	ldr	r3, [pc, #472]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0xc0>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fb3c 	bl	8001f1c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fd fb38 	bl	8001f1c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1f0      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	4b6c      	ldr	r3, [pc, #432]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0xe8>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e2:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d11c      	bne.n	8004928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ee:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x152>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1c4      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	4b56      	ldr	r3, [pc, #344]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4952      	ldr	r1, [pc, #328]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004926:	e03a      	b.n	800499e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004930:	4b4f      	ldr	r3, [pc, #316]	; (8004a70 <HAL_RCC_OscConfig+0x2b0>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fd faf1 	bl	8001f1c <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493e:	f7fd faed 	bl	8001f1c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e1a5      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	4b46      	ldr	r3, [pc, #280]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495c:	4b43      	ldr	r3, [pc, #268]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4940      	ldr	r1, [pc, #256]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_OscConfig+0x2b0>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd fad0 	bl	8001f1c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004980:	f7fd facc 	bl	8001f1c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e184      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d030      	beq.n	8004a0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <HAL_RCC_OscConfig+0x2b4>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fd fab0 	bl	8001f1c <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd faac 	bl	8001f1c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e164      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x200>
 80049de:	e015      	b.n	8004a0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e0:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCC_OscConfig+0x2b4>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e6:	f7fd fa99 	bl	8001f1c <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ee:	f7fd fa95 	bl	8001f1c <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e14d      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1f0      	bne.n	80049ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a0 	beq.w	8004b5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a0e      	ldr	r2, [pc, #56]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_OscConfig+0x2b8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d121      	bne.n	8004a9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCC_OscConfig+0x2b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <HAL_RCC_OscConfig+0x2b8>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a62:	f7fd fa5b 	bl	8001f1c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	e011      	b.n	8004a8e <HAL_RCC_OscConfig+0x2ce>
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470000 	.word	0x42470000
 8004a74:	42470e80 	.word	0x42470e80
 8004a78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7c:	f7fd fa4e 	bl	8001f1c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e106      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8e:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCC_OscConfig+0x4e4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2f0>
 8004aa2:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	e01c      	b.n	8004aea <HAL_RCC_OscConfig+0x32a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x312>
 8004ab8:	4b7b      	ldr	r3, [pc, #492]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	4a7a      	ldr	r2, [pc, #488]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac4:	4b78      	ldr	r3, [pc, #480]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	4a77      	ldr	r2, [pc, #476]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad0:	e00b      	b.n	8004aea <HAL_RCC_OscConfig+0x32a>
 8004ad2:	4b75      	ldr	r3, [pc, #468]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4a74      	ldr	r2, [pc, #464]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ade:	4b72      	ldr	r3, [pc, #456]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4a71      	ldr	r2, [pc, #452]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d015      	beq.n	8004b1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fd fa13 	bl	8001f1c <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fd fa0f 	bl	8001f1c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e0c5      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b10:	4b65      	ldr	r3, [pc, #404]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0ee      	beq.n	8004afa <HAL_RCC_OscConfig+0x33a>
 8004b1c:	e014      	b.n	8004b48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b1e:	f7fd f9fd 	bl	8001f1c <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f7fd f9f9 	bl	8001f1c <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0af      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3c:	4b5a      	ldr	r3, [pc, #360]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ee      	bne.n	8004b26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4e:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a55      	ldr	r2, [pc, #340]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 809b 	beq.w	8004c9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d05c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d141      	bne.n	8004bfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b78:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <HAL_RCC_OscConfig+0x4ec>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7e:	f7fd f9cd 	bl	8001f1c <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b86:	f7fd f9c9 	bl	8001f1c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e081      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b98:	4b43      	ldr	r3, [pc, #268]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	019b      	lsls	r3, r3, #6
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	4937      	ldr	r1, [pc, #220]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bce:	4b37      	ldr	r3, [pc, #220]	; (8004cac <HAL_RCC_OscConfig+0x4ec>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fd f9a2 	bl	8001f1c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fd f99e 	bl	8001f1c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e056      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x41c>
 8004bfa:	e04e      	b.n	8004c9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <HAL_RCC_OscConfig+0x4ec>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fd f98b 	bl	8001f1c <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fd f987 	bl	8001f1c <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e03f      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0x44a>
 8004c28:	e037      	b.n	8004c9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e032      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c36:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <HAL_RCC_OscConfig+0x4e8>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d028      	beq.n	8004c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d121      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d11a      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d111      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	42470060 	.word	0x42470060

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0cc      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b68      	ldr	r3, [pc, #416]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d90c      	bls.n	8004cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b65      	ldr	r3, [pc, #404]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b63      	ldr	r3, [pc, #396]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b8      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a58      	ldr	r2, [pc, #352]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d1c:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	4a52      	ldr	r2, [pc, #328]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d28:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	494d      	ldr	r1, [pc, #308]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d044      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d119      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d003      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e06f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e067      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4934      	ldr	r1, [pc, #208]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fd f8bc 	bl	8001f1c <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fd f8b8 	bl	8001f1c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04f      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d20c      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b22      	ldr	r3, [pc, #136]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e032      	b.n	8004e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e04:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4916      	ldr	r1, [pc, #88]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d009      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	490e      	ldr	r1, [pc, #56]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e36:	f000 f821 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	490a      	ldr	r1, [pc, #40]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004e48:	5ccb      	ldrb	r3, [r1, r3]
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd f81c 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023c00 	.word	0x40023c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0800b88c 	.word	0x0800b88c
 8004e74:	20000000 	.word	0x20000000
 8004e78:	20000004 	.word	0x20000004

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	b5b0      	push	{r4, r5, r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e82:	2100      	movs	r1, #0
 8004e84:	6079      	str	r1, [r7, #4]
 8004e86:	2100      	movs	r1, #0
 8004e88:	60f9      	str	r1, [r7, #12]
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e8e:	2100      	movs	r1, #0
 8004e90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e92:	4952      	ldr	r1, [pc, #328]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004e94:	6889      	ldr	r1, [r1, #8]
 8004e96:	f001 010c 	and.w	r1, r1, #12
 8004e9a:	2908      	cmp	r1, #8
 8004e9c:	d00d      	beq.n	8004eba <HAL_RCC_GetSysClockFreq+0x3e>
 8004e9e:	2908      	cmp	r1, #8
 8004ea0:	f200 8094 	bhi.w	8004fcc <HAL_RCC_GetSysClockFreq+0x150>
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x32>
 8004ea8:	2904      	cmp	r1, #4
 8004eaa:	d003      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x38>
 8004eac:	e08e      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eae:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004eb0:	60bb      	str	r3, [r7, #8]
       break;
 8004eb2:	e08e      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004eb6:	60bb      	str	r3, [r7, #8]
      break;
 8004eb8:	e08b      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eba:	4948      	ldr	r1, [pc, #288]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ebc:	6849      	ldr	r1, [r1, #4]
 8004ebe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ec2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec4:	4945      	ldr	r1, [pc, #276]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ec6:	6849      	ldr	r1, [r1, #4]
 8004ec8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d024      	beq.n	8004f1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed0:	4942      	ldr	r1, [pc, #264]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ed2:	6849      	ldr	r1, [r1, #4]
 8004ed4:	0989      	lsrs	r1, r1, #6
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	f04f 0100 	mov.w	r1, #0
 8004edc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004ee0:	f04f 0500 	mov.w	r5, #0
 8004ee4:	ea00 0204 	and.w	r2, r0, r4
 8004ee8:	ea01 0305 	and.w	r3, r1, r5
 8004eec:	493d      	ldr	r1, [pc, #244]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004eee:	fb01 f003 	mul.w	r0, r1, r3
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	fb01 f102 	mul.w	r1, r1, r2
 8004ef8:	1844      	adds	r4, r0, r1
 8004efa:	493a      	ldr	r1, [pc, #232]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004efc:	fba2 0101 	umull	r0, r1, r2, r1
 8004f00:	1863      	adds	r3, r4, r1
 8004f02:	4619      	mov	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	f7fb fea4 	bl	8000c58 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e04a      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b30      	ldr	r3, [pc, #192]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	ea02 0400 	and.w	r4, r2, r0
 8004f32:	ea03 0501 	and.w	r5, r3, r1
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	014b      	lsls	r3, r1, #5
 8004f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f48:	0142      	lsls	r2, r0, #5
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	1b00      	subs	r0, r0, r4
 8004f50:	eb61 0105 	sbc.w	r1, r1, r5
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	018b      	lsls	r3, r1, #6
 8004f5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f62:	0182      	lsls	r2, r0, #6
 8004f64:	1a12      	subs	r2, r2, r0
 8004f66:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6a:	f04f 0000 	mov.w	r0, #0
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	00d9      	lsls	r1, r3, #3
 8004f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f78:	00d0      	lsls	r0, r2, #3
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	1912      	adds	r2, r2, r4
 8004f80:	eb45 0303 	adc.w	r3, r5, r3
 8004f84:	f04f 0000 	mov.w	r0, #0
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	0299      	lsls	r1, r3, #10
 8004f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f92:	0290      	lsls	r0, r2, #10
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	f7fb fe58 	bl	8000c58 <__aeabi_uldivmod>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4613      	mov	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fb0:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x160>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	0c1b      	lsrs	r3, r3, #16
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	60bb      	str	r3, [r7, #8]
      break;
 8004fca:	e002      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004fce:	60bb      	str	r3, [r7, #8]
      break;
 8004fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bdb0      	pop	{r4, r5, r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	017d7840 	.word	0x017d7840

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000000 	.word	0x20000000

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff0 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0a9b      	lsrs	r3, r3, #10
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	0800b89c 	.word	0x0800b89c

08005028 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005028:	b084      	sub	sp, #16
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	f107 001c 	add.w	r0, r7, #28
 8005036:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b01      	cmp	r3, #1
 800503e:	d122      	bne.n	8005086 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fb1c 	bl	80066b8 <USB_CoreReset>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	e01a      	b.n	80050bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fb10 	bl	80066b8 <USB_CoreReset>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800509c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38
 80050ae:	e005      	b.n	80050bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10b      	bne.n	80050da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f043 0206 	orr.w	r2, r3, #6
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e6:	b004      	add	sp, #16
 80050e8:	4770      	bx	lr
	...

080050ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d165      	bne.n	80051cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a41      	ldr	r2, [pc, #260]	; (8005208 <USB_SetTurnaroundTime+0x11c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d906      	bls.n	8005116 <USB_SetTurnaroundTime+0x2a>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a40      	ldr	r2, [pc, #256]	; (800520c <USB_SetTurnaroundTime+0x120>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d202      	bcs.n	8005116 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005110:	230f      	movs	r3, #15
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e062      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a3c      	ldr	r2, [pc, #240]	; (800520c <USB_SetTurnaroundTime+0x120>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d306      	bcc.n	800512c <USB_SetTurnaroundTime+0x40>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4a3b      	ldr	r2, [pc, #236]	; (8005210 <USB_SetTurnaroundTime+0x124>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d202      	bcs.n	800512c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005126:	230e      	movs	r3, #14
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e057      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <USB_SetTurnaroundTime+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d306      	bcc.n	8005142 <USB_SetTurnaroundTime+0x56>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a37      	ldr	r2, [pc, #220]	; (8005214 <USB_SetTurnaroundTime+0x128>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d202      	bcs.n	8005142 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800513c:	230d      	movs	r3, #13
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e04c      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4a33      	ldr	r2, [pc, #204]	; (8005214 <USB_SetTurnaroundTime+0x128>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d306      	bcc.n	8005158 <USB_SetTurnaroundTime+0x6c>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	4a32      	ldr	r2, [pc, #200]	; (8005218 <USB_SetTurnaroundTime+0x12c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d802      	bhi.n	8005158 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005152:	230c      	movs	r3, #12
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e041      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a2f      	ldr	r2, [pc, #188]	; (8005218 <USB_SetTurnaroundTime+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d906      	bls.n	800516e <USB_SetTurnaroundTime+0x82>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4a2e      	ldr	r2, [pc, #184]	; (800521c <USB_SetTurnaroundTime+0x130>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d802      	bhi.n	800516e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005168:	230b      	movs	r3, #11
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e036      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <USB_SetTurnaroundTime+0x130>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d906      	bls.n	8005184 <USB_SetTurnaroundTime+0x98>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <USB_SetTurnaroundTime+0x134>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d802      	bhi.n	8005184 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800517e:	230a      	movs	r3, #10
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	e02b      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <USB_SetTurnaroundTime+0x134>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d906      	bls.n	800519a <USB_SetTurnaroundTime+0xae>
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a25      	ldr	r2, [pc, #148]	; (8005224 <USB_SetTurnaroundTime+0x138>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d202      	bcs.n	800519a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005194:	2309      	movs	r3, #9
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e020      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <USB_SetTurnaroundTime+0x138>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d306      	bcc.n	80051b0 <USB_SetTurnaroundTime+0xc4>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a20      	ldr	r2, [pc, #128]	; (8005228 <USB_SetTurnaroundTime+0x13c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d802      	bhi.n	80051b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80051aa:	2308      	movs	r3, #8
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e015      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <USB_SetTurnaroundTime+0x13c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d906      	bls.n	80051c6 <USB_SetTurnaroundTime+0xda>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4a1c      	ldr	r2, [pc, #112]	; (800522c <USB_SetTurnaroundTime+0x140>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d202      	bcs.n	80051c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80051c0:	2307      	movs	r3, #7
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e00a      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80051c6:	2306      	movs	r3, #6
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e007      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80051d2:	2309      	movs	r3, #9
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	e001      	b.n	80051dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80051d8:	2309      	movs	r3, #9
 80051da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	029b      	lsls	r3, r3, #10
 80051f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	00d8acbf 	.word	0x00d8acbf
 800520c:	00e4e1c0 	.word	0x00e4e1c0
 8005210:	00f42400 	.word	0x00f42400
 8005214:	01067380 	.word	0x01067380
 8005218:	011a499f 	.word	0x011a499f
 800521c:	01312cff 	.word	0x01312cff
 8005220:	014ca43f 	.word	0x014ca43f
 8005224:	016e3600 	.word	0x016e3600
 8005228:	01a6ab1f 	.word	0x01a6ab1f
 800522c:	01e84800 	.word	0x01e84800

08005230 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f043 0201 	orr.w	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d115      	bne.n	80052c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fc fe46 	bl	8001f34 <HAL_Delay>
      ms++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 f972 	bl	8006598 <USB_GetMode>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d01e      	beq.n	80052f8 <USB_SetCurrentMode+0x84>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b31      	cmp	r3, #49	; 0x31
 80052be:	d9f0      	bls.n	80052a2 <USB_SetCurrentMode+0x2e>
 80052c0:	e01a      	b.n	80052f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d115      	bne.n	80052f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052d4:	2001      	movs	r0, #1
 80052d6:	f7fc fe2d 	bl	8001f34 <HAL_Delay>
      ms++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 f959 	bl	8006598 <USB_GetMode>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <USB_SetCurrentMode+0x84>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b31      	cmp	r3, #49	; 0x31
 80052f0:	d9f0      	bls.n	80052d4 <USB_SetCurrentMode+0x60>
 80052f2:	e001      	b.n	80052f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e005      	b.n	8005304 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b32      	cmp	r3, #50	; 0x32
 80052fc:	d101      	bne.n	8005302 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800530c:	b084      	sub	sp, #16
 800530e:	b580      	push	{r7, lr}
 8005310:	b086      	sub	sp, #24
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800531a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e009      	b.n	8005340 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	3340      	adds	r3, #64	; 0x40
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	2200      	movs	r2, #0
 8005338:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0e      	cmp	r3, #14
 8005344:	d9f2      	bls.n	800532c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11c      	bne.n	8005386 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
 8005384:	e00b      	b.n	800539e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053a4:	461a      	mov	r2, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b0:	4619      	mov	r1, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	461a      	mov	r2, r3
 80053ba:	680b      	ldr	r3, [r1, #0]
 80053bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10c      	bne.n	80053de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053ca:	2100      	movs	r1, #0
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f945 	bl	800565c <USB_SetDevSpeed>
 80053d2:	e008      	b.n	80053e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053d4:	2101      	movs	r1, #1
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f940 	bl	800565c <USB_SetDevSpeed>
 80053dc:	e003      	b.n	80053e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053de:	2103      	movs	r1, #3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f93b 	bl	800565c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e6:	2110      	movs	r1, #16
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8f3 	bl	80055d4 <USB_FlushTxFifo>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f90f 	bl	800561c <USB_FlushRxFifo>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	461a      	mov	r2, r3
 8005410:	2300      	movs	r3, #0
 8005412:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	461a      	mov	r2, r3
 800541c:	2300      	movs	r3, #0
 800541e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	461a      	mov	r2, r3
 8005428:	2300      	movs	r3, #0
 800542a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e043      	b.n	80054ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005448:	d118      	bne.n	800547c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	e013      	b.n	800548e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	461a      	mov	r2, r3
 8005474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e008      	b.n	800548e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	461a      	mov	r2, r3
 800548a:	2300      	movs	r3, #0
 800548c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	461a      	mov	r2, r3
 80054ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3301      	adds	r3, #1
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3b7      	bcc.n	8005432 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	e043      	b.n	8005550 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054de:	d118      	bne.n	8005512 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e013      	b.n	8005524 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e008      	b.n	8005524 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	461a      	mov	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	461a      	mov	r2, r3
 8005544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3301      	adds	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3b7      	bcc.n	80054c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005578:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f043 0210 	orr.w	r2, r3, #16
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <USB_DevInit+0x2c4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f043 0208 	orr.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d107      	bne.n	80055c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	f043 0304 	orr.w	r3, r3, #4
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055cc:	b004      	add	sp, #16
 80055ce:	4770      	bx	lr
 80055d0:	803c3800 	.word	0x803c3800

080055d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	f043 0220 	orr.w	r2, r3, #32
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	4a08      	ldr	r2, [pc, #32]	; (8005618 <USB_FlushTxFifo+0x44>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e006      	b.n	800560c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b20      	cmp	r3, #32
 8005608:	d0f1      	beq.n	80055ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	00030d40 	.word	0x00030d40

0800561c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2210      	movs	r2, #16
 800562c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	4a08      	ldr	r2, [pc, #32]	; (8005658 <USB_FlushRxFifo+0x3c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e006      	b.n	800564c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b10      	cmp	r3, #16
 8005648:	d0f1      	beq.n	800562e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	00030d40 	.word	0x00030d40

0800565c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800568e:	b480      	push	{r7}
 8005690:	b087      	sub	sp, #28
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 0306 	and.w	r3, r3, #6
 80056a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
 80056b2:	e00a      	b.n	80056ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d002      	beq.n	80056c0 <USB_GetDevSpeed+0x32>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d102      	bne.n	80056c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056c0:	2302      	movs	r3, #2
 80056c2:	75fb      	strb	r3, [r7, #23]
 80056c4:	e001      	b.n	80056ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80056c6:	230f      	movs	r3, #15
 80056c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	371c      	adds	r7, #28
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d13a      	bne.n	800576a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005712:	4313      	orrs	r3, r2
 8005714:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d155      	bne.n	80057d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	78db      	ldrb	r3, [r3, #3]
 8005746:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005748:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	059b      	lsls	r3, r3, #22
 800574e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005750:	4313      	orrs	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	e036      	b.n	80057d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	2101      	movs	r1, #1
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	041b      	lsls	r3, r3, #16
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005788:	4313      	orrs	r3, r2
 800578a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11a      	bne.n	80057d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	78db      	ldrb	r3, [r3, #3]
 80057bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057be:	430b      	orrs	r3, r1
 80057c0:	4313      	orrs	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d161      	bne.n	80058c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800581a:	d11f      	bne.n	800585c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800583a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f303 	lsl.w	r3, r1, r3
 8005872:	b29b      	uxth	r3, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587c:	4013      	ands	r3, r2
 800587e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	69da      	ldr	r2, [r3, #28]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2101      	movs	r1, #1
 8005892:	fa01 f303 	lsl.w	r3, r1, r3
 8005896:	b29b      	uxth	r3, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a0:	4013      	ands	r3, r2
 80058a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0159      	lsls	r1, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	4619      	mov	r1, r3
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <USB_DeactivateEndpoint+0x1b0>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
 80058c6:	e060      	b.n	800598a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058de:	d11f      	bne.n	8005920 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800591e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	041b      	lsls	r3, r3, #16
 8005938:	43db      	mvns	r3, r3
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005940:	4013      	ands	r3, r2
 8005942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	43db      	mvns	r3, r3
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	0159      	lsls	r1, r3, #5
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	440b      	add	r3, r1
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	4619      	mov	r1, r3
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <USB_DeactivateEndpoint+0x1b4>)
 8005986:	4013      	ands	r3, r2
 8005988:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	ec337800 	.word	0xec337800
 800599c:	eff37800 	.word	0xeff37800

080059a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	4613      	mov	r3, r2
 80059ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 815c 	bne.w	8005c7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d132      	bne.n	8005a30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	0151      	lsls	r1, r2, #5
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	440a      	add	r2, r1
 8005a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	0151      	lsls	r1, r2, #5
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	440a      	add	r2, r1
 8005a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a28:	0cdb      	lsrs	r3, r3, #19
 8005a2a:	04db      	lsls	r3, r3, #19
 8005a2c:	6113      	str	r3, [r2, #16]
 8005a2e:	e074      	b.n	8005b1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4a:	0cdb      	lsrs	r3, r3, #19
 8005a4c:	04db      	lsls	r3, r3, #19
 8005a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6959      	ldr	r1, [r3, #20]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	440b      	add	r3, r1
 8005a8c:	1e59      	subs	r1, r3, #1
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a98:	4b9d      	ldr	r3, [pc, #628]	; (8005d10 <USB_EPStartXfer+0x370>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	0148      	lsls	r0, r1, #5
 8005aa0:	69f9      	ldr	r1, [r7, #28]
 8005aa2:	4401      	add	r1, r0
 8005aa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	0148      	lsls	r0, r1, #5
 8005ac6:	69f9      	ldr	r1, [r7, #28]
 8005ac8:	4401      	add	r1, r0
 8005aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	78db      	ldrb	r3, [r3, #3]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d11f      	bne.n	8005b1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	0151      	lsls	r1, r2, #5
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	440a      	add	r2, r1
 8005af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005af8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d14b      	bne.n	8005bb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	461a      	mov	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d128      	bne.n	8005b96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e00f      	b.n	8005b96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e12f      	b.n	8005e18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d015      	beq.n	8005c0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8117 	beq.w	8005e18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	69f9      	ldr	r1, [r7, #28]
 8005c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c06:	4313      	orrs	r3, r2
 8005c08:	634b      	str	r3, [r1, #52]	; 0x34
 8005c0a:	e105      	b.n	8005e18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e00f      	b.n	8005c5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781a      	ldrb	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	b298      	uxth	r0, r3
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4603      	mov	r3, r0
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa2b 	bl	80060ce <USB_WritePacket>
 8005c78:	e0ce      	b.n	8005e18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c94:	0cdb      	lsrs	r3, r3, #19
 8005c96:	04db      	lsls	r3, r3, #19
 8005c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d126      	bne.n	8005d14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	0148      	lsls	r0, r1, #5
 8005ce0:	69f9      	ldr	r1, [r7, #28]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d0a:	6113      	str	r3, [r2, #16]
 8005d0c:	e036      	b.n	8005d7c <USB_EPStartXfer+0x3dc>
 8005d0e:	bf00      	nop
 8005d10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	1e5a      	subs	r2, r3, #1
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	8afb      	ldrh	r3, [r7, #22]
 8005d3a:	04d9      	lsls	r1, r3, #19
 8005d3c:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <USB_EPStartXfer+0x484>)
 8005d3e:	400b      	ands	r3, r1
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	0148      	lsls	r0, r1, #5
 8005d44:	69f9      	ldr	r1, [r7, #28]
 8005d46:	4401      	add	r1, r0
 8005d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	8af9      	ldrh	r1, [r7, #22]
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6c:	69b9      	ldr	r1, [r7, #24]
 8005d6e:	0148      	lsls	r0, r1, #5
 8005d70:	69f9      	ldr	r1, [r7, #28]
 8005d72:	4401      	add	r1, r0
 8005d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d10d      	bne.n	8005d9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	68d9      	ldr	r1, [r3, #12]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	78db      	ldrb	r3, [r3, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d128      	bne.n	8005df8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d110      	bne.n	8005dd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e00f      	b.n	8005df8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	1ff80000 	.word	0x1ff80000

08005e28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f040 80cd 	bne.w	8005fe4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d132      	bne.n	8005eb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb0:	0cdb      	lsrs	r3, r3, #19
 8005eb2:	04db      	lsls	r3, r3, #19
 8005eb4:	6113      	str	r3, [r2, #16]
 8005eb6:	e04e      	b.n	8005f56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed2:	0cdb      	lsrs	r3, r3, #19
 8005ed4:	04db      	lsls	r3, r3, #19
 8005ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ef6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005efa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d903      	bls.n	8005f10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	6939      	ldr	r1, [r7, #16]
 8005f48:	0148      	lsls	r0, r1, #5
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	4401      	add	r1, r0
 8005f4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f52:	4313      	orrs	r3, r2
 8005f54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d11e      	bne.n	8005f9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e092      	b.n	80060c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d07e      	beq.n	80060c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	634b      	str	r3, [r1, #52]	; 0x34
 8005fe2:	e06d      	b.n	80060c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffe:	0cdb      	lsrs	r3, r3, #19
 8006000:	04db      	lsls	r3, r3, #19
 8006002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006026:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606e:	6939      	ldr	r1, [r7, #16]
 8006070:	0148      	lsls	r0, r1, #5
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	4401      	add	r1, r0
 8006076:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800607a:	4313      	orrs	r3, r2
 800607c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10d      	bne.n	80060a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	68d9      	ldr	r1, [r3, #12]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	460a      	mov	r2, r1
 800609e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b089      	sub	sp, #36	; 0x24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	4611      	mov	r1, r2
 80060da:	461a      	mov	r2, r3
 80060dc:	460b      	mov	r3, r1
 80060de:	71fb      	strb	r3, [r7, #7]
 80060e0:	4613      	mov	r3, r2
 80060e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d123      	bne.n	800613c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060f4:	88bb      	ldrh	r3, [r7, #4]
 80060f6:	3303      	adds	r3, #3
 80060f8:	089b      	lsrs	r3, r3, #2
 80060fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	e018      	b.n	8006134 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	031a      	lsls	r2, r3, #12
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610e:	461a      	mov	r2, r3
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	3301      	adds	r3, #1
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3e2      	bcc.n	8006102 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3724      	adds	r7, #36	; 0x24
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800614a:	b480      	push	{r7}
 800614c:	b08b      	sub	sp, #44	; 0x2c
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	4613      	mov	r3, r2
 8006156:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	089b      	lsrs	r3, r3, #2
 8006164:	b29b      	uxth	r3, r3
 8006166:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006170:	2300      	movs	r3, #0
 8006172:	623b      	str	r3, [r7, #32]
 8006174:	e014      	b.n	80061a0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	601a      	str	r2, [r3, #0]
    pDest++;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	3301      	adds	r3, #1
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	3301      	adds	r3, #1
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	3301      	adds	r3, #1
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	3301      	adds	r3, #1
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d3e6      	bcc.n	8006176 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061a8:	8bfb      	ldrh	r3, [r7, #30]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01e      	beq.n	80061ec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b8:	461a      	mov	r2, r3
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	701a      	strb	r2, [r3, #0]
      i++;
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	3301      	adds	r3, #1
 80061d8:	623b      	str	r3, [r7, #32]
      pDest++;
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	3301      	adds	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061e0:	8bfb      	ldrh	r3, [r7, #30]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061e6:	8bfb      	ldrh	r3, [r7, #30]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1ea      	bne.n	80061c2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	372c      	adds	r7, #44	; 0x2c
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d12c      	bne.n	8006270 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	db12      	blt.n	800624e <USB_EPSetStall+0x54>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800624c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e02b      	b.n	80062c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	db12      	blt.n	80062a8 <USB_EPSetStall+0xae>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00f      	beq.n	80062a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d128      	bne.n	8006344 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	78db      	ldrb	r3, [r3, #3]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d003      	beq.n	8006322 <USB_EPClearStall+0x4c>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	78db      	ldrb	r3, [r3, #3]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d138      	bne.n	8006394 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	0151      	lsls	r1, r2, #5
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	440a      	add	r2, r1
 8006338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e027      	b.n	8006394 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006362:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d003      	beq.n	8006374 <USB_EPClearStall+0x9e>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	78db      	ldrb	r3, [r3, #3]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d10f      	bne.n	8006394 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006392:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006408:	f023 0303 	bic.w	r3, r3, #3
 800640c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800641c:	f023 0302 	bic.w	r3, r3, #2
 8006420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800644a:	f023 0303 	bic.w	r3, r3, #3
 800644e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800645e:	f043 0302 	orr.w	r3, r3, #2
 8006462:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b085      	sub	sp, #20
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4013      	ands	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	0c1b      	lsrs	r3, r3, #16
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	b29b      	uxth	r3, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800652e:	68bb      	ldr	r3, [r7, #8]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	01db      	lsls	r3, r3, #7
 800656e:	b2db      	uxtb	r3, r3
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4013      	ands	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800658a:	68bb      	ldr	r3, [r7, #8]
}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f003 0301 	and.w	r3, r3, #1
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	460b      	mov	r3, r1
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	333c      	adds	r3, #60	; 0x3c
 8006612:	3304      	adds	r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <USB_EP0_OutStart+0xb8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d90a      	bls.n	8006636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006630:	d101      	bne.n	8006636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	e037      	b.n	80066a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006664:	f043 0318 	orr.w	r3, r3, #24
 8006668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006678:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800667c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d10f      	bne.n	80066a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668a:	461a      	mov	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80066a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	4f54300a 	.word	0x4f54300a

080066b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3301      	adds	r3, #1
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	4a13      	ldr	r2, [pc, #76]	; (8006718 <USB_CoreReset+0x60>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d901      	bls.n	80066d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e01a      	b.n	800670a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	daf3      	bge.n	80066c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f043 0201 	orr.w	r2, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4a09      	ldr	r2, [pc, #36]	; (8006718 <USB_CoreReset+0x60>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e006      	b.n	800670a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d0f1      	beq.n	80066ec <USB_CoreReset+0x34>

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	00030d40 	.word	0x00030d40

0800671c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006728:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800672c:	f002 f952 	bl	80089d4 <USBD_static_malloc>
 8006730:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006740:	2302      	movs	r3, #2
 8006742:	e066      	b.n	8006812 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	7c1b      	ldrb	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d119      	bne.n	8006788 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006758:	2202      	movs	r2, #2
 800675a:	2181      	movs	r1, #129	; 0x81
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 f816 	bl	800878e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800676c:	2202      	movs	r2, #2
 800676e:	2101      	movs	r1, #1
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f002 f80c 	bl	800878e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2210      	movs	r2, #16
 8006782:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006786:	e016      	b.n	80067b6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006788:	2340      	movs	r3, #64	; 0x40
 800678a:	2202      	movs	r2, #2
 800678c:	2181      	movs	r1, #129	; 0x81
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fffd 	bl	800878e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	2202      	movs	r2, #2
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fff4 	bl	800878e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2210      	movs	r2, #16
 80067b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067b6:	2308      	movs	r3, #8
 80067b8:	2203      	movs	r2, #3
 80067ba:	2182      	movs	r1, #130	; 0x82
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 ffe6 	bl	800878e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7c1b      	ldrb	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067f6:	2101      	movs	r1, #1
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f002 f8b7 	bl	800896c <USBD_LL_PrepareReceive>
 80067fe:	e007      	b.n	8006810 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006806:	2340      	movs	r3, #64	; 0x40
 8006808:	2101      	movs	r1, #1
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 f8ae 	bl	800896c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	460b      	mov	r3, r1
 8006824:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006826:	2181      	movs	r1, #129	; 0x81
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 ffd6 	bl	80087da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006834:	2101      	movs	r1, #1
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 ffcf 	bl	80087da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006844:	2182      	movs	r1, #130	; 0x82
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 ffc7 	bl	80087da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006876:	4618      	mov	r0, r3
 8006878:	f002 f8ba 	bl	80089f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e0af      	b.n	8006a18 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d03f      	beq.n	8006944 <USBD_CDC_Setup+0xb4>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	f040 809f 	bne.w	8006a08 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	88db      	ldrh	r3, [r3, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02e      	beq.n	8006930 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	da16      	bge.n	800690a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80068e8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	88d2      	ldrh	r2, [r2, #6]
 80068ee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	2b07      	cmp	r3, #7
 80068f6:	bf28      	it	cs
 80068f8:	2307      	movcs	r3, #7
 80068fa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	89fa      	ldrh	r2, [r7, #14]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fb19 	bl	8007f3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006908:	e085      	b.n	8006a16 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785a      	ldrb	r2, [r3, #1]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	88db      	ldrh	r3, [r3, #6]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006920:	6939      	ldr	r1, [r7, #16]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	461a      	mov	r2, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fb32 	bl	8007f92 <USBD_CtlPrepareRx>
      break;
 800692e:	e072      	b.n	8006a16 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	7850      	ldrb	r0, [r2, #1]
 800693c:	2200      	movs	r2, #0
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	4798      	blx	r3
      break;
 8006942:	e068      	b.n	8006a16 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b0b      	cmp	r3, #11
 800694a:	d852      	bhi.n	80069f2 <USBD_CDC_Setup+0x162>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <USBD_CDC_Setup+0xc4>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006985 	.word	0x08006985
 8006958:	08006a01 	.word	0x08006a01
 800695c:	080069f3 	.word	0x080069f3
 8006960:	080069f3 	.word	0x080069f3
 8006964:	080069f3 	.word	0x080069f3
 8006968:	080069f3 	.word	0x080069f3
 800696c:	080069f3 	.word	0x080069f3
 8006970:	080069f3 	.word	0x080069f3
 8006974:	080069f3 	.word	0x080069f3
 8006978:	080069f3 	.word	0x080069f3
 800697c:	080069af 	.word	0x080069af
 8006980:	080069d9 	.word	0x080069d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d107      	bne.n	80069a0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006990:	f107 030a 	add.w	r3, r7, #10
 8006994:	2202      	movs	r2, #2
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 face 	bl	8007f3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800699e:	e032      	b.n	8006a06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f001 fa58 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	75fb      	strb	r3, [r7, #23]
          break;
 80069ac:	e02b      	b.n	8006a06 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d107      	bne.n	80069ca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069ba:	f107 030d 	add.w	r3, r7, #13
 80069be:	2201      	movs	r2, #1
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 fab9 	bl	8007f3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c8:	e01d      	b.n	8006a06 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fa43 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 80069d2:	2303      	movs	r3, #3
 80069d4:	75fb      	strb	r3, [r7, #23]
          break;
 80069d6:	e016      	b.n	8006a06 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d00f      	beq.n	8006a04 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fa36 	bl	8007e58 <USBD_CtlError>
            ret = USBD_FAIL;
 80069ec:	2303      	movs	r3, #3
 80069ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069f0:	e008      	b.n	8006a04 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fa2f 	bl	8007e58 <USBD_CtlError>
          ret = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
          break;
 80069fe:	e002      	b.n	8006a06 <USBD_CDC_Setup+0x176>
          break;
 8006a00:	bf00      	nop
 8006a02:	e008      	b.n	8006a16 <USBD_CDC_Setup+0x186>
          break;
 8006a04:	bf00      	nop
      }
      break;
 8006a06:	e006      	b.n	8006a16 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fa24 	bl	8007e58 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	75fb      	strb	r3, [r7, #23]
      break;
 8006a14:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e04f      	b.n	8006ae2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	3318      	adds	r3, #24
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d029      	beq.n	8006ab4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a60:	78fa      	ldrb	r2, [r7, #3]
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	3318      	adds	r3, #24
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	78f9      	ldrb	r1, [r7, #3]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	460b      	mov	r3, r1
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	1a5b      	subs	r3, r3, r1
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4403      	add	r3, r0
 8006a80:	3344      	adds	r3, #68	; 0x44
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a88:	fb03 f301 	mul.w	r3, r3, r1
 8006a8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d110      	bne.n	8006ab4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3318      	adds	r3, #24
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 ff3c 	bl	800892a <USBD_LL_Transmit>
 8006ab2:	e015      	b.n	8006ae0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e015      	b.n	8006b38 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 ff4c 	bl	80089ae <USBD_LL_GetRxDataSize>
 8006b16:	4602      	mov	r2, r0
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b32:	4611      	mov	r1, r2
 8006b34:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e01b      	b.n	8006b92 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d015      	beq.n	8006b90 <USBD_CDC_EP0_RxReady+0x50>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b6a:	2bff      	cmp	r3, #255	; 0xff
 8006b6c:	d010      	beq.n	8006b90 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006b7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b84:	b292      	uxth	r2, r2
 8006b86:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	22ff      	movs	r2, #255	; 0xff
 8006b8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2243      	movs	r2, #67	; 0x43
 8006ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006baa:	4b03      	ldr	r3, [pc, #12]	; (8006bb8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	20000094 	.word	0x20000094

08006bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2243      	movs	r2, #67	; 0x43
 8006bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006bca:	4b03      	ldr	r3, [pc, #12]	; (8006bd8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000050 	.word	0x20000050

08006bdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2243      	movs	r2, #67	; 0x43
 8006be8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006bea:	4b03      	ldr	r3, [pc, #12]	; (8006bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	200000d8 	.word	0x200000d8

08006bfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	220a      	movs	r2, #10
 8006c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	2000000c 	.word	0x2000000c

08006c1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e004      	b.n	8006c3a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c58:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e008      	b.n	8006c76 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e004      	b.n	8006ca8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e01a      	b.n	8006d0c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d114      	bne.n	8006d0a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006cfe:	2181      	movs	r1, #129	; 0x81
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fe12 	bl	800892a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e016      	b.n	8006d60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7c1b      	ldrb	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d44:	2101      	movs	r1, #1
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fe10 	bl	800896c <USBD_LL_PrepareReceive>
 8006d4c:	e007      	b.n	8006d5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d54:	2340      	movs	r3, #64	; 0x40
 8006d56:	2101      	movs	r1, #1
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fe07 	bl	800896c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01f      	b.n	8006dc0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	79fa      	ldrb	r2, [r7, #7]
 8006db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f001 fc83 	bl	80086c0 <USBD_LL_Init>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e016      	b.n	8006e0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	f107 020e 	add.w	r2, r7, #14
 8006e00:	4610      	mov	r0, r2
 8006e02:	4798      	blx	r3
 8006e04:	4602      	mov	r2, r0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 fc9a 	bl	8008758 <USBD_LL_Start>
 8006e24:	4603      	mov	r3, r0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	78fa      	ldrb	r2, [r7, #3]
 8006e68:	4611      	mov	r1, r2
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
  }

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff90 	bl	8007de4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d01a      	beq.n	8006f1e <USBD_LL_SetupStage+0x72>
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d822      	bhi.n	8006f32 <USBD_LL_SetupStage+0x86>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <USBD_LL_SetupStage+0x4a>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d00a      	beq.n	8006f0a <USBD_LL_SetupStage+0x5e>
 8006ef4:	e01d      	b.n	8006f32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa62 	bl	80073c8 <USBD_StdDevReq>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e020      	b.n	8006f4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fac6 	bl	80074a4 <USBD_StdItfReq>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f1c:	e016      	b.n	8006f4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb05 	bl	8007536 <USBD_StdEPReq>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f30:	e00c      	b.n	8006f4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fc69 	bl	8008818 <USBD_LL_StallEP>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
      break;
 8006f4a:	bf00      	nop
  }

  return ret;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d138      	bne.n	8006fdc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d14a      	bne.n	8007012 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d913      	bls.n	8006fb0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	1ad2      	subs	r2, r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	bf28      	it	cs
 8006fa2:	4613      	movcs	r3, r2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 f80f 	bl	8007fcc <USBD_CtlContinueRx>
 8006fae:	e030      	b.n	8007012 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d10b      	bne.n	8006fd4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 f80a 	bl	8007fee <USBD_CtlSendStatus>
 8006fda:	e01a      	b.n	8007012 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d114      	bne.n	8007012 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	7afa      	ldrb	r2, [r7, #11]
 8006ffe:	4611      	mov	r1, r2
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	4798      	blx	r3
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	e000      	b.n	8007014 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	460b      	mov	r3, r1
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d16b      	bne.n	8007108 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3314      	adds	r3, #20
 8007034:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800703c:	2b02      	cmp	r3, #2
 800703e:	d156      	bne.n	80070ee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d914      	bls.n	8007076 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	1ad2      	subs	r2, r2, r3
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	461a      	mov	r2, r3
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 ff84 	bl	8007f70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007068:	2300      	movs	r3, #0
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f001 fc7c 	bl	800896c <USBD_LL_PrepareReceive>
 8007074:	e03b      	b.n	80070ee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	429a      	cmp	r2, r3
 8007080:	d11c      	bne.n	80070bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800708a:	429a      	cmp	r2, r3
 800708c:	d316      	bcc.n	80070bc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007098:	429a      	cmp	r2, r3
 800709a:	d20f      	bcs.n	80070bc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 ff65 	bl	8007f70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 fc59 	bl	800896c <USBD_LL_PrepareReceive>
 80070ba:	e018      	b.n	80070ee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d10b      	bne.n	80070e0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070e0:	2180      	movs	r1, #128	; 0x80
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 fb98 	bl	8008818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 ff93 	bl	8008014 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d122      	bne.n	800713e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fe98 	bl	8006e2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007106:	e01a      	b.n	800713e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b03      	cmp	r3, #3
 8007112:	d114      	bne.n	800713e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00e      	beq.n	800713e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	7afa      	ldrb	r2, [r7, #11]
 800712a:	4611      	mov	r1, r2
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	4798      	blx	r3
 8007130:	4603      	mov	r3, r0
 8007132:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	e000      	b.n	8007140 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	e02f      	b.n	80071dc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6852      	ldr	r2, [r2, #4]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	4611      	mov	r1, r2
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	2200      	movs	r2, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 faee 	bl	800878e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2240      	movs	r2, #64	; 0x40
 80071be:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	2200      	movs	r2, #0
 80071c6:	2180      	movs	r1, #128	; 0x80
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fae0 	bl	800878e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2240      	movs	r2, #64	; 0x40
 80071d8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	b2da      	uxtb	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2204      	movs	r2, #4
 800721e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b04      	cmp	r3, #4
 8007242:	d106      	bne.n	8007252 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800724a:	b2da      	uxtb	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	e012      	b.n	800729c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d10b      	bne.n	800729a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e014      	b.n	80072e8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d10d      	bne.n	80072e6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	4611      	mov	r1, r2
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	e014      	b.n	8007334 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d10d      	bne.n	8007332 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2201      	movs	r2, #1
 800735e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d009      	beq.n	8007380 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6852      	ldr	r2, [r2, #4]
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	4611      	mov	r1, r2
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
  }

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800738a:	b480      	push	{r7}
 800738c:	b087      	sub	sp, #28
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073a8:	8a3b      	ldrh	r3, [r7, #16]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	b21a      	sxth	r2, r3
 80073ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	b21b      	sxth	r3, r3
 80073b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073b8:	89fb      	ldrh	r3, [r7, #14]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d005      	beq.n	80073ee <USBD_StdDevReq+0x26>
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d853      	bhi.n	800748e <USBD_StdDevReq+0xc6>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <USBD_StdDevReq+0x3a>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d14f      	bne.n	800748e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e04a      	b.n	8007498 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b09      	cmp	r3, #9
 8007408:	d83b      	bhi.n	8007482 <USBD_StdDevReq+0xba>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <USBD_StdDevReq+0x48>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007465 	.word	0x08007465
 8007414:	08007479 	.word	0x08007479
 8007418:	08007483 	.word	0x08007483
 800741c:	0800746f 	.word	0x0800746f
 8007420:	08007483 	.word	0x08007483
 8007424:	08007443 	.word	0x08007443
 8007428:	08007439 	.word	0x08007439
 800742c:	08007483 	.word	0x08007483
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800744d 	.word	0x0800744d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f9de 	bl	80077fc <USBD_GetDescriptor>
          break;
 8007440:	e024      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb43 	bl	8007ad0 <USBD_SetAddress>
          break;
 800744a:	e01f      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fb82 	bl	8007b58 <USBD_SetConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
          break;
 8007458:	e018      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc21 	bl	8007ca4 <USBD_GetConfig>
          break;
 8007462:	e013      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fc52 	bl	8007d10 <USBD_GetStatus>
          break;
 800746c:	e00e      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc81 	bl	8007d78 <USBD_SetFeature>
          break;
 8007476:	e009      	b.n	800748c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fc90 	bl	8007da0 <USBD_ClrFeature>
          break;
 8007480:	e004      	b.n	800748c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fce7 	bl	8007e58 <USBD_CtlError>
          break;
 800748a:	bf00      	nop
      }
      break;
 800748c:	e004      	b.n	8007498 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fce1 	bl	8007e58 <USBD_CtlError>
      break;
 8007496:	bf00      	nop
  }

  return ret;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop

080074a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d005      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d82f      	bhi.n	8007522 <USBD_StdItfReq+0x7e>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <USBD_StdItfReq+0x26>
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d12b      	bne.n	8007522 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d81d      	bhi.n	8007514 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	889b      	ldrh	r3, [r3, #4]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d813      	bhi.n	800750a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	88db      	ldrh	r3, [r3, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d110      	bne.n	800751e <USBD_StdItfReq+0x7a>
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10d      	bne.n	800751e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fd73 	bl	8007fee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007508:	e009      	b.n	800751e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fca3 	bl	8007e58 <USBD_CtlError>
          break;
 8007512:	e004      	b.n	800751e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc9e 	bl	8007e58 <USBD_CtlError>
          break;
 800751c:	e000      	b.n	8007520 <USBD_StdItfReq+0x7c>
          break;
 800751e:	bf00      	nop
      }
      break;
 8007520:	e004      	b.n	800752c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fc97 	bl	8007e58 <USBD_CtlError>
      break;
 800752a:	bf00      	nop
  }

  return ret;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b084      	sub	sp, #16
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	889b      	ldrh	r3, [r3, #4]
 8007548:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d007      	beq.n	8007566 <USBD_StdEPReq+0x30>
 8007556:	2b40      	cmp	r3, #64	; 0x40
 8007558:	f200 8145 	bhi.w	80077e6 <USBD_StdEPReq+0x2b0>
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00c      	beq.n	800757a <USBD_StdEPReq+0x44>
 8007560:	2b20      	cmp	r3, #32
 8007562:	f040 8140 	bne.w	80077e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
      break;
 8007578:	e13a      	b.n	80077f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d007      	beq.n	8007592 <USBD_StdEPReq+0x5c>
 8007582:	2b03      	cmp	r3, #3
 8007584:	f300 8129 	bgt.w	80077da <USBD_StdEPReq+0x2a4>
 8007588:	2b00      	cmp	r3, #0
 800758a:	d07f      	beq.n	800768c <USBD_StdEPReq+0x156>
 800758c:	2b01      	cmp	r3, #1
 800758e:	d03c      	beq.n	800760a <USBD_StdEPReq+0xd4>
 8007590:	e123      	b.n	80077da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d002      	beq.n	80075a4 <USBD_StdEPReq+0x6e>
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d016      	beq.n	80075d0 <USBD_StdEPReq+0x9a>
 80075a2:	e02c      	b.n	80075fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00d      	beq.n	80075c6 <USBD_StdEPReq+0x90>
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b80      	cmp	r3, #128	; 0x80
 80075ae:	d00a      	beq.n	80075c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 f92f 	bl	8008818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ba:	2180      	movs	r1, #128	; 0x80
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f92b 	bl	8008818 <USBD_LL_StallEP>
 80075c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c4:	e020      	b.n	8007608 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fc45 	bl	8007e58 <USBD_CtlError>
              break;
 80075ce:	e01b      	b.n	8007608 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10e      	bne.n	80075f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <USBD_StdEPReq+0xc0>
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d008      	beq.n	80075f6 <USBD_StdEPReq+0xc0>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	88db      	ldrh	r3, [r3, #6]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075ec:	7bbb      	ldrb	r3, [r7, #14]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 f911 	bl	8008818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fcf9 	bl	8007fee <USBD_CtlSendStatus>

              break;
 80075fc:	e004      	b.n	8007608 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc29 	bl	8007e58 <USBD_CtlError>
              break;
 8007606:	bf00      	nop
          }
          break;
 8007608:	e0ec      	b.n	80077e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d002      	beq.n	800761c <USBD_StdEPReq+0xe6>
 8007616:	2b03      	cmp	r3, #3
 8007618:	d016      	beq.n	8007648 <USBD_StdEPReq+0x112>
 800761a:	e030      	b.n	800767e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <USBD_StdEPReq+0x108>
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d00a      	beq.n	800763e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 f8f3 	bl	8008818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007632:	2180      	movs	r1, #128	; 0x80
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f8ef 	bl	8008818 <USBD_LL_StallEP>
 800763a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800763c:	e025      	b.n	800768a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc09 	bl	8007e58 <USBD_CtlError>
              break;
 8007646:	e020      	b.n	800768a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	885b      	ldrh	r3, [r3, #2]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11b      	bne.n	8007688 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 f8f9 	bl	8008856 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fcc2 	bl	8007fee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4798      	blx	r3
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800767c:	e004      	b.n	8007688 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbe9 	bl	8007e58 <USBD_CtlError>
              break;
 8007686:	e000      	b.n	800768a <USBD_StdEPReq+0x154>
              break;
 8007688:	bf00      	nop
          }
          break;
 800768a:	e0ab      	b.n	80077e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d002      	beq.n	800769e <USBD_StdEPReq+0x168>
 8007698:	2b03      	cmp	r3, #3
 800769a:	d032      	beq.n	8007702 <USBD_StdEPReq+0x1cc>
 800769c:	e097      	b.n	80077ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <USBD_StdEPReq+0x17e>
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d004      	beq.n	80076b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fbd3 	bl	8007e58 <USBD_CtlError>
                break;
 80076b2:	e091      	b.n	80077d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da0b      	bge.n	80076d4 <USBD_StdEPReq+0x19e>
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	3310      	adds	r3, #16
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	e00b      	b.n	80076ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	3304      	adds	r3, #4
 80076ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2202      	movs	r2, #2
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc1d 	bl	8007f3a <USBD_CtlSendData>
              break;
 8007700:	e06a      	b.n	80077d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da11      	bge.n	800772e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	440b      	add	r3, r1
 800771c:	3324      	adds	r3, #36	; 0x24
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d117      	bne.n	8007754 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fb96 	bl	8007e58 <USBD_CtlError>
                  break;
 800772c:	e054      	b.n	80077d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fb83 	bl	8007e58 <USBD_CtlError>
                  break;
 8007752:	e041      	b.n	80077d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da0b      	bge.n	8007774 <USBD_StdEPReq+0x23e>
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	3310      	adds	r3, #16
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	3304      	adds	r3, #4
 8007772:	e00b      	b.n	800778c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	3304      	adds	r3, #4
 800778c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <USBD_StdEPReq+0x264>
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b80      	cmp	r3, #128	; 0x80
 8007798:	d103      	bne.n	80077a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	e00e      	b.n	80077c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 f874 	bl	8008894 <USBD_LL_IsStallEP>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	e002      	b.n	80077c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2202      	movs	r2, #2
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fbb7 	bl	8007f3a <USBD_CtlSendData>
              break;
 80077cc:	e004      	b.n	80077d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fb41 	bl	8007e58 <USBD_CtlError>
              break;
 80077d6:	bf00      	nop
          }
          break;
 80077d8:	e004      	b.n	80077e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb3b 	bl	8007e58 <USBD_CtlError>
          break;
 80077e2:	bf00      	nop
      }
      break;
 80077e4:	e004      	b.n	80077f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fb35 	bl	8007e58 <USBD_CtlError>
      break;
 80077ee:	bf00      	nop
  }

  return ret;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	2b06      	cmp	r3, #6
 800781e:	f200 8128 	bhi.w	8007a72 <USBD_GetDescriptor+0x276>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USBD_GetDescriptor+0x2c>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007845 	.word	0x08007845
 800782c:	0800785d 	.word	0x0800785d
 8007830:	0800789d 	.word	0x0800789d
 8007834:	08007a73 	.word	0x08007a73
 8007838:	08007a73 	.word	0x08007a73
 800783c:	08007a13 	.word	0x08007a13
 8007840:	08007a3f 	.word	0x08007a3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
      break;
 800785a:	e112      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7c1b      	ldrb	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	f107 0208 	add.w	r2, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	2202      	movs	r2, #2
 800787c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800787e:	e100      	b.n	8007a82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f107 0208 	add.w	r2, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	2202      	movs	r2, #2
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e0f2      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	885b      	ldrh	r3, [r3, #2]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b05      	cmp	r3, #5
 80078a4:	f200 80ac 	bhi.w	8007a00 <USBD_GetDescriptor+0x204>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBD_GetDescriptor+0xb4>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c9 	.word	0x080078c9
 80078b4:	080078fd 	.word	0x080078fd
 80078b8:	08007931 	.word	0x08007931
 80078bc:	08007965 	.word	0x08007965
 80078c0:	08007999 	.word	0x08007999
 80078c4:	080079cd 	.word	0x080079cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	7c12      	ldrb	r2, [r2, #16]
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
 80078e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ea:	e091      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fab2 	bl	8007e58 <USBD_CtlError>
            err++;
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	3301      	adds	r3, #1
 80078f8:	72fb      	strb	r3, [r7, #11]
          break;
 80078fa:	e089      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	7c12      	ldrb	r2, [r2, #16]
 8007914:	f107 0108 	add.w	r1, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791e:	e077      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa98 	bl	8007e58 <USBD_CtlError>
            err++;
 8007928:	7afb      	ldrb	r3, [r7, #11]
 800792a:	3301      	adds	r3, #1
 800792c:	72fb      	strb	r3, [r7, #11]
          break;
 800792e:	e06f      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00b      	beq.n	8007954 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	7c12      	ldrb	r2, [r2, #16]
 8007948:	f107 0108 	add.w	r1, r7, #8
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007952:	e05d      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa7e 	bl	8007e58 <USBD_CtlError>
            err++;
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	3301      	adds	r3, #1
 8007960:	72fb      	strb	r3, [r7, #11]
          break;
 8007962:	e055      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00b      	beq.n	8007988 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7c12      	ldrb	r2, [r2, #16]
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007986:	e043      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa64 	bl	8007e58 <USBD_CtlError>
            err++;
 8007990:	7afb      	ldrb	r3, [r7, #11]
 8007992:	3301      	adds	r3, #1
 8007994:	72fb      	strb	r3, [r7, #11]
          break;
 8007996:	e03b      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	7c12      	ldrb	r2, [r2, #16]
 80079b0:	f107 0108 	add.w	r1, r7, #8
 80079b4:	4610      	mov	r0, r2
 80079b6:	4798      	blx	r3
 80079b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ba:	e029      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fa4a 	bl	8007e58 <USBD_CtlError>
            err++;
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	3301      	adds	r3, #1
 80079c8:	72fb      	strb	r3, [r7, #11]
          break;
 80079ca:	e021      	b.n	8007a10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00b      	beq.n	80079f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	7c12      	ldrb	r2, [r2, #16]
 80079e4:	f107 0108 	add.w	r1, r7, #8
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
 80079ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ee:	e00f      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa30 	bl	8007e58 <USBD_CtlError>
            err++;
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	3301      	adds	r3, #1
 80079fc:	72fb      	strb	r3, [r7, #11]
          break;
 80079fe:	e007      	b.n	8007a10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa28 	bl	8007e58 <USBD_CtlError>
          err++;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007a0e:	bf00      	nop
      }
      break;
 8007a10:	e037      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	f107 0208 	add.w	r2, r7, #8
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a2c:	e029      	b.n	8007a82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fa11 	bl	8007e58 <USBD_CtlError>
        err++;
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a3c:	e021      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7c1b      	ldrb	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
 8007a56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	2207      	movs	r2, #7
 8007a5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a60:	e00f      	b.n	8007a82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f9f7 	bl	8007e58 <USBD_CtlError>
        err++;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a70:	e007      	b.n	8007a82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9ef 	bl	8007e58 <USBD_CtlError>
      err++;
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007a80:	bf00      	nop
  }

  if (err != 0U)
 8007a82:	7afb      	ldrb	r3, [r7, #11]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11e      	bne.n	8007ac6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	88db      	ldrh	r3, [r3, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d016      	beq.n	8007abe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007a90:	893b      	ldrh	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00e      	beq.n	8007ab4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88da      	ldrh	r2, [r3, #6]
 8007a9a:	893b      	ldrh	r3, [r7, #8]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bf28      	it	cs
 8007aa0:	4613      	movcs	r3, r2
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa44 	bl	8007f3a <USBD_CtlSendData>
 8007ab2:	e009      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9ce 	bl	8007e58 <USBD_CtlError>
 8007abc:	e004      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fa95 	bl	8007fee <USBD_CtlSendStatus>
 8007ac4:	e000      	b.n	8007ac8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ac6:	bf00      	nop
  }
}
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop

08007ad0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	889b      	ldrh	r3, [r3, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d131      	bne.n	8007b46 <USBD_SetAddress+0x76>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d12d      	bne.n	8007b46 <USBD_SetAddress+0x76>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	2b7f      	cmp	r3, #127	; 0x7f
 8007af0:	d829      	bhi.n	8007b46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007afc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d104      	bne.n	8007b14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9a3 	bl	8007e58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b12:	e01d      	b.n	8007b50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fee3 	bl	80088ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa61 	bl	8007fee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	e009      	b.n	8007b50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	e004      	b.n	8007b50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f985 	bl	8007e58 <USBD_CtlError>
  }
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007b6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b70:	4b4b      	ldr	r3, [pc, #300]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d905      	bls.n	8007b84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f96c 	bl	8007e58 <USBD_CtlError>
    return USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e088      	b.n	8007c96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d002      	beq.n	8007b96 <USBD_SetConfig+0x3e>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d025      	beq.n	8007be0 <USBD_SetConfig+0x88>
 8007b94:	e071      	b.n	8007c7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b96:	4b42      	ldr	r3, [pc, #264]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01c      	beq.n	8007bd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007b9e:	4b40      	ldr	r3, [pc, #256]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ba8:	4b3d      	ldr	r3, [pc, #244]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff f948 	bl	8006e44 <USBD_SetClassConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f949 	bl	8007e58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007bc6:	e065      	b.n	8007c94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa10 	bl	8007fee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bd6:	e05d      	b.n	8007c94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa08 	bl	8007fee <USBD_CtlSendStatus>
      break;
 8007bde:	e059      	b.n	8007c94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007be0:	4b2f      	ldr	r3, [pc, #188]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d112      	bne.n	8007c0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bfa:	4b29      	ldr	r3, [pc, #164]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff f93b 	bl	8006e7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f9f1 	bl	8007fee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c0c:	e042      	b.n	8007c94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007c0e:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d02a      	beq.n	8007c72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff f929 	bl	8006e7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c34:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f902 	bl	8006e44 <USBD_SetClassConfig>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00f      	beq.n	8007c6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f903 	bl	8007e58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f90e 	bl	8006e7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c68:	e014      	b.n	8007c94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9bf 	bl	8007fee <USBD_CtlSendStatus>
      break;
 8007c70:	e010      	b.n	8007c94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9bb 	bl	8007fee <USBD_CtlSendStatus>
      break;
 8007c78:	e00c      	b.n	8007c94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c7a:	6839      	ldr	r1, [r7, #0]
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f8eb 	bl	8007e58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <USBD_SetConfig+0x148>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff f8f7 	bl	8006e7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	73fb      	strb	r3, [r7, #15]
      break;
 8007c92:	bf00      	nop
  }

  return ret;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000370 	.word	0x20000370

08007ca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	88db      	ldrh	r3, [r3, #6]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d004      	beq.n	8007cc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8cd 	bl	8007e58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cbe:	e023      	b.n	8007d08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	dc02      	bgt.n	8007cd2 <USBD_GetConfig+0x2e>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dc03      	bgt.n	8007cd8 <USBD_GetConfig+0x34>
 8007cd0:	e015      	b.n	8007cfe <USBD_GetConfig+0x5a>
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d00b      	beq.n	8007cee <USBD_GetConfig+0x4a>
 8007cd6:	e012      	b.n	8007cfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f927 	bl	8007f3a <USBD_CtlSendData>
        break;
 8007cec:	e00c      	b.n	8007d08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f91f 	bl	8007f3a <USBD_CtlSendData>
        break;
 8007cfc:	e004      	b.n	8007d08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8a9 	bl	8007e58 <USBD_CtlError>
        break;
 8007d06:	bf00      	nop
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d81e      	bhi.n	8007d66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	88db      	ldrh	r3, [r3, #6]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d004      	beq.n	8007d3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f890 	bl	8007e58 <USBD_CtlError>
        break;
 8007d38:	e01a      	b.n	8007d70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f043 0202 	orr.w	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8eb 	bl	8007f3a <USBD_CtlSendData>
      break;
 8007d64:	e004      	b.n	8007d70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f875 	bl	8007e58 <USBD_CtlError>
      break;
 8007d6e:	bf00      	nop
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	885b      	ldrh	r3, [r3, #2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d106      	bne.n	8007d98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f92b 	bl	8007fee <USBD_CtlSendStatus>
  }
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d80b      	bhi.n	8007dd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	885b      	ldrh	r3, [r3, #2]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10c      	bne.n	8007dda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f910 	bl	8007fee <USBD_CtlSendStatus>
      }
      break;
 8007dce:	e004      	b.n	8007dda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f840 	bl	8007e58 <USBD_CtlError>
      break;
 8007dd8:	e000      	b.n	8007ddc <USBD_ClrFeature+0x3c>
      break;
 8007dda:	bf00      	nop
  }
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fabb 	bl	800738a <SWAPBYTE>
 8007e14:	4603      	mov	r3, r0
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff faae 	bl	800738a <SWAPBYTE>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff faa1 	bl	800738a <SWAPBYTE>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	80da      	strh	r2, [r3, #6]
}
 8007e50:	bf00      	nop
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fcd7 	bl	8008818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fcd3 	bl	8008818 <USBD_LL_StallEP>
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b086      	sub	sp, #24
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d036      	beq.n	8007efe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e94:	6938      	ldr	r0, [r7, #16]
 8007e96:	f000 f836 	bl	8007f06 <USBD_GetLen>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4413      	add	r3, r2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	7812      	ldrb	r2, [r2, #0]
 8007eb2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007eca:	e013      	b.n	8007ef4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	7812      	ldrb	r2, [r2, #0]
 8007ed6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	3301      	adds	r3, #1
 8007edc:	613b      	str	r3, [r7, #16]
    idx++;
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ee4:	7dfb      	ldrb	r3, [r7, #23]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
    idx++;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e7      	bne.n	8007ecc <USBD_GetString+0x52>
 8007efc:	e000      	b.n	8007f00 <USBD_GetString+0x86>
    return;
 8007efe:	bf00      	nop
  }
}
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f16:	e005      	b.n	8007f24 <USBD_GetLen+0x1e>
  {
    len++;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1f5      	bne.n	8007f18 <USBD_GetLen+0x12>
  }

  return len;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	2100      	movs	r1, #0
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fce2 	bl	800892a <USBD_LL_Transmit>

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	2100      	movs	r1, #0
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fcd1 	bl	800892a <USBD_LL_Transmit>

  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	60f8      	str	r0, [r7, #12]
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	2100      	movs	r1, #0
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fcd5 	bl	800896c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	2100      	movs	r1, #0
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fcc4 	bl	800896c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ffe:	2300      	movs	r3, #0
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc90 	bl	800892a <USBD_LL_Transmit>

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2205      	movs	r2, #5
 8008020:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008024:	2300      	movs	r3, #0
 8008026:	2200      	movs	r2, #0
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc9e 	bl	800896c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008040:	2200      	movs	r2, #0
 8008042:	4912      	ldr	r1, [pc, #72]	; (800808c <MX_USB_DEVICE_Init+0x50>)
 8008044:	4812      	ldr	r0, [pc, #72]	; (8008090 <MX_USB_DEVICE_Init+0x54>)
 8008046:	f7fe fe8f 	bl	8006d68 <USBD_Init>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008050:	f7f9 fd4a 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008054:	490f      	ldr	r1, [pc, #60]	; (8008094 <MX_USB_DEVICE_Init+0x58>)
 8008056:	480e      	ldr	r0, [pc, #56]	; (8008090 <MX_USB_DEVICE_Init+0x54>)
 8008058:	f7fe feb6 	bl	8006dc8 <USBD_RegisterClass>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008062:	f7f9 fd41 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008066:	490c      	ldr	r1, [pc, #48]	; (8008098 <MX_USB_DEVICE_Init+0x5c>)
 8008068:	4809      	ldr	r0, [pc, #36]	; (8008090 <MX_USB_DEVICE_Init+0x54>)
 800806a:	f7fe fdd7 	bl	8006c1c <USBD_CDC_RegisterInterface>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008074:	f7f9 fd38 	bl	8001ae8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008078:	4805      	ldr	r0, [pc, #20]	; (8008090 <MX_USB_DEVICE_Init+0x54>)
 800807a:	f7fe fecc 	bl	8006e16 <USBD_Start>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008084:	f7f9 fd30 	bl	8001ae8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008088:	bf00      	nop
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000130 	.word	0x20000130
 8008090:	20000640 	.word	0x20000640
 8008094:	20000018 	.word	0x20000018
 8008098:	2000011c 	.word	0x2000011c

0800809c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080a0:	2200      	movs	r2, #0
 80080a2:	4905      	ldr	r1, [pc, #20]	; (80080b8 <CDC_Init_FS+0x1c>)
 80080a4:	4805      	ldr	r0, [pc, #20]	; (80080bc <CDC_Init_FS+0x20>)
 80080a6:	f7fe fdce 	bl	8006c46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080aa:	4905      	ldr	r1, [pc, #20]	; (80080c0 <CDC_Init_FS+0x24>)
 80080ac:	4803      	ldr	r0, [pc, #12]	; (80080bc <CDC_Init_FS+0x20>)
 80080ae:	f7fe fde8 	bl	8006c82 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20001110 	.word	0x20001110
 80080bc:	20000640 	.word	0x20000640
 80080c0:	20000910 	.word	0x20000910

080080c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
 80080e0:	4613      	mov	r3, r2
 80080e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	2b23      	cmp	r3, #35	; 0x23
 80080e8:	d84a      	bhi.n	8008180 <CDC_Control_FS+0xac>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <CDC_Control_FS+0x1c>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008181 	.word	0x08008181
 80080f4:	08008181 	.word	0x08008181
 80080f8:	08008181 	.word	0x08008181
 80080fc:	08008181 	.word	0x08008181
 8008100:	08008181 	.word	0x08008181
 8008104:	08008181 	.word	0x08008181
 8008108:	08008181 	.word	0x08008181
 800810c:	08008181 	.word	0x08008181
 8008110:	08008181 	.word	0x08008181
 8008114:	08008181 	.word	0x08008181
 8008118:	08008181 	.word	0x08008181
 800811c:	08008181 	.word	0x08008181
 8008120:	08008181 	.word	0x08008181
 8008124:	08008181 	.word	0x08008181
 8008128:	08008181 	.word	0x08008181
 800812c:	08008181 	.word	0x08008181
 8008130:	08008181 	.word	0x08008181
 8008134:	08008181 	.word	0x08008181
 8008138:	08008181 	.word	0x08008181
 800813c:	08008181 	.word	0x08008181
 8008140:	08008181 	.word	0x08008181
 8008144:	08008181 	.word	0x08008181
 8008148:	08008181 	.word	0x08008181
 800814c:	08008181 	.word	0x08008181
 8008150:	08008181 	.word	0x08008181
 8008154:	08008181 	.word	0x08008181
 8008158:	08008181 	.word	0x08008181
 800815c:	08008181 	.word	0x08008181
 8008160:	08008181 	.word	0x08008181
 8008164:	08008181 	.word	0x08008181
 8008168:	08008181 	.word	0x08008181
 800816c:	08008181 	.word	0x08008181
 8008170:	08008181 	.word	0x08008181
 8008174:	08008181 	.word	0x08008181
 8008178:	08008181 	.word	0x08008181
 800817c:	08008181 	.word	0x08008181
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008180:	bf00      	nop
  }

  return (USBD_OK);
 8008182:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	4805      	ldr	r0, [pc, #20]	; (80081b4 <CDC_Receive_FS+0x24>)
 800819e:	f7fe fd70 	bl	8006c82 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081a2:	4804      	ldr	r0, [pc, #16]	; (80081b4 <CDC_Receive_FS+0x24>)
 80081a4:	f7fe fdb6 	bl	8006d14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000640 	.word	0x20000640

080081b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081c8:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <CDC_Transmit_FS+0x48>)
 80081ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081da:	2301      	movs	r3, #1
 80081dc:	e00b      	b.n	80081f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081de:	887b      	ldrh	r3, [r7, #2]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4806      	ldr	r0, [pc, #24]	; (8008200 <CDC_Transmit_FS+0x48>)
 80081e6:	f7fe fd2e 	bl	8006c46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081ea:	4805      	ldr	r0, [pc, #20]	; (8008200 <CDC_Transmit_FS+0x48>)
 80081ec:	f7fe fd62 	bl	8006cb4 <USBD_CDC_TransmitPacket>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000640 	.word	0x20000640

08008204 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800821a:	4618      	mov	r0, r3
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
	...

08008228 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2212      	movs	r2, #18
 8008238:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <USBD_FS_DeviceDescriptor+0x20>)
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	2000014c 	.word	0x2000014c

0800824c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2204      	movs	r2, #4
 800825c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20000160 	.word	0x20000160

08008270 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008286:	4808      	ldr	r0, [pc, #32]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008288:	f7ff fdf7 	bl	8007e7a <USBD_GetString>
 800828c:	e004      	b.n	8008298 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4904      	ldr	r1, [pc, #16]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008292:	4805      	ldr	r0, [pc, #20]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008294:	f7ff fdf1 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001910 	.word	0x20001910
 80082a8:	0800b844 	.word	0x0800b844

080082ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4904      	ldr	r1, [pc, #16]	; (80082cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082bc:	4804      	ldr	r0, [pc, #16]	; (80082d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082be:	f7ff fddc 	bl	8007e7a <USBD_GetString>
  return USBD_StrDesc;
 80082c2:	4b02      	ldr	r3, [pc, #8]	; (80082cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20001910 	.word	0x20001910
 80082d0:	0800b85c 	.word	0x0800b85c

080082d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	221a      	movs	r2, #26
 80082e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082e6:	f000 f843 	bl	8008370 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082ea:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000164 	.word	0x20000164

080082f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
 800830e:	4808      	ldr	r0, [pc, #32]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008310:	f7ff fdb3 	bl	8007e7a <USBD_GetString>
 8008314:	e004      	b.n	8008320 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4904      	ldr	r1, [pc, #16]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800831c:	f7ff fdad 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20001910 	.word	0x20001910
 8008330:	0800b870 	.word	0x0800b870

08008334 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4907      	ldr	r1, [pc, #28]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800834a:	4808      	ldr	r0, [pc, #32]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800834c:	f7ff fd95 	bl	8007e7a <USBD_GetString>
 8008350:	e004      	b.n	800835c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4904      	ldr	r1, [pc, #16]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008356:	4805      	ldr	r0, [pc, #20]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008358:	f7ff fd8f 	bl	8007e7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20001910 	.word	0x20001910
 800836c:	0800b87c 	.word	0x0800b87c

08008370 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <Get_SerialNum+0x44>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <Get_SerialNum+0x48>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <Get_SerialNum+0x4c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008396:	2208      	movs	r2, #8
 8008398:	4909      	ldr	r1, [pc, #36]	; (80083c0 <Get_SerialNum+0x50>)
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f814 	bl	80083c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083a0:	2204      	movs	r2, #4
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <Get_SerialNum+0x54>)
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f000 f80f 	bl	80083c8 <IntToUnicode>
  }
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	1fff7a10 	.word	0x1fff7a10
 80083b8:	1fff7a14 	.word	0x1fff7a14
 80083bc:	1fff7a18 	.word	0x1fff7a18
 80083c0:	20000166 	.word	0x20000166
 80083c4:	20000176 	.word	0x20000176

080083c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
 80083de:	e027      	b.n	8008430 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	0f1b      	lsrs	r3, r3, #28
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d80b      	bhi.n	8008400 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	4619      	mov	r1, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	440b      	add	r3, r1
 80083f8:	3230      	adds	r2, #48	; 0x30
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	e00a      	b.n	8008416 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	0f1b      	lsrs	r3, r3, #28
 8008404:	b2da      	uxtb	r2, r3
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	4619      	mov	r1, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	440b      	add	r3, r1
 8008410:	3237      	adds	r2, #55	; 0x37
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	3301      	adds	r3, #1
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	4413      	add	r3, r2
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	3301      	adds	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	7dfa      	ldrb	r2, [r7, #23]
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	429a      	cmp	r2, r3
 8008436:	d3d3      	bcc.n	80083e0 <IntToUnicode+0x18>
  }
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	605a      	str	r2, [r3, #4]
 800845a:	609a      	str	r2, [r3, #8]
 800845c:	60da      	str	r2, [r3, #12]
 800845e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008468:	d13a      	bne.n	80084e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	4b1e      	ldr	r3, [pc, #120]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	4a1d      	ldr	r2, [pc, #116]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 8008474:	f043 0301 	orr.w	r3, r3, #1
 8008478:	6313      	str	r3, [r2, #48]	; 0x30
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008486:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800848a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800848c:	2302      	movs	r3, #2
 800848e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008490:	2300      	movs	r3, #0
 8008492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008494:	2303      	movs	r3, #3
 8008496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008498:	230a      	movs	r3, #10
 800849a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800849c:	f107 0314 	add.w	r3, r7, #20
 80084a0:	4619      	mov	r1, r3
 80084a2:	4812      	ldr	r0, [pc, #72]	; (80084ec <HAL_PCD_MspInit+0xa4>)
 80084a4:	f7f9 fe7c 	bl	80021a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80084a8:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	4a0e      	ldr	r2, [pc, #56]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 80084ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b2:	6353      	str	r3, [r2, #52]	; 0x34
 80084b4:	2300      	movs	r3, #0
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	4a0a      	ldr	r2, [pc, #40]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 80084be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084c2:	6453      	str	r3, [r2, #68]	; 0x44
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <HAL_PCD_MspInit+0xa0>)
 80084c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	2043      	movs	r0, #67	; 0x43
 80084d6:	f7f9 fe2c 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084da:	2043      	movs	r0, #67	; 0x43
 80084dc:	f7f9 fe45 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084e0:	bf00      	nop
 80084e2:	3728      	adds	r7, #40	; 0x28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	40023800 	.word	0x40023800
 80084ec:	40020000 	.word	0x40020000

080084f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fe fcd0 	bl	8006eac <USBD_LL_SetupStage>
}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	4619      	mov	r1, r3
 800853e:	f7fe fd0a 	bl	8006f56 <USBD_LL_DataOutStage>
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4613      	mov	r3, r2
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	3348      	adds	r3, #72	; 0x48
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	4619      	mov	r1, r3
 8008572:	f7fe fd53 	bl	800701c <USBD_LL_DataInStage>
}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fe67 	bl	8007260 <USBD_LL_SOF>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d001      	beq.n	80085b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085ae:	f7f9 fa9b 	bl	8001ae8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085b8:	7bfa      	ldrb	r2, [r7, #15]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fe11 	bl	80071e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fe fdbd 	bl	8007148 <USBD_LL_Reset>
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fe0c 	bl	8007204 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085fe:	f043 0301 	orr.w	r3, r3, #1
 8008602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <HAL_PCD_SuspendCallback+0x48>)
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	4a03      	ldr	r2, [pc, #12]	; (8008620 <HAL_PCD_SuspendCallback+0x48>)
 8008612:	f043 0306 	orr.w	r3, r3, #6
 8008616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	e000ed00 	.word	0xe000ed00

08008624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fdfc 	bl	8007230 <USBD_LL_Resume>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	4611      	mov	r1, r2
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fe4a 	bl	80072f0 <USBD_LL_IsoOUTIncomplete>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fe12 	bl	80072a4 <USBD_LL_IsoINIncomplete>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fe50 	bl	800733c <USBD_LL_DevConnected>
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fe4d 	bl	8007352 <USBD_LL_DevDisconnected>
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d13c      	bne.n	800874a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80086d0:	4a20      	ldr	r2, [pc, #128]	; (8008754 <USBD_LL_Init+0x94>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a1e      	ldr	r2, [pc, #120]	; (8008754 <USBD_LL_Init+0x94>)
 80086dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086e0:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <USBD_LL_Init+0x94>)
 80086e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086e8:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <USBD_LL_Init+0x94>)
 80086ea:	2204      	movs	r2, #4
 80086ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086ee:	4b19      	ldr	r3, [pc, #100]	; (8008754 <USBD_LL_Init+0x94>)
 80086f0:	2202      	movs	r2, #2
 80086f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086f4:	4b17      	ldr	r3, [pc, #92]	; (8008754 <USBD_LL_Init+0x94>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086fa:	4b16      	ldr	r3, [pc, #88]	; (8008754 <USBD_LL_Init+0x94>)
 80086fc:	2202      	movs	r2, #2
 80086fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008700:	4b14      	ldr	r3, [pc, #80]	; (8008754 <USBD_LL_Init+0x94>)
 8008702:	2200      	movs	r2, #0
 8008704:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008706:	4b13      	ldr	r3, [pc, #76]	; (8008754 <USBD_LL_Init+0x94>)
 8008708:	2200      	movs	r2, #0
 800870a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800870c:	4b11      	ldr	r3, [pc, #68]	; (8008754 <USBD_LL_Init+0x94>)
 800870e:	2200      	movs	r2, #0
 8008710:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <USBD_LL_Init+0x94>)
 8008714:	2200      	movs	r2, #0
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <USBD_LL_Init+0x94>)
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <USBD_LL_Init+0x94>)
 8008720:	f7fa fecb 	bl	80034ba <HAL_PCD_Init>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800872a:	f7f9 f9dd 	bl	8001ae8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800872e:	2180      	movs	r1, #128	; 0x80
 8008730:	4808      	ldr	r0, [pc, #32]	; (8008754 <USBD_LL_Init+0x94>)
 8008732:	f7fc f828 	bl	8004786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008736:	2240      	movs	r2, #64	; 0x40
 8008738:	2100      	movs	r1, #0
 800873a:	4806      	ldr	r0, [pc, #24]	; (8008754 <USBD_LL_Init+0x94>)
 800873c:	f7fb ffdc 	bl	80046f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008740:	2280      	movs	r2, #128	; 0x80
 8008742:	2101      	movs	r1, #1
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <USBD_LL_Init+0x94>)
 8008746:	f7fb ffd7 	bl	80046f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20001b10 	.word	0x20001b10

08008758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800876e:	4618      	mov	r0, r3
 8008770:	f7fa ffc0 	bl	80036f4 <HAL_PCD_Start>
 8008774:	4603      	mov	r3, r0
 8008776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f942 	bl	8008a04 <USBD_Get_USB_Status>
 8008780:	4603      	mov	r3, r0
 8008782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008784:	7bbb      	ldrb	r3, [r7, #14]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	4608      	mov	r0, r1
 8008798:	4611      	mov	r1, r2
 800879a:	461a      	mov	r2, r3
 800879c:	4603      	mov	r3, r0
 800879e:	70fb      	strb	r3, [r7, #3]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70bb      	strb	r3, [r7, #2]
 80087a4:	4613      	mov	r3, r2
 80087a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087b6:	78bb      	ldrb	r3, [r7, #2]
 80087b8:	883a      	ldrh	r2, [r7, #0]
 80087ba:	78f9      	ldrb	r1, [r7, #3]
 80087bc:	f7fb fba4 	bl	8003f08 <HAL_PCD_EP_Open>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 f91c 	bl	8008a04 <USBD_Get_USB_Status>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80087f4:	78fa      	ldrb	r2, [r7, #3]
 80087f6:	4611      	mov	r1, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fb fbed 	bl	8003fd8 <HAL_PCD_EP_Close>
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 f8fd 	bl	8008a04 <USBD_Get_USB_Status>
 800880a:	4603      	mov	r3, r0
 800880c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	460b      	mov	r3, r1
 8008822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	4611      	mov	r1, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f7fb fcc5 	bl	80041c6 <HAL_PCD_EP_SetStall>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f8de 	bl	8008a04 <USBD_Get_USB_Status>
 8008848:	4603      	mov	r3, r0
 800884a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800884c:	7bbb      	ldrb	r3, [r7, #14]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	4611      	mov	r1, r2
 8008874:	4618      	mov	r0, r3
 8008876:	f7fb fd0a 	bl	800428e <HAL_PCD_EP_ClrStall>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887e:	7bfb      	ldrb	r3, [r7, #15]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f8bf 	bl	8008a04 <USBD_Get_USB_Status>
 8008886:	4603      	mov	r3, r0
 8008888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800888a:	7bbb      	ldrb	r3, [r7, #14]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80088a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	da0b      	bge.n	80088c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088b6:	68f9      	ldr	r1, [r7, #12]
 80088b8:	4613      	mov	r3, r2
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	1a9b      	subs	r3, r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	333e      	adds	r3, #62	; 0x3e
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	e00b      	b.n	80088e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	1a9b      	subs	r3, r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	440b      	add	r3, r1
 80088da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80088de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7fb fad7 	bl	8003ebe <HAL_PCD_SetAddress>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 f874 	bl	8008a04 <USBD_Get_USB_Status>
 800891c:	4603      	mov	r3, r0
 800891e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008920:	7bbb      	ldrb	r3, [r7, #14]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b086      	sub	sp, #24
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
 8008936:	460b      	mov	r3, r1
 8008938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008948:	7af9      	ldrb	r1, [r7, #11]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	f7fb fbf0 	bl	8004132 <HAL_PCD_EP_Transmit>
 8008952:	4603      	mov	r3, r0
 8008954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 f853 	bl	8008a04 <USBD_Get_USB_Status>
 800895e:	4603      	mov	r3, r0
 8008960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008962:	7dbb      	ldrb	r3, [r7, #22]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	607a      	str	r2, [r7, #4]
 8008976:	603b      	str	r3, [r7, #0]
 8008978:	460b      	mov	r3, r1
 800897a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800898a:	7af9      	ldrb	r1, [r7, #11]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	f7fb fb6c 	bl	800406c <HAL_PCD_EP_Receive>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 f832 	bl	8008a04 <USBD_Get_USB_Status>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	4611      	mov	r1, r2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fb fb9c 	bl	8004102 <HAL_PCD_EP_GetRxCount>
 80089ca:	4603      	mov	r3, r0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089dc:	4b03      	ldr	r3, [pc, #12]	; (80089ec <USBD_static_malloc+0x18>)
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000374 	.word	0x20000374

080089f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]

}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d817      	bhi.n	8008a48 <USBD_Get_USB_Status+0x44>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <USBD_Get_USB_Status+0x1c>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a31 	.word	0x08008a31
 8008a24:	08008a37 	.word	0x08008a37
 8008a28:	08008a3d 	.word	0x08008a3d
 8008a2c:	08008a43 	.word	0x08008a43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
    break;
 8008a34:	e00b      	b.n	8008a4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a36:	2303      	movs	r3, #3
 8008a38:	73fb      	strb	r3, [r7, #15]
    break;
 8008a3a:	e008      	b.n	8008a4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a40:	e005      	b.n	8008a4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	73fb      	strb	r3, [r7, #15]
    break;
 8008a46:	e002      	b.n	8008a4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a4c:	bf00      	nop
  }
  return usb_status;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <__errno>:
 8008a5c:	4b01      	ldr	r3, [pc, #4]	; (8008a64 <__errno+0x8>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20000180 	.word	0x20000180

08008a68 <__libc_init_array>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	4d0d      	ldr	r5, [pc, #52]	; (8008aa0 <__libc_init_array+0x38>)
 8008a6c:	4c0d      	ldr	r4, [pc, #52]	; (8008aa4 <__libc_init_array+0x3c>)
 8008a6e:	1b64      	subs	r4, r4, r5
 8008a70:	10a4      	asrs	r4, r4, #2
 8008a72:	2600      	movs	r6, #0
 8008a74:	42a6      	cmp	r6, r4
 8008a76:	d109      	bne.n	8008a8c <__libc_init_array+0x24>
 8008a78:	4d0b      	ldr	r5, [pc, #44]	; (8008aa8 <__libc_init_array+0x40>)
 8008a7a:	4c0c      	ldr	r4, [pc, #48]	; (8008aac <__libc_init_array+0x44>)
 8008a7c:	f002 feca 	bl	800b814 <_init>
 8008a80:	1b64      	subs	r4, r4, r5
 8008a82:	10a4      	asrs	r4, r4, #2
 8008a84:	2600      	movs	r6, #0
 8008a86:	42a6      	cmp	r6, r4
 8008a88:	d105      	bne.n	8008a96 <__libc_init_array+0x2e>
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a90:	4798      	blx	r3
 8008a92:	3601      	adds	r6, #1
 8008a94:	e7ee      	b.n	8008a74 <__libc_init_array+0xc>
 8008a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a9a:	4798      	blx	r3
 8008a9c:	3601      	adds	r6, #1
 8008a9e:	e7f2      	b.n	8008a86 <__libc_init_array+0x1e>
 8008aa0:	0800bc8c 	.word	0x0800bc8c
 8008aa4:	0800bc8c 	.word	0x0800bc8c
 8008aa8:	0800bc8c 	.word	0x0800bc8c
 8008aac:	0800bc90 	.word	0x0800bc90

08008ab0 <memset>:
 8008ab0:	4402      	add	r2, r0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d100      	bne.n	8008aba <memset+0xa>
 8008ab8:	4770      	bx	lr
 8008aba:	f803 1b01 	strb.w	r1, [r3], #1
 8008abe:	e7f9      	b.n	8008ab4 <memset+0x4>

08008ac0 <__cvt>:
 8008ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	ec55 4b10 	vmov	r4, r5, d0
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	460e      	mov	r6, r1
 8008acc:	4619      	mov	r1, r3
 8008ace:	462b      	mov	r3, r5
 8008ad0:	bfbb      	ittet	lt
 8008ad2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ad6:	461d      	movlt	r5, r3
 8008ad8:	2300      	movge	r3, #0
 8008ada:	232d      	movlt	r3, #45	; 0x2d
 8008adc:	700b      	strb	r3, [r1, #0]
 8008ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ae4:	4691      	mov	r9, r2
 8008ae6:	f023 0820 	bic.w	r8, r3, #32
 8008aea:	bfbc      	itt	lt
 8008aec:	4622      	movlt	r2, r4
 8008aee:	4614      	movlt	r4, r2
 8008af0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af4:	d005      	beq.n	8008b02 <__cvt+0x42>
 8008af6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008afa:	d100      	bne.n	8008afe <__cvt+0x3e>
 8008afc:	3601      	adds	r6, #1
 8008afe:	2102      	movs	r1, #2
 8008b00:	e000      	b.n	8008b04 <__cvt+0x44>
 8008b02:	2103      	movs	r1, #3
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	ab02      	add	r3, sp, #8
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	ec45 4b10 	vmov	d0, r4, r5
 8008b10:	4653      	mov	r3, sl
 8008b12:	4632      	mov	r2, r6
 8008b14:	f000 fd00 	bl	8009518 <_dtoa_r>
 8008b18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	d102      	bne.n	8008b26 <__cvt+0x66>
 8008b20:	f019 0f01 	tst.w	r9, #1
 8008b24:	d022      	beq.n	8008b6c <__cvt+0xac>
 8008b26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b2a:	eb07 0906 	add.w	r9, r7, r6
 8008b2e:	d110      	bne.n	8008b52 <__cvt+0x92>
 8008b30:	783b      	ldrb	r3, [r7, #0]
 8008b32:	2b30      	cmp	r3, #48	; 0x30
 8008b34:	d10a      	bne.n	8008b4c <__cvt+0x8c>
 8008b36:	2200      	movs	r2, #0
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	f7f7 ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b42:	b918      	cbnz	r0, 8008b4c <__cvt+0x8c>
 8008b44:	f1c6 0601 	rsb	r6, r6, #1
 8008b48:	f8ca 6000 	str.w	r6, [sl]
 8008b4c:	f8da 3000 	ldr.w	r3, [sl]
 8008b50:	4499      	add	r9, r3
 8008b52:	2200      	movs	r2, #0
 8008b54:	2300      	movs	r3, #0
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b5e:	b108      	cbz	r0, 8008b64 <__cvt+0xa4>
 8008b60:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b64:	2230      	movs	r2, #48	; 0x30
 8008b66:	9b03      	ldr	r3, [sp, #12]
 8008b68:	454b      	cmp	r3, r9
 8008b6a:	d307      	bcc.n	8008b7c <__cvt+0xbc>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b70:	1bdb      	subs	r3, r3, r7
 8008b72:	4638      	mov	r0, r7
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	b004      	add	sp, #16
 8008b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7c:	1c59      	adds	r1, r3, #1
 8008b7e:	9103      	str	r1, [sp, #12]
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e7f0      	b.n	8008b66 <__cvt+0xa6>

08008b84 <__exponent>:
 8008b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b86:	4603      	mov	r3, r0
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	bfb8      	it	lt
 8008b8c:	4249      	neglt	r1, r1
 8008b8e:	f803 2b02 	strb.w	r2, [r3], #2
 8008b92:	bfb4      	ite	lt
 8008b94:	222d      	movlt	r2, #45	; 0x2d
 8008b96:	222b      	movge	r2, #43	; 0x2b
 8008b98:	2909      	cmp	r1, #9
 8008b9a:	7042      	strb	r2, [r0, #1]
 8008b9c:	dd2a      	ble.n	8008bf4 <__exponent+0x70>
 8008b9e:	f10d 0407 	add.w	r4, sp, #7
 8008ba2:	46a4      	mov	ip, r4
 8008ba4:	270a      	movs	r7, #10
 8008ba6:	46a6      	mov	lr, r4
 8008ba8:	460a      	mov	r2, r1
 8008baa:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bae:	fb07 1516 	mls	r5, r7, r6, r1
 8008bb2:	3530      	adds	r5, #48	; 0x30
 8008bb4:	2a63      	cmp	r2, #99	; 0x63
 8008bb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	dcf1      	bgt.n	8008ba6 <__exponent+0x22>
 8008bc2:	3130      	adds	r1, #48	; 0x30
 8008bc4:	f1ae 0502 	sub.w	r5, lr, #2
 8008bc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008bcc:	1c44      	adds	r4, r0, #1
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4561      	cmp	r1, ip
 8008bd2:	d30a      	bcc.n	8008bea <__exponent+0x66>
 8008bd4:	f10d 0209 	add.w	r2, sp, #9
 8008bd8:	eba2 020e 	sub.w	r2, r2, lr
 8008bdc:	4565      	cmp	r5, ip
 8008bde:	bf88      	it	hi
 8008be0:	2200      	movhi	r2, #0
 8008be2:	4413      	add	r3, r2
 8008be4:	1a18      	subs	r0, r3, r0
 8008be6:	b003      	add	sp, #12
 8008be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008bf2:	e7ed      	b.n	8008bd0 <__exponent+0x4c>
 8008bf4:	2330      	movs	r3, #48	; 0x30
 8008bf6:	3130      	adds	r1, #48	; 0x30
 8008bf8:	7083      	strb	r3, [r0, #2]
 8008bfa:	70c1      	strb	r1, [r0, #3]
 8008bfc:	1d03      	adds	r3, r0, #4
 8008bfe:	e7f1      	b.n	8008be4 <__exponent+0x60>

08008c00 <_printf_float>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	ed2d 8b02 	vpush	{d8}
 8008c08:	b08d      	sub	sp, #52	; 0x34
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c10:	4616      	mov	r6, r2
 8008c12:	461f      	mov	r7, r3
 8008c14:	4605      	mov	r5, r0
 8008c16:	f001 fa6b 	bl	800a0f0 <_localeconv_r>
 8008c1a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c1e:	4650      	mov	r0, sl
 8008c20:	f7f7 fade 	bl	80001e0 <strlen>
 8008c24:	2300      	movs	r3, #0
 8008c26:	930a      	str	r3, [sp, #40]	; 0x28
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	9305      	str	r3, [sp, #20]
 8008c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c34:	3307      	adds	r3, #7
 8008c36:	f023 0307 	bic.w	r3, r3, #7
 8008c3a:	f103 0208 	add.w	r2, r3, #8
 8008c3e:	f8c8 2000 	str.w	r2, [r8]
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c52:	9307      	str	r3, [sp, #28]
 8008c54:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c58:	ee08 0a10 	vmov	s16, r0
 8008c5c:	4b9f      	ldr	r3, [pc, #636]	; (8008edc <_printf_float+0x2dc>)
 8008c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	f7f7 ff69 	bl	8000b3c <__aeabi_dcmpun>
 8008c6a:	bb88      	cbnz	r0, 8008cd0 <_printf_float+0xd0>
 8008c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c70:	4b9a      	ldr	r3, [pc, #616]	; (8008edc <_printf_float+0x2dc>)
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	f7f7 ff43 	bl	8000b00 <__aeabi_dcmple>
 8008c7a:	bb48      	cbnz	r0, 8008cd0 <_printf_float+0xd0>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 ff32 	bl	8000aec <__aeabi_dcmplt>
 8008c88:	b110      	cbz	r0, 8008c90 <_printf_float+0x90>
 8008c8a:	232d      	movs	r3, #45	; 0x2d
 8008c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c90:	4b93      	ldr	r3, [pc, #588]	; (8008ee0 <_printf_float+0x2e0>)
 8008c92:	4894      	ldr	r0, [pc, #592]	; (8008ee4 <_printf_float+0x2e4>)
 8008c94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c98:	bf94      	ite	ls
 8008c9a:	4698      	movls	r8, r3
 8008c9c:	4680      	movhi	r8, r0
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	f023 0204 	bic.w	r2, r3, #4
 8008ca8:	6022      	str	r2, [r4, #0]
 8008caa:	f04f 0900 	mov.w	r9, #0
 8008cae:	9700      	str	r7, [sp, #0]
 8008cb0:	4633      	mov	r3, r6
 8008cb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 f9d8 	bl	800906c <_printf_common>
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	f040 8090 	bne.w	8008de2 <_printf_float+0x1e2>
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc6:	b00d      	add	sp, #52	; 0x34
 8008cc8:	ecbd 8b02 	vpop	{d8}
 8008ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	f7f7 ff30 	bl	8000b3c <__aeabi_dcmpun>
 8008cdc:	b140      	cbz	r0, 8008cf0 <_printf_float+0xf0>
 8008cde:	464b      	mov	r3, r9
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfbc      	itt	lt
 8008ce4:	232d      	movlt	r3, #45	; 0x2d
 8008ce6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cea:	487f      	ldr	r0, [pc, #508]	; (8008ee8 <_printf_float+0x2e8>)
 8008cec:	4b7f      	ldr	r3, [pc, #508]	; (8008eec <_printf_float+0x2ec>)
 8008cee:	e7d1      	b.n	8008c94 <_printf_float+0x94>
 8008cf0:	6863      	ldr	r3, [r4, #4]
 8008cf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cf6:	9206      	str	r2, [sp, #24]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	d13f      	bne.n	8008d7c <_printf_float+0x17c>
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	6063      	str	r3, [r4, #4]
 8008d00:	9b05      	ldr	r3, [sp, #20]
 8008d02:	6861      	ldr	r1, [r4, #4]
 8008d04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d08:	2300      	movs	r3, #0
 8008d0a:	9303      	str	r3, [sp, #12]
 8008d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8008d0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d12:	ab09      	add	r3, sp, #36	; 0x24
 8008d14:	ec49 8b10 	vmov	d0, r8, r9
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7ff fecd 	bl	8008ac0 <__cvt>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d2a:	2b47      	cmp	r3, #71	; 0x47
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	d108      	bne.n	8008d42 <_printf_float+0x142>
 8008d30:	1cc8      	adds	r0, r1, #3
 8008d32:	db02      	blt.n	8008d3a <_printf_float+0x13a>
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	4299      	cmp	r1, r3
 8008d38:	dd41      	ble.n	8008dbe <_printf_float+0x1be>
 8008d3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d3e:	fa5f fb8b 	uxtb.w	fp, fp
 8008d42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d46:	d820      	bhi.n	8008d8a <_printf_float+0x18a>
 8008d48:	3901      	subs	r1, #1
 8008d4a:	465a      	mov	r2, fp
 8008d4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d50:	9109      	str	r1, [sp, #36]	; 0x24
 8008d52:	f7ff ff17 	bl	8008b84 <__exponent>
 8008d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d58:	1813      	adds	r3, r2, r0
 8008d5a:	2a01      	cmp	r2, #1
 8008d5c:	4681      	mov	r9, r0
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	dc02      	bgt.n	8008d68 <_printf_float+0x168>
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	07d2      	lsls	r2, r2, #31
 8008d66:	d501      	bpl.n	8008d6c <_printf_float+0x16c>
 8008d68:	3301      	adds	r3, #1
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d09c      	beq.n	8008cae <_printf_float+0xae>
 8008d74:	232d      	movs	r3, #45	; 0x2d
 8008d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7a:	e798      	b.n	8008cae <_printf_float+0xae>
 8008d7c:	9a06      	ldr	r2, [sp, #24]
 8008d7e:	2a47      	cmp	r2, #71	; 0x47
 8008d80:	d1be      	bne.n	8008d00 <_printf_float+0x100>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1bc      	bne.n	8008d00 <_printf_float+0x100>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7b9      	b.n	8008cfe <_printf_float+0xfe>
 8008d8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d8e:	d118      	bne.n	8008dc2 <_printf_float+0x1c2>
 8008d90:	2900      	cmp	r1, #0
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	dd0b      	ble.n	8008dae <_printf_float+0x1ae>
 8008d96:	6121      	str	r1, [r4, #16]
 8008d98:	b913      	cbnz	r3, 8008da0 <_printf_float+0x1a0>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d502      	bpl.n	8008da6 <_printf_float+0x1a6>
 8008da0:	3301      	adds	r3, #1
 8008da2:	440b      	add	r3, r1
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008da8:	f04f 0900 	mov.w	r9, #0
 8008dac:	e7de      	b.n	8008d6c <_printf_float+0x16c>
 8008dae:	b913      	cbnz	r3, 8008db6 <_printf_float+0x1b6>
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	07d2      	lsls	r2, r2, #31
 8008db4:	d501      	bpl.n	8008dba <_printf_float+0x1ba>
 8008db6:	3302      	adds	r3, #2
 8008db8:	e7f4      	b.n	8008da4 <_printf_float+0x1a4>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7f2      	b.n	8008da4 <_printf_float+0x1a4>
 8008dbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc4:	4299      	cmp	r1, r3
 8008dc6:	db05      	blt.n	8008dd4 <_printf_float+0x1d4>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	6121      	str	r1, [r4, #16]
 8008dcc:	07d8      	lsls	r0, r3, #31
 8008dce:	d5ea      	bpl.n	8008da6 <_printf_float+0x1a6>
 8008dd0:	1c4b      	adds	r3, r1, #1
 8008dd2:	e7e7      	b.n	8008da4 <_printf_float+0x1a4>
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	bfd4      	ite	le
 8008dd8:	f1c1 0202 	rsble	r2, r1, #2
 8008ddc:	2201      	movgt	r2, #1
 8008dde:	4413      	add	r3, r2
 8008de0:	e7e0      	b.n	8008da4 <_printf_float+0x1a4>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	055a      	lsls	r2, r3, #21
 8008de6:	d407      	bmi.n	8008df8 <_printf_float+0x1f8>
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	4642      	mov	r2, r8
 8008dec:	4631      	mov	r1, r6
 8008dee:	4628      	mov	r0, r5
 8008df0:	47b8      	blx	r7
 8008df2:	3001      	adds	r0, #1
 8008df4:	d12c      	bne.n	8008e50 <_printf_float+0x250>
 8008df6:	e764      	b.n	8008cc2 <_printf_float+0xc2>
 8008df8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dfc:	f240 80e0 	bls.w	8008fc0 <_printf_float+0x3c0>
 8008e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e04:	2200      	movs	r2, #0
 8008e06:	2300      	movs	r3, #0
 8008e08:	f7f7 fe66 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d034      	beq.n	8008e7a <_printf_float+0x27a>
 8008e10:	4a37      	ldr	r2, [pc, #220]	; (8008ef0 <_printf_float+0x2f0>)
 8008e12:	2301      	movs	r3, #1
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f af51 	beq.w	8008cc2 <_printf_float+0xc2>
 8008e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e24:	429a      	cmp	r2, r3
 8008e26:	db02      	blt.n	8008e2e <_printf_float+0x22e>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	07d8      	lsls	r0, r3, #31
 8008e2c:	d510      	bpl.n	8008e50 <_printf_float+0x250>
 8008e2e:	ee18 3a10 	vmov	r3, s16
 8008e32:	4652      	mov	r2, sl
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af41 	beq.w	8008cc2 <_printf_float+0xc2>
 8008e40:	f04f 0800 	mov.w	r8, #0
 8008e44:	f104 091a 	add.w	r9, r4, #26
 8008e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	4543      	cmp	r3, r8
 8008e4e:	dc09      	bgt.n	8008e64 <_printf_float+0x264>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	079b      	lsls	r3, r3, #30
 8008e54:	f100 8105 	bmi.w	8009062 <_printf_float+0x462>
 8008e58:	68e0      	ldr	r0, [r4, #12]
 8008e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e5c:	4298      	cmp	r0, r3
 8008e5e:	bfb8      	it	lt
 8008e60:	4618      	movlt	r0, r3
 8008e62:	e730      	b.n	8008cc6 <_printf_float+0xc6>
 8008e64:	2301      	movs	r3, #1
 8008e66:	464a      	mov	r2, r9
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f43f af27 	beq.w	8008cc2 <_printf_float+0xc2>
 8008e74:	f108 0801 	add.w	r8, r8, #1
 8008e78:	e7e6      	b.n	8008e48 <_printf_float+0x248>
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	dc39      	bgt.n	8008ef4 <_printf_float+0x2f4>
 8008e80:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <_printf_float+0x2f0>)
 8008e82:	2301      	movs	r3, #1
 8008e84:	4631      	mov	r1, r6
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	f43f af19 	beq.w	8008cc2 <_printf_float+0xc2>
 8008e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d102      	bne.n	8008e9e <_printf_float+0x29e>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d5d8      	bpl.n	8008e50 <_printf_float+0x250>
 8008e9e:	ee18 3a10 	vmov	r3, s16
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b8      	blx	r7
 8008eaa:	3001      	adds	r0, #1
 8008eac:	f43f af09 	beq.w	8008cc2 <_printf_float+0xc2>
 8008eb0:	f04f 0900 	mov.w	r9, #0
 8008eb4:	f104 0a1a 	add.w	sl, r4, #26
 8008eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eba:	425b      	negs	r3, r3
 8008ebc:	454b      	cmp	r3, r9
 8008ebe:	dc01      	bgt.n	8008ec4 <_printf_float+0x2c4>
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec2:	e792      	b.n	8008dea <_printf_float+0x1ea>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4652      	mov	r2, sl
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f aef7 	beq.w	8008cc2 <_printf_float+0xc2>
 8008ed4:	f109 0901 	add.w	r9, r9, #1
 8008ed8:	e7ee      	b.n	8008eb8 <_printf_float+0x2b8>
 8008eda:	bf00      	nop
 8008edc:	7fefffff 	.word	0x7fefffff
 8008ee0:	0800b8a8 	.word	0x0800b8a8
 8008ee4:	0800b8ac 	.word	0x0800b8ac
 8008ee8:	0800b8b4 	.word	0x0800b8b4
 8008eec:	0800b8b0 	.word	0x0800b8b0
 8008ef0:	0800b8b8 	.word	0x0800b8b8
 8008ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	bfa8      	it	ge
 8008efc:	461a      	movge	r2, r3
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	4691      	mov	r9, r2
 8008f02:	dc37      	bgt.n	8008f74 <_printf_float+0x374>
 8008f04:	f04f 0b00 	mov.w	fp, #0
 8008f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f0c:	f104 021a 	add.w	r2, r4, #26
 8008f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	eba3 0309 	sub.w	r3, r3, r9
 8008f18:	455b      	cmp	r3, fp
 8008f1a:	dc33      	bgt.n	8008f84 <_printf_float+0x384>
 8008f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f20:	429a      	cmp	r2, r3
 8008f22:	db3b      	blt.n	8008f9c <_printf_float+0x39c>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07da      	lsls	r2, r3, #31
 8008f28:	d438      	bmi.n	8008f9c <_printf_float+0x39c>
 8008f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2c:	9b05      	ldr	r3, [sp, #20]
 8008f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	eba2 0901 	sub.w	r9, r2, r1
 8008f36:	4599      	cmp	r9, r3
 8008f38:	bfa8      	it	ge
 8008f3a:	4699      	movge	r9, r3
 8008f3c:	f1b9 0f00 	cmp.w	r9, #0
 8008f40:	dc35      	bgt.n	8008fae <_printf_float+0x3ae>
 8008f42:	f04f 0800 	mov.w	r8, #0
 8008f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f4a:	f104 0a1a 	add.w	sl, r4, #26
 8008f4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	eba3 0309 	sub.w	r3, r3, r9
 8008f58:	4543      	cmp	r3, r8
 8008f5a:	f77f af79 	ble.w	8008e50 <_printf_float+0x250>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	4652      	mov	r2, sl
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f43f aeaa 	beq.w	8008cc2 <_printf_float+0xc2>
 8008f6e:	f108 0801 	add.w	r8, r8, #1
 8008f72:	e7ec      	b.n	8008f4e <_printf_float+0x34e>
 8008f74:	4613      	mov	r3, r2
 8008f76:	4631      	mov	r1, r6
 8008f78:	4642      	mov	r2, r8
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	47b8      	blx	r7
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d1c0      	bne.n	8008f04 <_printf_float+0x304>
 8008f82:	e69e      	b.n	8008cc2 <_printf_float+0xc2>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	9205      	str	r2, [sp, #20]
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f43f ae97 	beq.w	8008cc2 <_printf_float+0xc2>
 8008f94:	9a05      	ldr	r2, [sp, #20]
 8008f96:	f10b 0b01 	add.w	fp, fp, #1
 8008f9a:	e7b9      	b.n	8008f10 <_printf_float+0x310>
 8008f9c:	ee18 3a10 	vmov	r3, s16
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1be      	bne.n	8008f2a <_printf_float+0x32a>
 8008fac:	e689      	b.n	8008cc2 <_printf_float+0xc2>
 8008fae:	9a05      	ldr	r2, [sp, #20]
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	4442      	add	r2, r8
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d1c1      	bne.n	8008f42 <_printf_float+0x342>
 8008fbe:	e680      	b.n	8008cc2 <_printf_float+0xc2>
 8008fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fc2:	2a01      	cmp	r2, #1
 8008fc4:	dc01      	bgt.n	8008fca <_printf_float+0x3ca>
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d538      	bpl.n	800903c <_printf_float+0x43c>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4642      	mov	r2, r8
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f ae74 	beq.w	8008cc2 <_printf_float+0xc2>
 8008fda:	ee18 3a10 	vmov	r3, s16
 8008fde:	4652      	mov	r2, sl
 8008fe0:	4631      	mov	r1, r6
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b8      	blx	r7
 8008fe6:	3001      	adds	r0, #1
 8008fe8:	f43f ae6b 	beq.w	8008cc2 <_printf_float+0xc2>
 8008fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f7f7 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ff8:	b9d8      	cbnz	r0, 8009032 <_printf_float+0x432>
 8008ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffc:	f108 0201 	add.w	r2, r8, #1
 8009000:	3b01      	subs	r3, #1
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	d10e      	bne.n	800902a <_printf_float+0x42a>
 800900c:	e659      	b.n	8008cc2 <_printf_float+0xc2>
 800900e:	2301      	movs	r3, #1
 8009010:	4652      	mov	r2, sl
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	f43f ae52 	beq.w	8008cc2 <_printf_float+0xc2>
 800901e:	f108 0801 	add.w	r8, r8, #1
 8009022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009024:	3b01      	subs	r3, #1
 8009026:	4543      	cmp	r3, r8
 8009028:	dcf1      	bgt.n	800900e <_printf_float+0x40e>
 800902a:	464b      	mov	r3, r9
 800902c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009030:	e6dc      	b.n	8008dec <_printf_float+0x1ec>
 8009032:	f04f 0800 	mov.w	r8, #0
 8009036:	f104 0a1a 	add.w	sl, r4, #26
 800903a:	e7f2      	b.n	8009022 <_printf_float+0x422>
 800903c:	2301      	movs	r3, #1
 800903e:	4642      	mov	r2, r8
 8009040:	e7df      	b.n	8009002 <_printf_float+0x402>
 8009042:	2301      	movs	r3, #1
 8009044:	464a      	mov	r2, r9
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f ae38 	beq.w	8008cc2 <_printf_float+0xc2>
 8009052:	f108 0801 	add.w	r8, r8, #1
 8009056:	68e3      	ldr	r3, [r4, #12]
 8009058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800905a:	1a5b      	subs	r3, r3, r1
 800905c:	4543      	cmp	r3, r8
 800905e:	dcf0      	bgt.n	8009042 <_printf_float+0x442>
 8009060:	e6fa      	b.n	8008e58 <_printf_float+0x258>
 8009062:	f04f 0800 	mov.w	r8, #0
 8009066:	f104 0919 	add.w	r9, r4, #25
 800906a:	e7f4      	b.n	8009056 <_printf_float+0x456>

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4616      	mov	r6, r2
 8009072:	4699      	mov	r9, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800907c:	4293      	cmp	r3, r2
 800907e:	bfb8      	it	lt
 8009080:	4613      	movlt	r3, r2
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009088:	4607      	mov	r7, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b10a      	cbz	r2, 8009092 <_printf_common+0x26>
 800908e:	3301      	adds	r3, #1
 8009090:	6033      	str	r3, [r6, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	0699      	lsls	r1, r3, #26
 8009096:	bf42      	ittt	mi
 8009098:	6833      	ldrmi	r3, [r6, #0]
 800909a:	3302      	addmi	r3, #2
 800909c:	6033      	strmi	r3, [r6, #0]
 800909e:	6825      	ldr	r5, [r4, #0]
 80090a0:	f015 0506 	ands.w	r5, r5, #6
 80090a4:	d106      	bne.n	80090b4 <_printf_common+0x48>
 80090a6:	f104 0a19 	add.w	sl, r4, #25
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	6832      	ldr	r2, [r6, #0]
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc26      	bgt.n	8009102 <_printf_common+0x96>
 80090b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b8:	1e13      	subs	r3, r2, #0
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	bf18      	it	ne
 80090be:	2301      	movne	r3, #1
 80090c0:	0692      	lsls	r2, r2, #26
 80090c2:	d42b      	bmi.n	800911c <_printf_common+0xb0>
 80090c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c8:	4649      	mov	r1, r9
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c0      	blx	r8
 80090ce:	3001      	adds	r0, #1
 80090d0:	d01e      	beq.n	8009110 <_printf_common+0xa4>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	68e5      	ldr	r5, [r4, #12]
 80090d6:	6832      	ldr	r2, [r6, #0]
 80090d8:	f003 0306 	and.w	r3, r3, #6
 80090dc:	2b04      	cmp	r3, #4
 80090de:	bf08      	it	eq
 80090e0:	1aad      	subeq	r5, r5, r2
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	6922      	ldr	r2, [r4, #16]
 80090e6:	bf0c      	ite	eq
 80090e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090ec:	2500      	movne	r5, #0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bfc4      	itt	gt
 80090f2:	1a9b      	subgt	r3, r3, r2
 80090f4:	18ed      	addgt	r5, r5, r3
 80090f6:	2600      	movs	r6, #0
 80090f8:	341a      	adds	r4, #26
 80090fa:	42b5      	cmp	r5, r6
 80090fc:	d11a      	bne.n	8009134 <_printf_common+0xc8>
 80090fe:	2000      	movs	r0, #0
 8009100:	e008      	b.n	8009114 <_printf_common+0xa8>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4649      	mov	r1, r9
 8009108:	4638      	mov	r0, r7
 800910a:	47c0      	blx	r8
 800910c:	3001      	adds	r0, #1
 800910e:	d103      	bne.n	8009118 <_printf_common+0xac>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	3501      	adds	r5, #1
 800911a:	e7c6      	b.n	80090aa <_printf_common+0x3e>
 800911c:	18e1      	adds	r1, r4, r3
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	2030      	movs	r0, #48	; 0x30
 8009122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009126:	4422      	add	r2, r4
 8009128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800912c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009130:	3302      	adds	r3, #2
 8009132:	e7c7      	b.n	80090c4 <_printf_common+0x58>
 8009134:	2301      	movs	r3, #1
 8009136:	4622      	mov	r2, r4
 8009138:	4649      	mov	r1, r9
 800913a:	4638      	mov	r0, r7
 800913c:	47c0      	blx	r8
 800913e:	3001      	adds	r0, #1
 8009140:	d0e6      	beq.n	8009110 <_printf_common+0xa4>
 8009142:	3601      	adds	r6, #1
 8009144:	e7d9      	b.n	80090fa <_printf_common+0x8e>
	...

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	460c      	mov	r4, r1
 800914e:	4691      	mov	r9, r2
 8009150:	7e27      	ldrb	r7, [r4, #24]
 8009152:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009154:	2f78      	cmp	r7, #120	; 0x78
 8009156:	4680      	mov	r8, r0
 8009158:	469a      	mov	sl, r3
 800915a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	; 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d8 	beq.w	800931a <_printf_i+0x1d2>
 800916a:	2f58      	cmp	r7, #88	; 0x58
 800916c:	f000 80a3 	beq.w	80092b6 <_printf_i+0x16e>
 8009170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a001      	add	r0, pc, #4	; (adr r0, 8009188 <_printf_i+0x40>)
 8009184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	08009301 	.word	0x08009301
 80091b8:	08009225 	.word	0x08009225
 80091bc:	080092e3 	.word	0x080092e3
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	08009323 	.word	0x08009323
 80091cc:	08009171 	.word	0x08009171
 80091d0:	08009225 	.word	0x08009225
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092eb 	.word	0x080092eb
 80091e0:	680b      	ldr	r3, [r1, #0]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	600a      	str	r2, [r1, #0]
 80091e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0a3      	b.n	800933c <_printf_i+0x1f4>
 80091f4:	6825      	ldr	r5, [r4, #0]
 80091f6:	6808      	ldr	r0, [r1, #0]
 80091f8:	062e      	lsls	r6, r5, #24
 80091fa:	f100 0304 	add.w	r3, r0, #4
 80091fe:	d50a      	bpl.n	8009216 <_printf_i+0xce>
 8009200:	6805      	ldr	r5, [r0, #0]
 8009202:	600b      	str	r3, [r1, #0]
 8009204:	2d00      	cmp	r5, #0
 8009206:	da03      	bge.n	8009210 <_printf_i+0xc8>
 8009208:	232d      	movs	r3, #45	; 0x2d
 800920a:	426d      	negs	r5, r5
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009210:	485e      	ldr	r0, [pc, #376]	; (800938c <_printf_i+0x244>)
 8009212:	230a      	movs	r3, #10
 8009214:	e019      	b.n	800924a <_printf_i+0x102>
 8009216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800921a:	6805      	ldr	r5, [r0, #0]
 800921c:	600b      	str	r3, [r1, #0]
 800921e:	bf18      	it	ne
 8009220:	b22d      	sxthne	r5, r5
 8009222:	e7ef      	b.n	8009204 <_printf_i+0xbc>
 8009224:	680b      	ldr	r3, [r1, #0]
 8009226:	6825      	ldr	r5, [r4, #0]
 8009228:	1d18      	adds	r0, r3, #4
 800922a:	6008      	str	r0, [r1, #0]
 800922c:	0628      	lsls	r0, r5, #24
 800922e:	d501      	bpl.n	8009234 <_printf_i+0xec>
 8009230:	681d      	ldr	r5, [r3, #0]
 8009232:	e002      	b.n	800923a <_printf_i+0xf2>
 8009234:	0669      	lsls	r1, r5, #25
 8009236:	d5fb      	bpl.n	8009230 <_printf_i+0xe8>
 8009238:	881d      	ldrh	r5, [r3, #0]
 800923a:	4854      	ldr	r0, [pc, #336]	; (800938c <_printf_i+0x244>)
 800923c:	2f6f      	cmp	r7, #111	; 0x6f
 800923e:	bf0c      	ite	eq
 8009240:	2308      	moveq	r3, #8
 8009242:	230a      	movne	r3, #10
 8009244:	2100      	movs	r1, #0
 8009246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800924a:	6866      	ldr	r6, [r4, #4]
 800924c:	60a6      	str	r6, [r4, #8]
 800924e:	2e00      	cmp	r6, #0
 8009250:	bfa2      	ittt	ge
 8009252:	6821      	ldrge	r1, [r4, #0]
 8009254:	f021 0104 	bicge.w	r1, r1, #4
 8009258:	6021      	strge	r1, [r4, #0]
 800925a:	b90d      	cbnz	r5, 8009260 <_printf_i+0x118>
 800925c:	2e00      	cmp	r6, #0
 800925e:	d04d      	beq.n	80092fc <_printf_i+0x1b4>
 8009260:	4616      	mov	r6, r2
 8009262:	fbb5 f1f3 	udiv	r1, r5, r3
 8009266:	fb03 5711 	mls	r7, r3, r1, r5
 800926a:	5dc7      	ldrb	r7, [r0, r7]
 800926c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009270:	462f      	mov	r7, r5
 8009272:	42bb      	cmp	r3, r7
 8009274:	460d      	mov	r5, r1
 8009276:	d9f4      	bls.n	8009262 <_printf_i+0x11a>
 8009278:	2b08      	cmp	r3, #8
 800927a:	d10b      	bne.n	8009294 <_printf_i+0x14c>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	07df      	lsls	r7, r3, #31
 8009280:	d508      	bpl.n	8009294 <_printf_i+0x14c>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	6861      	ldr	r1, [r4, #4]
 8009286:	4299      	cmp	r1, r3
 8009288:	bfde      	ittt	le
 800928a:	2330      	movle	r3, #48	; 0x30
 800928c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009290:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009294:	1b92      	subs	r2, r2, r6
 8009296:	6122      	str	r2, [r4, #16]
 8009298:	f8cd a000 	str.w	sl, [sp]
 800929c:	464b      	mov	r3, r9
 800929e:	aa03      	add	r2, sp, #12
 80092a0:	4621      	mov	r1, r4
 80092a2:	4640      	mov	r0, r8
 80092a4:	f7ff fee2 	bl	800906c <_printf_common>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d14c      	bne.n	8009346 <_printf_i+0x1fe>
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	b004      	add	sp, #16
 80092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b6:	4835      	ldr	r0, [pc, #212]	; (800938c <_printf_i+0x244>)
 80092b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	680e      	ldr	r6, [r1, #0]
 80092c0:	061f      	lsls	r7, r3, #24
 80092c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80092c6:	600e      	str	r6, [r1, #0]
 80092c8:	d514      	bpl.n	80092f4 <_printf_i+0x1ac>
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	bf44      	itt	mi
 80092ce:	f043 0320 	orrmi.w	r3, r3, #32
 80092d2:	6023      	strmi	r3, [r4, #0]
 80092d4:	b91d      	cbnz	r5, 80092de <_printf_i+0x196>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	f023 0320 	bic.w	r3, r3, #32
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	2310      	movs	r3, #16
 80092e0:	e7b0      	b.n	8009244 <_printf_i+0xfc>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	f043 0320 	orr.w	r3, r3, #32
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	2378      	movs	r3, #120	; 0x78
 80092ec:	4828      	ldr	r0, [pc, #160]	; (8009390 <_printf_i+0x248>)
 80092ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092f2:	e7e3      	b.n	80092bc <_printf_i+0x174>
 80092f4:	065e      	lsls	r6, r3, #25
 80092f6:	bf48      	it	mi
 80092f8:	b2ad      	uxthmi	r5, r5
 80092fa:	e7e6      	b.n	80092ca <_printf_i+0x182>
 80092fc:	4616      	mov	r6, r2
 80092fe:	e7bb      	b.n	8009278 <_printf_i+0x130>
 8009300:	680b      	ldr	r3, [r1, #0]
 8009302:	6826      	ldr	r6, [r4, #0]
 8009304:	6960      	ldr	r0, [r4, #20]
 8009306:	1d1d      	adds	r5, r3, #4
 8009308:	600d      	str	r5, [r1, #0]
 800930a:	0635      	lsls	r5, r6, #24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	d501      	bpl.n	8009314 <_printf_i+0x1cc>
 8009310:	6018      	str	r0, [r3, #0]
 8009312:	e002      	b.n	800931a <_printf_i+0x1d2>
 8009314:	0671      	lsls	r1, r6, #25
 8009316:	d5fb      	bpl.n	8009310 <_printf_i+0x1c8>
 8009318:	8018      	strh	r0, [r3, #0]
 800931a:	2300      	movs	r3, #0
 800931c:	6123      	str	r3, [r4, #16]
 800931e:	4616      	mov	r6, r2
 8009320:	e7ba      	b.n	8009298 <_printf_i+0x150>
 8009322:	680b      	ldr	r3, [r1, #0]
 8009324:	1d1a      	adds	r2, r3, #4
 8009326:	600a      	str	r2, [r1, #0]
 8009328:	681e      	ldr	r6, [r3, #0]
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	2100      	movs	r1, #0
 800932e:	4630      	mov	r0, r6
 8009330:	f7f6 ff5e 	bl	80001f0 <memchr>
 8009334:	b108      	cbz	r0, 800933a <_printf_i+0x1f2>
 8009336:	1b80      	subs	r0, r0, r6
 8009338:	6060      	str	r0, [r4, #4]
 800933a:	6863      	ldr	r3, [r4, #4]
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	2300      	movs	r3, #0
 8009340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009344:	e7a8      	b.n	8009298 <_printf_i+0x150>
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	4632      	mov	r2, r6
 800934a:	4649      	mov	r1, r9
 800934c:	4640      	mov	r0, r8
 800934e:	47d0      	blx	sl
 8009350:	3001      	adds	r0, #1
 8009352:	d0ab      	beq.n	80092ac <_printf_i+0x164>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	079b      	lsls	r3, r3, #30
 8009358:	d413      	bmi.n	8009382 <_printf_i+0x23a>
 800935a:	68e0      	ldr	r0, [r4, #12]
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	4298      	cmp	r0, r3
 8009360:	bfb8      	it	lt
 8009362:	4618      	movlt	r0, r3
 8009364:	e7a4      	b.n	80092b0 <_printf_i+0x168>
 8009366:	2301      	movs	r3, #1
 8009368:	4632      	mov	r2, r6
 800936a:	4649      	mov	r1, r9
 800936c:	4640      	mov	r0, r8
 800936e:	47d0      	blx	sl
 8009370:	3001      	adds	r0, #1
 8009372:	d09b      	beq.n	80092ac <_printf_i+0x164>
 8009374:	3501      	adds	r5, #1
 8009376:	68e3      	ldr	r3, [r4, #12]
 8009378:	9903      	ldr	r1, [sp, #12]
 800937a:	1a5b      	subs	r3, r3, r1
 800937c:	42ab      	cmp	r3, r5
 800937e:	dcf2      	bgt.n	8009366 <_printf_i+0x21e>
 8009380:	e7eb      	b.n	800935a <_printf_i+0x212>
 8009382:	2500      	movs	r5, #0
 8009384:	f104 0619 	add.w	r6, r4, #25
 8009388:	e7f5      	b.n	8009376 <_printf_i+0x22e>
 800938a:	bf00      	nop
 800938c:	0800b8ba 	.word	0x0800b8ba
 8009390:	0800b8cb 	.word	0x0800b8cb

08009394 <sniprintf>:
 8009394:	b40c      	push	{r2, r3}
 8009396:	b530      	push	{r4, r5, lr}
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <sniprintf+0x64>)
 800939a:	1e0c      	subs	r4, r1, #0
 800939c:	681d      	ldr	r5, [r3, #0]
 800939e:	b09d      	sub	sp, #116	; 0x74
 80093a0:	da08      	bge.n	80093b4 <sniprintf+0x20>
 80093a2:	238b      	movs	r3, #139	; 0x8b
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	b01d      	add	sp, #116	; 0x74
 80093ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b0:	b002      	add	sp, #8
 80093b2:	4770      	bx	lr
 80093b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093bc:	bf14      	ite	ne
 80093be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093c2:	4623      	moveq	r3, r4
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	9307      	str	r3, [sp, #28]
 80093c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093cc:	9002      	str	r0, [sp, #8]
 80093ce:	9006      	str	r0, [sp, #24]
 80093d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093d6:	ab21      	add	r3, sp, #132	; 0x84
 80093d8:	a902      	add	r1, sp, #8
 80093da:	4628      	mov	r0, r5
 80093dc:	9301      	str	r3, [sp, #4]
 80093de:	f001 fb35 	bl	800aa4c <_svfiprintf_r>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	bfbc      	itt	lt
 80093e6:	238b      	movlt	r3, #139	; 0x8b
 80093e8:	602b      	strlt	r3, [r5, #0]
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	d0dd      	beq.n	80093aa <sniprintf+0x16>
 80093ee:	9b02      	ldr	r3, [sp, #8]
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
 80093f4:	e7d9      	b.n	80093aa <sniprintf+0x16>
 80093f6:	bf00      	nop
 80093f8:	20000180 	.word	0x20000180

080093fc <quorem>:
 80093fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	6903      	ldr	r3, [r0, #16]
 8009402:	690c      	ldr	r4, [r1, #16]
 8009404:	42a3      	cmp	r3, r4
 8009406:	4607      	mov	r7, r0
 8009408:	f2c0 8081 	blt.w	800950e <quorem+0x112>
 800940c:	3c01      	subs	r4, #1
 800940e:	f101 0814 	add.w	r8, r1, #20
 8009412:	f100 0514 	add.w	r5, r0, #20
 8009416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009420:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009424:	3301      	adds	r3, #1
 8009426:	429a      	cmp	r2, r3
 8009428:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800942c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009430:	fbb2 f6f3 	udiv	r6, r2, r3
 8009434:	d331      	bcc.n	800949a <quorem+0x9e>
 8009436:	f04f 0e00 	mov.w	lr, #0
 800943a:	4640      	mov	r0, r8
 800943c:	46ac      	mov	ip, r5
 800943e:	46f2      	mov	sl, lr
 8009440:	f850 2b04 	ldr.w	r2, [r0], #4
 8009444:	b293      	uxth	r3, r2
 8009446:	fb06 e303 	mla	r3, r6, r3, lr
 800944a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800944e:	b29b      	uxth	r3, r3
 8009450:	ebaa 0303 	sub.w	r3, sl, r3
 8009454:	0c12      	lsrs	r2, r2, #16
 8009456:	f8dc a000 	ldr.w	sl, [ip]
 800945a:	fb06 e202 	mla	r2, r6, r2, lr
 800945e:	fa13 f38a 	uxtah	r3, r3, sl
 8009462:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009466:	fa1f fa82 	uxth.w	sl, r2
 800946a:	f8dc 2000 	ldr.w	r2, [ip]
 800946e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009472:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009476:	b29b      	uxth	r3, r3
 8009478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800947c:	4581      	cmp	r9, r0
 800947e:	f84c 3b04 	str.w	r3, [ip], #4
 8009482:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009486:	d2db      	bcs.n	8009440 <quorem+0x44>
 8009488:	f855 300b 	ldr.w	r3, [r5, fp]
 800948c:	b92b      	cbnz	r3, 800949a <quorem+0x9e>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	3b04      	subs	r3, #4
 8009492:	429d      	cmp	r5, r3
 8009494:	461a      	mov	r2, r3
 8009496:	d32e      	bcc.n	80094f6 <quorem+0xfa>
 8009498:	613c      	str	r4, [r7, #16]
 800949a:	4638      	mov	r0, r7
 800949c:	f001 f8c0 	bl	800a620 <__mcmp>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	db24      	blt.n	80094ee <quorem+0xf2>
 80094a4:	3601      	adds	r6, #1
 80094a6:	4628      	mov	r0, r5
 80094a8:	f04f 0c00 	mov.w	ip, #0
 80094ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80094b0:	f8d0 e000 	ldr.w	lr, [r0]
 80094b4:	b293      	uxth	r3, r2
 80094b6:	ebac 0303 	sub.w	r3, ip, r3
 80094ba:	0c12      	lsrs	r2, r2, #16
 80094bc:	fa13 f38e 	uxtah	r3, r3, lr
 80094c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80094c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094ce:	45c1      	cmp	r9, r8
 80094d0:	f840 3b04 	str.w	r3, [r0], #4
 80094d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80094d8:	d2e8      	bcs.n	80094ac <quorem+0xb0>
 80094da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094e2:	b922      	cbnz	r2, 80094ee <quorem+0xf2>
 80094e4:	3b04      	subs	r3, #4
 80094e6:	429d      	cmp	r5, r3
 80094e8:	461a      	mov	r2, r3
 80094ea:	d30a      	bcc.n	8009502 <quorem+0x106>
 80094ec:	613c      	str	r4, [r7, #16]
 80094ee:	4630      	mov	r0, r6
 80094f0:	b003      	add	sp, #12
 80094f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f6:	6812      	ldr	r2, [r2, #0]
 80094f8:	3b04      	subs	r3, #4
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	d1cc      	bne.n	8009498 <quorem+0x9c>
 80094fe:	3c01      	subs	r4, #1
 8009500:	e7c7      	b.n	8009492 <quorem+0x96>
 8009502:	6812      	ldr	r2, [r2, #0]
 8009504:	3b04      	subs	r3, #4
 8009506:	2a00      	cmp	r2, #0
 8009508:	d1f0      	bne.n	80094ec <quorem+0xf0>
 800950a:	3c01      	subs	r4, #1
 800950c:	e7eb      	b.n	80094e6 <quorem+0xea>
 800950e:	2000      	movs	r0, #0
 8009510:	e7ee      	b.n	80094f0 <quorem+0xf4>
 8009512:	0000      	movs	r0, r0
 8009514:	0000      	movs	r0, r0
	...

08009518 <_dtoa_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	ed2d 8b02 	vpush	{d8}
 8009520:	ec57 6b10 	vmov	r6, r7, d0
 8009524:	b095      	sub	sp, #84	; 0x54
 8009526:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009528:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800952c:	9105      	str	r1, [sp, #20]
 800952e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009532:	4604      	mov	r4, r0
 8009534:	9209      	str	r2, [sp, #36]	; 0x24
 8009536:	930f      	str	r3, [sp, #60]	; 0x3c
 8009538:	b975      	cbnz	r5, 8009558 <_dtoa_r+0x40>
 800953a:	2010      	movs	r0, #16
 800953c:	f000 fddc 	bl	800a0f8 <malloc>
 8009540:	4602      	mov	r2, r0
 8009542:	6260      	str	r0, [r4, #36]	; 0x24
 8009544:	b920      	cbnz	r0, 8009550 <_dtoa_r+0x38>
 8009546:	4bb2      	ldr	r3, [pc, #712]	; (8009810 <_dtoa_r+0x2f8>)
 8009548:	21ea      	movs	r1, #234	; 0xea
 800954a:	48b2      	ldr	r0, [pc, #712]	; (8009814 <_dtoa_r+0x2fc>)
 800954c:	f001 fb8e 	bl	800ac6c <__assert_func>
 8009550:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009554:	6005      	str	r5, [r0, #0]
 8009556:	60c5      	str	r5, [r0, #12]
 8009558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800955a:	6819      	ldr	r1, [r3, #0]
 800955c:	b151      	cbz	r1, 8009574 <_dtoa_r+0x5c>
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	604a      	str	r2, [r1, #4]
 8009562:	2301      	movs	r3, #1
 8009564:	4093      	lsls	r3, r2
 8009566:	608b      	str	r3, [r1, #8]
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fe1b 	bl	800a1a4 <_Bfree>
 800956e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	1e3b      	subs	r3, r7, #0
 8009576:	bfb9      	ittee	lt
 8009578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800957c:	9303      	strlt	r3, [sp, #12]
 800957e:	2300      	movge	r3, #0
 8009580:	f8c8 3000 	strge.w	r3, [r8]
 8009584:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009588:	4ba3      	ldr	r3, [pc, #652]	; (8009818 <_dtoa_r+0x300>)
 800958a:	bfbc      	itt	lt
 800958c:	2201      	movlt	r2, #1
 800958e:	f8c8 2000 	strlt.w	r2, [r8]
 8009592:	ea33 0309 	bics.w	r3, r3, r9
 8009596:	d11b      	bne.n	80095d0 <_dtoa_r+0xb8>
 8009598:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800959a:	f242 730f 	movw	r3, #9999	; 0x270f
 800959e:	6013      	str	r3, [r2, #0]
 80095a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095a4:	4333      	orrs	r3, r6
 80095a6:	f000 857a 	beq.w	800a09e <_dtoa_r+0xb86>
 80095aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ac:	b963      	cbnz	r3, 80095c8 <_dtoa_r+0xb0>
 80095ae:	4b9b      	ldr	r3, [pc, #620]	; (800981c <_dtoa_r+0x304>)
 80095b0:	e024      	b.n	80095fc <_dtoa_r+0xe4>
 80095b2:	4b9b      	ldr	r3, [pc, #620]	; (8009820 <_dtoa_r+0x308>)
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	3308      	adds	r3, #8
 80095b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095ba:	6013      	str	r3, [r2, #0]
 80095bc:	9800      	ldr	r0, [sp, #0]
 80095be:	b015      	add	sp, #84	; 0x54
 80095c0:	ecbd 8b02 	vpop	{d8}
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	4b94      	ldr	r3, [pc, #592]	; (800981c <_dtoa_r+0x304>)
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	3303      	adds	r3, #3
 80095ce:	e7f3      	b.n	80095b8 <_dtoa_r+0xa0>
 80095d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	ec51 0b17 	vmov	r0, r1, d7
 80095da:	2300      	movs	r3, #0
 80095dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80095e0:	f7f7 fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e4:	4680      	mov	r8, r0
 80095e6:	b158      	cbz	r0, 8009600 <_dtoa_r+0xe8>
 80095e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095ea:	2301      	movs	r3, #1
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8551 	beq.w	800a098 <_dtoa_r+0xb80>
 80095f6:	488b      	ldr	r0, [pc, #556]	; (8009824 <_dtoa_r+0x30c>)
 80095f8:	6018      	str	r0, [r3, #0]
 80095fa:	1e43      	subs	r3, r0, #1
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	e7dd      	b.n	80095bc <_dtoa_r+0xa4>
 8009600:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009604:	aa12      	add	r2, sp, #72	; 0x48
 8009606:	a913      	add	r1, sp, #76	; 0x4c
 8009608:	4620      	mov	r0, r4
 800960a:	f001 f8ad 	bl	800a768 <__d2b>
 800960e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009612:	4683      	mov	fp, r0
 8009614:	2d00      	cmp	r5, #0
 8009616:	d07c      	beq.n	8009712 <_dtoa_r+0x1fa>
 8009618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800961a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800961e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009622:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009626:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800962a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800962e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009632:	4b7d      	ldr	r3, [pc, #500]	; (8009828 <_dtoa_r+0x310>)
 8009634:	2200      	movs	r2, #0
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	f7f6 fe2d 	bl	8000298 <__aeabi_dsub>
 800963e:	a36e      	add	r3, pc, #440	; (adr r3, 80097f8 <_dtoa_r+0x2e0>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 ffe0 	bl	8000608 <__aeabi_dmul>
 8009648:	a36d      	add	r3, pc, #436	; (adr r3, 8009800 <_dtoa_r+0x2e8>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fe25 	bl	800029c <__adddf3>
 8009652:	4606      	mov	r6, r0
 8009654:	4628      	mov	r0, r5
 8009656:	460f      	mov	r7, r1
 8009658:	f7f6 ff6c 	bl	8000534 <__aeabi_i2d>
 800965c:	a36a      	add	r3, pc, #424	; (adr r3, 8009808 <_dtoa_r+0x2f0>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f7f6 ffd1 	bl	8000608 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4630      	mov	r0, r6
 800966c:	4639      	mov	r1, r7
 800966e:	f7f6 fe15 	bl	800029c <__adddf3>
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	f7f7 fa77 	bl	8000b68 <__aeabi_d2iz>
 800967a:	2200      	movs	r2, #0
 800967c:	4682      	mov	sl, r0
 800967e:	2300      	movs	r3, #0
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f7 fa32 	bl	8000aec <__aeabi_dcmplt>
 8009688:	b148      	cbz	r0, 800969e <_dtoa_r+0x186>
 800968a:	4650      	mov	r0, sl
 800968c:	f7f6 ff52 	bl	8000534 <__aeabi_i2d>
 8009690:	4632      	mov	r2, r6
 8009692:	463b      	mov	r3, r7
 8009694:	f7f7 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8009698:	b908      	cbnz	r0, 800969e <_dtoa_r+0x186>
 800969a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800969e:	f1ba 0f16 	cmp.w	sl, #22
 80096a2:	d854      	bhi.n	800974e <_dtoa_r+0x236>
 80096a4:	4b61      	ldr	r3, [pc, #388]	; (800982c <_dtoa_r+0x314>)
 80096a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096b2:	f7f7 fa1b 	bl	8000aec <__aeabi_dcmplt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d04b      	beq.n	8009752 <_dtoa_r+0x23a>
 80096ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096be:	2300      	movs	r3, #0
 80096c0:	930e      	str	r3, [sp, #56]	; 0x38
 80096c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096c4:	1b5d      	subs	r5, r3, r5
 80096c6:	1e6b      	subs	r3, r5, #1
 80096c8:	9304      	str	r3, [sp, #16]
 80096ca:	bf43      	ittte	mi
 80096cc:	2300      	movmi	r3, #0
 80096ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80096d2:	9304      	strmi	r3, [sp, #16]
 80096d4:	f04f 0800 	movpl.w	r8, #0
 80096d8:	f1ba 0f00 	cmp.w	sl, #0
 80096dc:	db3b      	blt.n	8009756 <_dtoa_r+0x23e>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80096e4:	4453      	add	r3, sl
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	2300      	movs	r3, #0
 80096ea:	9306      	str	r3, [sp, #24]
 80096ec:	9b05      	ldr	r3, [sp, #20]
 80096ee:	2b09      	cmp	r3, #9
 80096f0:	d869      	bhi.n	80097c6 <_dtoa_r+0x2ae>
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	bfc4      	itt	gt
 80096f6:	3b04      	subgt	r3, #4
 80096f8:	9305      	strgt	r3, [sp, #20]
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	f1a3 0302 	sub.w	r3, r3, #2
 8009700:	bfcc      	ite	gt
 8009702:	2500      	movgt	r5, #0
 8009704:	2501      	movle	r5, #1
 8009706:	2b03      	cmp	r3, #3
 8009708:	d869      	bhi.n	80097de <_dtoa_r+0x2c6>
 800970a:	e8df f003 	tbb	[pc, r3]
 800970e:	4e2c      	.short	0x4e2c
 8009710:	5a4c      	.short	0x5a4c
 8009712:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009716:	441d      	add	r5, r3
 8009718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800971c:	2b20      	cmp	r3, #32
 800971e:	bfc1      	itttt	gt
 8009720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009724:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009728:	fa09 f303 	lslgt.w	r3, r9, r3
 800972c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009730:	bfda      	itte	le
 8009732:	f1c3 0320 	rsble	r3, r3, #32
 8009736:	fa06 f003 	lslle.w	r0, r6, r3
 800973a:	4318      	orrgt	r0, r3
 800973c:	f7f6 feea 	bl	8000514 <__aeabi_ui2d>
 8009740:	2301      	movs	r3, #1
 8009742:	4606      	mov	r6, r0
 8009744:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009748:	3d01      	subs	r5, #1
 800974a:	9310      	str	r3, [sp, #64]	; 0x40
 800974c:	e771      	b.n	8009632 <_dtoa_r+0x11a>
 800974e:	2301      	movs	r3, #1
 8009750:	e7b6      	b.n	80096c0 <_dtoa_r+0x1a8>
 8009752:	900e      	str	r0, [sp, #56]	; 0x38
 8009754:	e7b5      	b.n	80096c2 <_dtoa_r+0x1aa>
 8009756:	f1ca 0300 	rsb	r3, sl, #0
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	2300      	movs	r3, #0
 800975e:	eba8 080a 	sub.w	r8, r8, sl
 8009762:	930d      	str	r3, [sp, #52]	; 0x34
 8009764:	e7c2      	b.n	80096ec <_dtoa_r+0x1d4>
 8009766:	2300      	movs	r3, #0
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976c:	2b00      	cmp	r3, #0
 800976e:	dc39      	bgt.n	80097e4 <_dtoa_r+0x2cc>
 8009770:	f04f 0901 	mov.w	r9, #1
 8009774:	f8cd 9004 	str.w	r9, [sp, #4]
 8009778:	464b      	mov	r3, r9
 800977a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800977e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009780:	2200      	movs	r2, #0
 8009782:	6042      	str	r2, [r0, #4]
 8009784:	2204      	movs	r2, #4
 8009786:	f102 0614 	add.w	r6, r2, #20
 800978a:	429e      	cmp	r6, r3
 800978c:	6841      	ldr	r1, [r0, #4]
 800978e:	d92f      	bls.n	80097f0 <_dtoa_r+0x2d8>
 8009790:	4620      	mov	r0, r4
 8009792:	f000 fcc7 	bl	800a124 <_Balloc>
 8009796:	9000      	str	r0, [sp, #0]
 8009798:	2800      	cmp	r0, #0
 800979a:	d14b      	bne.n	8009834 <_dtoa_r+0x31c>
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <_dtoa_r+0x318>)
 800979e:	4602      	mov	r2, r0
 80097a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80097a4:	e6d1      	b.n	800954a <_dtoa_r+0x32>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7de      	b.n	8009768 <_dtoa_r+0x250>
 80097aa:	2300      	movs	r3, #0
 80097ac:	9308      	str	r3, [sp, #32]
 80097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b0:	eb0a 0903 	add.w	r9, sl, r3
 80097b4:	f109 0301 	add.w	r3, r9, #1
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	bfb8      	it	lt
 80097be:	2301      	movlt	r3, #1
 80097c0:	e7dd      	b.n	800977e <_dtoa_r+0x266>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7f2      	b.n	80097ac <_dtoa_r+0x294>
 80097c6:	2501      	movs	r5, #1
 80097c8:	2300      	movs	r3, #0
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	9508      	str	r5, [sp, #32]
 80097ce:	f04f 39ff 	mov.w	r9, #4294967295
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097d8:	2312      	movs	r3, #18
 80097da:	9209      	str	r2, [sp, #36]	; 0x24
 80097dc:	e7cf      	b.n	800977e <_dtoa_r+0x266>
 80097de:	2301      	movs	r3, #1
 80097e0:	9308      	str	r3, [sp, #32]
 80097e2:	e7f4      	b.n	80097ce <_dtoa_r+0x2b6>
 80097e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80097e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80097ec:	464b      	mov	r3, r9
 80097ee:	e7c6      	b.n	800977e <_dtoa_r+0x266>
 80097f0:	3101      	adds	r1, #1
 80097f2:	6041      	str	r1, [r0, #4]
 80097f4:	0052      	lsls	r2, r2, #1
 80097f6:	e7c6      	b.n	8009786 <_dtoa_r+0x26e>
 80097f8:	636f4361 	.word	0x636f4361
 80097fc:	3fd287a7 	.word	0x3fd287a7
 8009800:	8b60c8b3 	.word	0x8b60c8b3
 8009804:	3fc68a28 	.word	0x3fc68a28
 8009808:	509f79fb 	.word	0x509f79fb
 800980c:	3fd34413 	.word	0x3fd34413
 8009810:	0800b8e9 	.word	0x0800b8e9
 8009814:	0800b900 	.word	0x0800b900
 8009818:	7ff00000 	.word	0x7ff00000
 800981c:	0800b8e5 	.word	0x0800b8e5
 8009820:	0800b8dc 	.word	0x0800b8dc
 8009824:	0800b8b9 	.word	0x0800b8b9
 8009828:	3ff80000 	.word	0x3ff80000
 800982c:	0800b9f8 	.word	0x0800b9f8
 8009830:	0800b95f 	.word	0x0800b95f
 8009834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009836:	9a00      	ldr	r2, [sp, #0]
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	9b01      	ldr	r3, [sp, #4]
 800983c:	2b0e      	cmp	r3, #14
 800983e:	f200 80ad 	bhi.w	800999c <_dtoa_r+0x484>
 8009842:	2d00      	cmp	r5, #0
 8009844:	f000 80aa 	beq.w	800999c <_dtoa_r+0x484>
 8009848:	f1ba 0f00 	cmp.w	sl, #0
 800984c:	dd36      	ble.n	80098bc <_dtoa_r+0x3a4>
 800984e:	4ac3      	ldr	r2, [pc, #780]	; (8009b5c <_dtoa_r+0x644>)
 8009850:	f00a 030f 	and.w	r3, sl, #15
 8009854:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009858:	ed93 7b00 	vldr	d7, [r3]
 800985c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009860:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009864:	eeb0 8a47 	vmov.f32	s16, s14
 8009868:	eef0 8a67 	vmov.f32	s17, s15
 800986c:	d016      	beq.n	800989c <_dtoa_r+0x384>
 800986e:	4bbc      	ldr	r3, [pc, #752]	; (8009b60 <_dtoa_r+0x648>)
 8009870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009878:	f7f6 fff0 	bl	800085c <__aeabi_ddiv>
 800987c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009880:	f007 070f 	and.w	r7, r7, #15
 8009884:	2503      	movs	r5, #3
 8009886:	4eb6      	ldr	r6, [pc, #728]	; (8009b60 <_dtoa_r+0x648>)
 8009888:	b957      	cbnz	r7, 80098a0 <_dtoa_r+0x388>
 800988a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988e:	ec53 2b18 	vmov	r2, r3, d8
 8009892:	f7f6 ffe3 	bl	800085c <__aeabi_ddiv>
 8009896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800989a:	e029      	b.n	80098f0 <_dtoa_r+0x3d8>
 800989c:	2502      	movs	r5, #2
 800989e:	e7f2      	b.n	8009886 <_dtoa_r+0x36e>
 80098a0:	07f9      	lsls	r1, r7, #31
 80098a2:	d508      	bpl.n	80098b6 <_dtoa_r+0x39e>
 80098a4:	ec51 0b18 	vmov	r0, r1, d8
 80098a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098ac:	f7f6 feac 	bl	8000608 <__aeabi_dmul>
 80098b0:	ec41 0b18 	vmov	d8, r0, r1
 80098b4:	3501      	adds	r5, #1
 80098b6:	107f      	asrs	r7, r7, #1
 80098b8:	3608      	adds	r6, #8
 80098ba:	e7e5      	b.n	8009888 <_dtoa_r+0x370>
 80098bc:	f000 80a6 	beq.w	8009a0c <_dtoa_r+0x4f4>
 80098c0:	f1ca 0600 	rsb	r6, sl, #0
 80098c4:	4ba5      	ldr	r3, [pc, #660]	; (8009b5c <_dtoa_r+0x644>)
 80098c6:	4fa6      	ldr	r7, [pc, #664]	; (8009b60 <_dtoa_r+0x648>)
 80098c8:	f006 020f 	and.w	r2, r6, #15
 80098cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098d8:	f7f6 fe96 	bl	8000608 <__aeabi_dmul>
 80098dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098e0:	1136      	asrs	r6, r6, #4
 80098e2:	2300      	movs	r3, #0
 80098e4:	2502      	movs	r5, #2
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	f040 8085 	bne.w	80099f6 <_dtoa_r+0x4de>
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1d2      	bne.n	8009896 <_dtoa_r+0x37e>
 80098f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 808c 	beq.w	8009a10 <_dtoa_r+0x4f8>
 80098f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098fc:	4b99      	ldr	r3, [pc, #612]	; (8009b64 <_dtoa_r+0x64c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 f8f2 	bl	8000aec <__aeabi_dcmplt>
 8009908:	2800      	cmp	r0, #0
 800990a:	f000 8081 	beq.w	8009a10 <_dtoa_r+0x4f8>
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d07d      	beq.n	8009a10 <_dtoa_r+0x4f8>
 8009914:	f1b9 0f00 	cmp.w	r9, #0
 8009918:	dd3c      	ble.n	8009994 <_dtoa_r+0x47c>
 800991a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	2200      	movs	r2, #0
 8009922:	4b91      	ldr	r3, [pc, #580]	; (8009b68 <_dtoa_r+0x650>)
 8009924:	4630      	mov	r0, r6
 8009926:	4639      	mov	r1, r7
 8009928:	f7f6 fe6e 	bl	8000608 <__aeabi_dmul>
 800992c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009930:	3501      	adds	r5, #1
 8009932:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009936:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800993a:	4628      	mov	r0, r5
 800993c:	f7f6 fdfa 	bl	8000534 <__aeabi_i2d>
 8009940:	4632      	mov	r2, r6
 8009942:	463b      	mov	r3, r7
 8009944:	f7f6 fe60 	bl	8000608 <__aeabi_dmul>
 8009948:	4b88      	ldr	r3, [pc, #544]	; (8009b6c <_dtoa_r+0x654>)
 800994a:	2200      	movs	r2, #0
 800994c:	f7f6 fca6 	bl	800029c <__adddf3>
 8009950:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800995c:	2b00      	cmp	r3, #0
 800995e:	d15c      	bne.n	8009a1a <_dtoa_r+0x502>
 8009960:	4b83      	ldr	r3, [pc, #524]	; (8009b70 <_dtoa_r+0x658>)
 8009962:	2200      	movs	r2, #0
 8009964:	4630      	mov	r0, r6
 8009966:	4639      	mov	r1, r7
 8009968:	f7f6 fc96 	bl	8000298 <__aeabi_dsub>
 800996c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009970:	4606      	mov	r6, r0
 8009972:	460f      	mov	r7, r1
 8009974:	f7f7 f8d8 	bl	8000b28 <__aeabi_dcmpgt>
 8009978:	2800      	cmp	r0, #0
 800997a:	f040 8296 	bne.w	8009eaa <_dtoa_r+0x992>
 800997e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009982:	4630      	mov	r0, r6
 8009984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009988:	4639      	mov	r1, r7
 800998a:	f7f7 f8af 	bl	8000aec <__aeabi_dcmplt>
 800998e:	2800      	cmp	r0, #0
 8009990:	f040 8288 	bne.w	8009ea4 <_dtoa_r+0x98c>
 8009994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800999c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f2c0 8158 	blt.w	8009c54 <_dtoa_r+0x73c>
 80099a4:	f1ba 0f0e 	cmp.w	sl, #14
 80099a8:	f300 8154 	bgt.w	8009c54 <_dtoa_r+0x73c>
 80099ac:	4b6b      	ldr	r3, [pc, #428]	; (8009b5c <_dtoa_r+0x644>)
 80099ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80099b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f280 80e3 	bge.w	8009b84 <_dtoa_r+0x66c>
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f300 80df 	bgt.w	8009b84 <_dtoa_r+0x66c>
 80099c6:	f040 826d 	bne.w	8009ea4 <_dtoa_r+0x98c>
 80099ca:	4b69      	ldr	r3, [pc, #420]	; (8009b70 <_dtoa_r+0x658>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099da:	f7f7 f89b 	bl	8000b14 <__aeabi_dcmpge>
 80099de:	9e01      	ldr	r6, [sp, #4]
 80099e0:	4637      	mov	r7, r6
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f040 8243 	bne.w	8009e6e <_dtoa_r+0x956>
 80099e8:	9d00      	ldr	r5, [sp, #0]
 80099ea:	2331      	movs	r3, #49	; 0x31
 80099ec:	f805 3b01 	strb.w	r3, [r5], #1
 80099f0:	f10a 0a01 	add.w	sl, sl, #1
 80099f4:	e23f      	b.n	8009e76 <_dtoa_r+0x95e>
 80099f6:	07f2      	lsls	r2, r6, #31
 80099f8:	d505      	bpl.n	8009a06 <_dtoa_r+0x4ee>
 80099fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fe:	f7f6 fe03 	bl	8000608 <__aeabi_dmul>
 8009a02:	3501      	adds	r5, #1
 8009a04:	2301      	movs	r3, #1
 8009a06:	1076      	asrs	r6, r6, #1
 8009a08:	3708      	adds	r7, #8
 8009a0a:	e76c      	b.n	80098e6 <_dtoa_r+0x3ce>
 8009a0c:	2502      	movs	r5, #2
 8009a0e:	e76f      	b.n	80098f0 <_dtoa_r+0x3d8>
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a16:	930c      	str	r3, [sp, #48]	; 0x30
 8009a18:	e78d      	b.n	8009936 <_dtoa_r+0x41e>
 8009a1a:	9900      	ldr	r1, [sp, #0]
 8009a1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a20:	4b4e      	ldr	r3, [pc, #312]	; (8009b5c <_dtoa_r+0x644>)
 8009a22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a26:	4401      	add	r1, r0
 8009a28:	9102      	str	r1, [sp, #8]
 8009a2a:	9908      	ldr	r1, [sp, #32]
 8009a2c:	eeb0 8a47 	vmov.f32	s16, s14
 8009a30:	eef0 8a67 	vmov.f32	s17, s15
 8009a34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a3c:	2900      	cmp	r1, #0
 8009a3e:	d045      	beq.n	8009acc <_dtoa_r+0x5b4>
 8009a40:	494c      	ldr	r1, [pc, #304]	; (8009b74 <_dtoa_r+0x65c>)
 8009a42:	2000      	movs	r0, #0
 8009a44:	f7f6 ff0a 	bl	800085c <__aeabi_ddiv>
 8009a48:	ec53 2b18 	vmov	r2, r3, d8
 8009a4c:	f7f6 fc24 	bl	8000298 <__aeabi_dsub>
 8009a50:	9d00      	ldr	r5, [sp, #0]
 8009a52:	ec41 0b18 	vmov	d8, r0, r1
 8009a56:	4639      	mov	r1, r7
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f7f7 f885 	bl	8000b68 <__aeabi_d2iz>
 8009a5e:	900c      	str	r0, [sp, #48]	; 0x30
 8009a60:	f7f6 fd68 	bl	8000534 <__aeabi_i2d>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f6 fc14 	bl	8000298 <__aeabi_dsub>
 8009a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a72:	3330      	adds	r3, #48	; 0x30
 8009a74:	f805 3b01 	strb.w	r3, [r5], #1
 8009a78:	ec53 2b18 	vmov	r2, r3, d8
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	f7f7 f834 	bl	8000aec <__aeabi_dcmplt>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d165      	bne.n	8009b54 <_dtoa_r+0x63c>
 8009a88:	4632      	mov	r2, r6
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	4935      	ldr	r1, [pc, #212]	; (8009b64 <_dtoa_r+0x64c>)
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f7f6 fc02 	bl	8000298 <__aeabi_dsub>
 8009a94:	ec53 2b18 	vmov	r2, r3, d8
 8009a98:	f7f7 f828 	bl	8000aec <__aeabi_dcmplt>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f040 80b9 	bne.w	8009c14 <_dtoa_r+0x6fc>
 8009aa2:	9b02      	ldr	r3, [sp, #8]
 8009aa4:	429d      	cmp	r5, r3
 8009aa6:	f43f af75 	beq.w	8009994 <_dtoa_r+0x47c>
 8009aaa:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <_dtoa_r+0x650>)
 8009aac:	ec51 0b18 	vmov	r0, r1, d8
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda9 	bl	8000608 <__aeabi_dmul>
 8009ab6:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <_dtoa_r+0x650>)
 8009ab8:	ec41 0b18 	vmov	d8, r0, r1
 8009abc:	2200      	movs	r2, #0
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fda1 	bl	8000608 <__aeabi_dmul>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	e7c4      	b.n	8009a56 <_dtoa_r+0x53e>
 8009acc:	ec51 0b17 	vmov	r0, r1, d7
 8009ad0:	f7f6 fd9a 	bl	8000608 <__aeabi_dmul>
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	9d00      	ldr	r5, [sp, #0]
 8009ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8009ada:	ec41 0b18 	vmov	d8, r0, r1
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7f7 f841 	bl	8000b68 <__aeabi_d2iz>
 8009ae6:	9011      	str	r0, [sp, #68]	; 0x44
 8009ae8:	f7f6 fd24 	bl	8000534 <__aeabi_i2d>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f6 fbd0 	bl	8000298 <__aeabi_dsub>
 8009af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009afa:	3330      	adds	r3, #48	; 0x30
 8009afc:	f805 3b01 	strb.w	r3, [r5], #1
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	429d      	cmp	r5, r3
 8009b04:	4606      	mov	r6, r0
 8009b06:	460f      	mov	r7, r1
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	d134      	bne.n	8009b78 <_dtoa_r+0x660>
 8009b0e:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <_dtoa_r+0x65c>)
 8009b10:	ec51 0b18 	vmov	r0, r1, d8
 8009b14:	f7f6 fbc2 	bl	800029c <__adddf3>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f7 f802 	bl	8000b28 <__aeabi_dcmpgt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d175      	bne.n	8009c14 <_dtoa_r+0x6fc>
 8009b28:	ec53 2b18 	vmov	r2, r3, d8
 8009b2c:	4911      	ldr	r1, [pc, #68]	; (8009b74 <_dtoa_r+0x65c>)
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f7f6 fbb2 	bl	8000298 <__aeabi_dsub>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 ffd6 	bl	8000aec <__aeabi_dcmplt>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	f43f af27 	beq.w	8009994 <_dtoa_r+0x47c>
 8009b46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b48:	1e6b      	subs	r3, r5, #1
 8009b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b50:	2b30      	cmp	r3, #48	; 0x30
 8009b52:	d0f8      	beq.n	8009b46 <_dtoa_r+0x62e>
 8009b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b58:	e04a      	b.n	8009bf0 <_dtoa_r+0x6d8>
 8009b5a:	bf00      	nop
 8009b5c:	0800b9f8 	.word	0x0800b9f8
 8009b60:	0800b9d0 	.word	0x0800b9d0
 8009b64:	3ff00000 	.word	0x3ff00000
 8009b68:	40240000 	.word	0x40240000
 8009b6c:	401c0000 	.word	0x401c0000
 8009b70:	40140000 	.word	0x40140000
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	4baf      	ldr	r3, [pc, #700]	; (8009e38 <_dtoa_r+0x920>)
 8009b7a:	f7f6 fd45 	bl	8000608 <__aeabi_dmul>
 8009b7e:	4606      	mov	r6, r0
 8009b80:	460f      	mov	r7, r1
 8009b82:	e7ac      	b.n	8009ade <_dtoa_r+0x5c6>
 8009b84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b88:	9d00      	ldr	r5, [sp, #0]
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	f7f6 fe63 	bl	800085c <__aeabi_ddiv>
 8009b96:	f7f6 ffe7 	bl	8000b68 <__aeabi_d2iz>
 8009b9a:	9002      	str	r0, [sp, #8]
 8009b9c:	f7f6 fcca 	bl	8000534 <__aeabi_i2d>
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	f7f6 fd30 	bl	8000608 <__aeabi_dmul>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4630      	mov	r0, r6
 8009bae:	4639      	mov	r1, r7
 8009bb0:	f7f6 fb72 	bl	8000298 <__aeabi_dsub>
 8009bb4:	9e02      	ldr	r6, [sp, #8]
 8009bb6:	9f01      	ldr	r7, [sp, #4]
 8009bb8:	3630      	adds	r6, #48	; 0x30
 8009bba:	f805 6b01 	strb.w	r6, [r5], #1
 8009bbe:	9e00      	ldr	r6, [sp, #0]
 8009bc0:	1bae      	subs	r6, r5, r6
 8009bc2:	42b7      	cmp	r7, r6
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	d137      	bne.n	8009c3a <_dtoa_r+0x722>
 8009bca:	f7f6 fb67 	bl	800029c <__adddf3>
 8009bce:	4642      	mov	r2, r8
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	f7f6 ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 8009bda:	b9c8      	cbnz	r0, 8009c10 <_dtoa_r+0x6f8>
 8009bdc:	4642      	mov	r2, r8
 8009bde:	464b      	mov	r3, r9
 8009be0:	4630      	mov	r0, r6
 8009be2:	4639      	mov	r1, r7
 8009be4:	f7f6 ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8009be8:	b110      	cbz	r0, 8009bf0 <_dtoa_r+0x6d8>
 8009bea:	9b02      	ldr	r3, [sp, #8]
 8009bec:	07d9      	lsls	r1, r3, #31
 8009bee:	d40f      	bmi.n	8009c10 <_dtoa_r+0x6f8>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4659      	mov	r1, fp
 8009bf4:	f000 fad6 	bl	800a1a4 <_Bfree>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	702b      	strb	r3, [r5, #0]
 8009bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bfe:	f10a 0001 	add.w	r0, sl, #1
 8009c02:	6018      	str	r0, [r3, #0]
 8009c04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f43f acd8 	beq.w	80095bc <_dtoa_r+0xa4>
 8009c0c:	601d      	str	r5, [r3, #0]
 8009c0e:	e4d5      	b.n	80095bc <_dtoa_r+0xa4>
 8009c10:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c14:	462b      	mov	r3, r5
 8009c16:	461d      	mov	r5, r3
 8009c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c1c:	2a39      	cmp	r2, #57	; 0x39
 8009c1e:	d108      	bne.n	8009c32 <_dtoa_r+0x71a>
 8009c20:	9a00      	ldr	r2, [sp, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d1f7      	bne.n	8009c16 <_dtoa_r+0x6fe>
 8009c26:	9a07      	ldr	r2, [sp, #28]
 8009c28:	9900      	ldr	r1, [sp, #0]
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	9207      	str	r2, [sp, #28]
 8009c2e:	2230      	movs	r2, #48	; 0x30
 8009c30:	700a      	strb	r2, [r1, #0]
 8009c32:	781a      	ldrb	r2, [r3, #0]
 8009c34:	3201      	adds	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	e78c      	b.n	8009b54 <_dtoa_r+0x63c>
 8009c3a:	4b7f      	ldr	r3, [pc, #508]	; (8009e38 <_dtoa_r+0x920>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f7f6 fce3 	bl	8000608 <__aeabi_dmul>
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	f7f6 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d09b      	beq.n	8009b8a <_dtoa_r+0x672>
 8009c52:	e7cd      	b.n	8009bf0 <_dtoa_r+0x6d8>
 8009c54:	9a08      	ldr	r2, [sp, #32]
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	f000 80c4 	beq.w	8009de4 <_dtoa_r+0x8cc>
 8009c5c:	9a05      	ldr	r2, [sp, #20]
 8009c5e:	2a01      	cmp	r2, #1
 8009c60:	f300 80a8 	bgt.w	8009db4 <_dtoa_r+0x89c>
 8009c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	f000 80a0 	beq.w	8009dac <_dtoa_r+0x894>
 8009c6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c70:	9e06      	ldr	r6, [sp, #24]
 8009c72:	4645      	mov	r5, r8
 8009c74:	9a04      	ldr	r2, [sp, #16]
 8009c76:	2101      	movs	r1, #1
 8009c78:	441a      	add	r2, r3
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	4498      	add	r8, r3
 8009c7e:	9204      	str	r2, [sp, #16]
 8009c80:	f000 fb4c 	bl	800a31c <__i2b>
 8009c84:	4607      	mov	r7, r0
 8009c86:	2d00      	cmp	r5, #0
 8009c88:	dd0b      	ble.n	8009ca2 <_dtoa_r+0x78a>
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dd08      	ble.n	8009ca2 <_dtoa_r+0x78a>
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	9a04      	ldr	r2, [sp, #16]
 8009c94:	bfa8      	it	ge
 8009c96:	462b      	movge	r3, r5
 8009c98:	eba8 0803 	sub.w	r8, r8, r3
 8009c9c:	1aed      	subs	r5, r5, r3
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	9b06      	ldr	r3, [sp, #24]
 8009ca4:	b1fb      	cbz	r3, 8009ce6 <_dtoa_r+0x7ce>
 8009ca6:	9b08      	ldr	r3, [sp, #32]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 809f 	beq.w	8009dec <_dtoa_r+0x8d4>
 8009cae:	2e00      	cmp	r6, #0
 8009cb0:	dd11      	ble.n	8009cd6 <_dtoa_r+0x7be>
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 fbec 	bl	800a494 <__pow5mult>
 8009cbc:	465a      	mov	r2, fp
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	4607      	mov	r7, r0
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fb40 	bl	800a348 <__multiply>
 8009cc8:	4659      	mov	r1, fp
 8009cca:	9007      	str	r0, [sp, #28]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 fa69 	bl	800a1a4 <_Bfree>
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	469b      	mov	fp, r3
 8009cd6:	9b06      	ldr	r3, [sp, #24]
 8009cd8:	1b9a      	subs	r2, r3, r6
 8009cda:	d004      	beq.n	8009ce6 <_dtoa_r+0x7ce>
 8009cdc:	4659      	mov	r1, fp
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f000 fbd8 	bl	800a494 <__pow5mult>
 8009ce4:	4683      	mov	fp, r0
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fb17 	bl	800a31c <__i2b>
 8009cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	dd7c      	ble.n	8009df0 <_dtoa_r+0x8d8>
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 fbca 	bl	800a494 <__pow5mult>
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	4606      	mov	r6, r0
 8009d06:	dd76      	ble.n	8009df6 <_dtoa_r+0x8de>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9306      	str	r3, [sp, #24]
 8009d0c:	6933      	ldr	r3, [r6, #16]
 8009d0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d12:	6918      	ldr	r0, [r3, #16]
 8009d14:	f000 fab2 	bl	800a27c <__hi0bits>
 8009d18:	f1c0 0020 	rsb	r0, r0, #32
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	4418      	add	r0, r3
 8009d20:	f010 001f 	ands.w	r0, r0, #31
 8009d24:	f000 8086 	beq.w	8009e34 <_dtoa_r+0x91c>
 8009d28:	f1c0 0320 	rsb	r3, r0, #32
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	dd7f      	ble.n	8009e30 <_dtoa_r+0x918>
 8009d30:	f1c0 001c 	rsb	r0, r0, #28
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	4403      	add	r3, r0
 8009d38:	4480      	add	r8, r0
 8009d3a:	4405      	add	r5, r0
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	f1b8 0f00 	cmp.w	r8, #0
 8009d42:	dd05      	ble.n	8009d50 <_dtoa_r+0x838>
 8009d44:	4659      	mov	r1, fp
 8009d46:	4642      	mov	r2, r8
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 fbfd 	bl	800a548 <__lshift>
 8009d4e:	4683      	mov	fp, r0
 8009d50:	9b04      	ldr	r3, [sp, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd05      	ble.n	8009d62 <_dtoa_r+0x84a>
 8009d56:	4631      	mov	r1, r6
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fbf4 	bl	800a548 <__lshift>
 8009d60:	4606      	mov	r6, r0
 8009d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d069      	beq.n	8009e3c <_dtoa_r+0x924>
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4658      	mov	r0, fp
 8009d6c:	f000 fc58 	bl	800a620 <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	da63      	bge.n	8009e3c <_dtoa_r+0x924>
 8009d74:	2300      	movs	r3, #0
 8009d76:	4659      	mov	r1, fp
 8009d78:	220a      	movs	r2, #10
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fa34 	bl	800a1e8 <__multadd>
 8009d80:	9b08      	ldr	r3, [sp, #32]
 8009d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d86:	4683      	mov	fp, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 818f 	beq.w	800a0ac <_dtoa_r+0xb94>
 8009d8e:	4639      	mov	r1, r7
 8009d90:	2300      	movs	r3, #0
 8009d92:	220a      	movs	r2, #10
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fa27 	bl	800a1e8 <__multadd>
 8009d9a:	f1b9 0f00 	cmp.w	r9, #0
 8009d9e:	4607      	mov	r7, r0
 8009da0:	f300 808e 	bgt.w	8009ec0 <_dtoa_r+0x9a8>
 8009da4:	9b05      	ldr	r3, [sp, #20]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dc50      	bgt.n	8009e4c <_dtoa_r+0x934>
 8009daa:	e089      	b.n	8009ec0 <_dtoa_r+0x9a8>
 8009dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009db2:	e75d      	b.n	8009c70 <_dtoa_r+0x758>
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	1e5e      	subs	r6, r3, #1
 8009db8:	9b06      	ldr	r3, [sp, #24]
 8009dba:	42b3      	cmp	r3, r6
 8009dbc:	bfbf      	itttt	lt
 8009dbe:	9b06      	ldrlt	r3, [sp, #24]
 8009dc0:	9606      	strlt	r6, [sp, #24]
 8009dc2:	1af2      	sublt	r2, r6, r3
 8009dc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009dc6:	bfb6      	itet	lt
 8009dc8:	189b      	addlt	r3, r3, r2
 8009dca:	1b9e      	subge	r6, r3, r6
 8009dcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	bfb8      	it	lt
 8009dd2:	2600      	movlt	r6, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bfb5      	itete	lt
 8009dd8:	eba8 0503 	sublt.w	r5, r8, r3
 8009ddc:	9b01      	ldrge	r3, [sp, #4]
 8009dde:	2300      	movlt	r3, #0
 8009de0:	4645      	movge	r5, r8
 8009de2:	e747      	b.n	8009c74 <_dtoa_r+0x75c>
 8009de4:	9e06      	ldr	r6, [sp, #24]
 8009de6:	9f08      	ldr	r7, [sp, #32]
 8009de8:	4645      	mov	r5, r8
 8009dea:	e74c      	b.n	8009c86 <_dtoa_r+0x76e>
 8009dec:	9a06      	ldr	r2, [sp, #24]
 8009dee:	e775      	b.n	8009cdc <_dtoa_r+0x7c4>
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	dc18      	bgt.n	8009e28 <_dtoa_r+0x910>
 8009df6:	9b02      	ldr	r3, [sp, #8]
 8009df8:	b9b3      	cbnz	r3, 8009e28 <_dtoa_r+0x910>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e00:	b9a3      	cbnz	r3, 8009e2c <_dtoa_r+0x914>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e08:	0d1b      	lsrs	r3, r3, #20
 8009e0a:	051b      	lsls	r3, r3, #20
 8009e0c:	b12b      	cbz	r3, 8009e1a <_dtoa_r+0x902>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	f108 0801 	add.w	r8, r8, #1
 8009e18:	2301      	movs	r3, #1
 8009e1a:	9306      	str	r3, [sp, #24]
 8009e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f47f af74 	bne.w	8009d0c <_dtoa_r+0x7f4>
 8009e24:	2001      	movs	r0, #1
 8009e26:	e779      	b.n	8009d1c <_dtoa_r+0x804>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e7f6      	b.n	8009e1a <_dtoa_r+0x902>
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	e7f4      	b.n	8009e1a <_dtoa_r+0x902>
 8009e30:	d085      	beq.n	8009d3e <_dtoa_r+0x826>
 8009e32:	4618      	mov	r0, r3
 8009e34:	301c      	adds	r0, #28
 8009e36:	e77d      	b.n	8009d34 <_dtoa_r+0x81c>
 8009e38:	40240000 	.word	0x40240000
 8009e3c:	9b01      	ldr	r3, [sp, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dc38      	bgt.n	8009eb4 <_dtoa_r+0x99c>
 8009e42:	9b05      	ldr	r3, [sp, #20]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	dd35      	ble.n	8009eb4 <_dtoa_r+0x99c>
 8009e48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	d10d      	bne.n	8009e6e <_dtoa_r+0x956>
 8009e52:	4631      	mov	r1, r6
 8009e54:	464b      	mov	r3, r9
 8009e56:	2205      	movs	r2, #5
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f000 f9c5 	bl	800a1e8 <__multadd>
 8009e5e:	4601      	mov	r1, r0
 8009e60:	4606      	mov	r6, r0
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 fbdc 	bl	800a620 <__mcmp>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f73f adbd 	bgt.w	80099e8 <_dtoa_r+0x4d0>
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	9d00      	ldr	r5, [sp, #0]
 8009e72:	ea6f 0a03 	mvn.w	sl, r3
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 f991 	bl	800a1a4 <_Bfree>
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	f43f aeb4 	beq.w	8009bf0 <_dtoa_r+0x6d8>
 8009e88:	f1b8 0f00 	cmp.w	r8, #0
 8009e8c:	d005      	beq.n	8009e9a <_dtoa_r+0x982>
 8009e8e:	45b8      	cmp	r8, r7
 8009e90:	d003      	beq.n	8009e9a <_dtoa_r+0x982>
 8009e92:	4641      	mov	r1, r8
 8009e94:	4620      	mov	r0, r4
 8009e96:	f000 f985 	bl	800a1a4 <_Bfree>
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 f981 	bl	800a1a4 <_Bfree>
 8009ea2:	e6a5      	b.n	8009bf0 <_dtoa_r+0x6d8>
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	4637      	mov	r7, r6
 8009ea8:	e7e1      	b.n	8009e6e <_dtoa_r+0x956>
 8009eaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009eac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009eb0:	4637      	mov	r7, r6
 8009eb2:	e599      	b.n	80099e8 <_dtoa_r+0x4d0>
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 80fd 	beq.w	800a0ba <_dtoa_r+0xba2>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	dd05      	ble.n	8009ed0 <_dtoa_r+0x9b8>
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 fb3d 	bl	800a548 <__lshift>
 8009ece:	4607      	mov	r7, r0
 8009ed0:	9b06      	ldr	r3, [sp, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d05c      	beq.n	8009f90 <_dtoa_r+0xa78>
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 f923 	bl	800a124 <_Balloc>
 8009ede:	4605      	mov	r5, r0
 8009ee0:	b928      	cbnz	r0, 8009eee <_dtoa_r+0x9d6>
 8009ee2:	4b80      	ldr	r3, [pc, #512]	; (800a0e4 <_dtoa_r+0xbcc>)
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009eea:	f7ff bb2e 	b.w	800954a <_dtoa_r+0x32>
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	3202      	adds	r2, #2
 8009ef2:	0092      	lsls	r2, r2, #2
 8009ef4:	f107 010c 	add.w	r1, r7, #12
 8009ef8:	300c      	adds	r0, #12
 8009efa:	f000 f905 	bl	800a108 <memcpy>
 8009efe:	2201      	movs	r2, #1
 8009f00:	4629      	mov	r1, r5
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 fb20 	bl	800a548 <__lshift>
 8009f08:	9b00      	ldr	r3, [sp, #0]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	444b      	add	r3, r9
 8009f12:	9307      	str	r3, [sp, #28]
 8009f14:	9b02      	ldr	r3, [sp, #8]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	46b8      	mov	r8, r7
 8009f1c:	9306      	str	r3, [sp, #24]
 8009f1e:	4607      	mov	r7, r0
 8009f20:	9b01      	ldr	r3, [sp, #4]
 8009f22:	4631      	mov	r1, r6
 8009f24:	3b01      	subs	r3, #1
 8009f26:	4658      	mov	r0, fp
 8009f28:	9302      	str	r3, [sp, #8]
 8009f2a:	f7ff fa67 	bl	80093fc <quorem>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	3330      	adds	r3, #48	; 0x30
 8009f32:	9004      	str	r0, [sp, #16]
 8009f34:	4641      	mov	r1, r8
 8009f36:	4658      	mov	r0, fp
 8009f38:	9308      	str	r3, [sp, #32]
 8009f3a:	f000 fb71 	bl	800a620 <__mcmp>
 8009f3e:	463a      	mov	r2, r7
 8009f40:	4681      	mov	r9, r0
 8009f42:	4631      	mov	r1, r6
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fb87 	bl	800a658 <__mdiff>
 8009f4a:	68c2      	ldr	r2, [r0, #12]
 8009f4c:	9b08      	ldr	r3, [sp, #32]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	bb02      	cbnz	r2, 8009f94 <_dtoa_r+0xa7c>
 8009f52:	4601      	mov	r1, r0
 8009f54:	4658      	mov	r0, fp
 8009f56:	f000 fb63 	bl	800a620 <__mcmp>
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4620      	mov	r0, r4
 8009f62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009f66:	f000 f91d 	bl	800a1a4 <_Bfree>
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6e:	9d01      	ldr	r5, [sp, #4]
 8009f70:	ea43 0102 	orr.w	r1, r3, r2
 8009f74:	9b06      	ldr	r3, [sp, #24]
 8009f76:	430b      	orrs	r3, r1
 8009f78:	9b08      	ldr	r3, [sp, #32]
 8009f7a:	d10d      	bne.n	8009f98 <_dtoa_r+0xa80>
 8009f7c:	2b39      	cmp	r3, #57	; 0x39
 8009f7e:	d029      	beq.n	8009fd4 <_dtoa_r+0xabc>
 8009f80:	f1b9 0f00 	cmp.w	r9, #0
 8009f84:	dd01      	ble.n	8009f8a <_dtoa_r+0xa72>
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	3331      	adds	r3, #49	; 0x31
 8009f8a:	9a02      	ldr	r2, [sp, #8]
 8009f8c:	7013      	strb	r3, [r2, #0]
 8009f8e:	e774      	b.n	8009e7a <_dtoa_r+0x962>
 8009f90:	4638      	mov	r0, r7
 8009f92:	e7b9      	b.n	8009f08 <_dtoa_r+0x9f0>
 8009f94:	2201      	movs	r2, #1
 8009f96:	e7e2      	b.n	8009f5e <_dtoa_r+0xa46>
 8009f98:	f1b9 0f00 	cmp.w	r9, #0
 8009f9c:	db06      	blt.n	8009fac <_dtoa_r+0xa94>
 8009f9e:	9905      	ldr	r1, [sp, #20]
 8009fa0:	ea41 0909 	orr.w	r9, r1, r9
 8009fa4:	9906      	ldr	r1, [sp, #24]
 8009fa6:	ea59 0101 	orrs.w	r1, r9, r1
 8009faa:	d120      	bne.n	8009fee <_dtoa_r+0xad6>
 8009fac:	2a00      	cmp	r2, #0
 8009fae:	ddec      	ble.n	8009f8a <_dtoa_r+0xa72>
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	f000 fac6 	bl	800a548 <__lshift>
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4683      	mov	fp, r0
 8009fc0:	f000 fb2e 	bl	800a620 <__mcmp>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	dc02      	bgt.n	8009fd0 <_dtoa_r+0xab8>
 8009fca:	d1de      	bne.n	8009f8a <_dtoa_r+0xa72>
 8009fcc:	07da      	lsls	r2, r3, #31
 8009fce:	d5dc      	bpl.n	8009f8a <_dtoa_r+0xa72>
 8009fd0:	2b39      	cmp	r3, #57	; 0x39
 8009fd2:	d1d8      	bne.n	8009f86 <_dtoa_r+0xa6e>
 8009fd4:	9a02      	ldr	r2, [sp, #8]
 8009fd6:	2339      	movs	r3, #57	; 0x39
 8009fd8:	7013      	strb	r3, [r2, #0]
 8009fda:	462b      	mov	r3, r5
 8009fdc:	461d      	mov	r5, r3
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fe4:	2a39      	cmp	r2, #57	; 0x39
 8009fe6:	d050      	beq.n	800a08a <_dtoa_r+0xb72>
 8009fe8:	3201      	adds	r2, #1
 8009fea:	701a      	strb	r2, [r3, #0]
 8009fec:	e745      	b.n	8009e7a <_dtoa_r+0x962>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	dd03      	ble.n	8009ffa <_dtoa_r+0xae2>
 8009ff2:	2b39      	cmp	r3, #57	; 0x39
 8009ff4:	d0ee      	beq.n	8009fd4 <_dtoa_r+0xabc>
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	e7c7      	b.n	8009f8a <_dtoa_r+0xa72>
 8009ffa:	9a01      	ldr	r2, [sp, #4]
 8009ffc:	9907      	ldr	r1, [sp, #28]
 8009ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a002:	428a      	cmp	r2, r1
 800a004:	d02a      	beq.n	800a05c <_dtoa_r+0xb44>
 800a006:	4659      	mov	r1, fp
 800a008:	2300      	movs	r3, #0
 800a00a:	220a      	movs	r2, #10
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 f8eb 	bl	800a1e8 <__multadd>
 800a012:	45b8      	cmp	r8, r7
 800a014:	4683      	mov	fp, r0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	f04f 020a 	mov.w	r2, #10
 800a01e:	4641      	mov	r1, r8
 800a020:	4620      	mov	r0, r4
 800a022:	d107      	bne.n	800a034 <_dtoa_r+0xb1c>
 800a024:	f000 f8e0 	bl	800a1e8 <__multadd>
 800a028:	4680      	mov	r8, r0
 800a02a:	4607      	mov	r7, r0
 800a02c:	9b01      	ldr	r3, [sp, #4]
 800a02e:	3301      	adds	r3, #1
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	e775      	b.n	8009f20 <_dtoa_r+0xa08>
 800a034:	f000 f8d8 	bl	800a1e8 <__multadd>
 800a038:	4639      	mov	r1, r7
 800a03a:	4680      	mov	r8, r0
 800a03c:	2300      	movs	r3, #0
 800a03e:	220a      	movs	r2, #10
 800a040:	4620      	mov	r0, r4
 800a042:	f000 f8d1 	bl	800a1e8 <__multadd>
 800a046:	4607      	mov	r7, r0
 800a048:	e7f0      	b.n	800a02c <_dtoa_r+0xb14>
 800a04a:	f1b9 0f00 	cmp.w	r9, #0
 800a04e:	9a00      	ldr	r2, [sp, #0]
 800a050:	bfcc      	ite	gt
 800a052:	464d      	movgt	r5, r9
 800a054:	2501      	movle	r5, #1
 800a056:	4415      	add	r5, r2
 800a058:	f04f 0800 	mov.w	r8, #0
 800a05c:	4659      	mov	r1, fp
 800a05e:	2201      	movs	r2, #1
 800a060:	4620      	mov	r0, r4
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	f000 fa70 	bl	800a548 <__lshift>
 800a068:	4631      	mov	r1, r6
 800a06a:	4683      	mov	fp, r0
 800a06c:	f000 fad8 	bl	800a620 <__mcmp>
 800a070:	2800      	cmp	r0, #0
 800a072:	dcb2      	bgt.n	8009fda <_dtoa_r+0xac2>
 800a074:	d102      	bne.n	800a07c <_dtoa_r+0xb64>
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	07db      	lsls	r3, r3, #31
 800a07a:	d4ae      	bmi.n	8009fda <_dtoa_r+0xac2>
 800a07c:	462b      	mov	r3, r5
 800a07e:	461d      	mov	r5, r3
 800a080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a084:	2a30      	cmp	r2, #48	; 0x30
 800a086:	d0fa      	beq.n	800a07e <_dtoa_r+0xb66>
 800a088:	e6f7      	b.n	8009e7a <_dtoa_r+0x962>
 800a08a:	9a00      	ldr	r2, [sp, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d1a5      	bne.n	8009fdc <_dtoa_r+0xac4>
 800a090:	f10a 0a01 	add.w	sl, sl, #1
 800a094:	2331      	movs	r3, #49	; 0x31
 800a096:	e779      	b.n	8009f8c <_dtoa_r+0xa74>
 800a098:	4b13      	ldr	r3, [pc, #76]	; (800a0e8 <_dtoa_r+0xbd0>)
 800a09a:	f7ff baaf 	b.w	80095fc <_dtoa_r+0xe4>
 800a09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f47f aa86 	bne.w	80095b2 <_dtoa_r+0x9a>
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <_dtoa_r+0xbd4>)
 800a0a8:	f7ff baa8 	b.w	80095fc <_dtoa_r+0xe4>
 800a0ac:	f1b9 0f00 	cmp.w	r9, #0
 800a0b0:	dc03      	bgt.n	800a0ba <_dtoa_r+0xba2>
 800a0b2:	9b05      	ldr	r3, [sp, #20]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	f73f aec9 	bgt.w	8009e4c <_dtoa_r+0x934>
 800a0ba:	9d00      	ldr	r5, [sp, #0]
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4658      	mov	r0, fp
 800a0c0:	f7ff f99c 	bl	80093fc <quorem>
 800a0c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a0cc:	9a00      	ldr	r2, [sp, #0]
 800a0ce:	1aaa      	subs	r2, r5, r2
 800a0d0:	4591      	cmp	r9, r2
 800a0d2:	ddba      	ble.n	800a04a <_dtoa_r+0xb32>
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f000 f884 	bl	800a1e8 <__multadd>
 800a0e0:	4683      	mov	fp, r0
 800a0e2:	e7eb      	b.n	800a0bc <_dtoa_r+0xba4>
 800a0e4:	0800b95f 	.word	0x0800b95f
 800a0e8:	0800b8b8 	.word	0x0800b8b8
 800a0ec:	0800b8dc 	.word	0x0800b8dc

0800a0f0 <_localeconv_r>:
 800a0f0:	4800      	ldr	r0, [pc, #0]	; (800a0f4 <_localeconv_r+0x4>)
 800a0f2:	4770      	bx	lr
 800a0f4:	200002d4 	.word	0x200002d4

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 bbef 	b.w	800a8e0 <_malloc_r>
 800a102:	bf00      	nop
 800a104:	20000180 	.word	0x20000180

0800a108 <memcpy>:
 800a108:	440a      	add	r2, r1
 800a10a:	4291      	cmp	r1, r2
 800a10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a110:	d100      	bne.n	800a114 <memcpy+0xc>
 800a112:	4770      	bx	lr
 800a114:	b510      	push	{r4, lr}
 800a116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a11e:	4291      	cmp	r1, r2
 800a120:	d1f9      	bne.n	800a116 <memcpy+0xe>
 800a122:	bd10      	pop	{r4, pc}

0800a124 <_Balloc>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	b976      	cbnz	r6, 800a14c <_Balloc+0x28>
 800a12e:	2010      	movs	r0, #16
 800a130:	f7ff ffe2 	bl	800a0f8 <malloc>
 800a134:	4602      	mov	r2, r0
 800a136:	6260      	str	r0, [r4, #36]	; 0x24
 800a138:	b920      	cbnz	r0, 800a144 <_Balloc+0x20>
 800a13a:	4b18      	ldr	r3, [pc, #96]	; (800a19c <_Balloc+0x78>)
 800a13c:	4818      	ldr	r0, [pc, #96]	; (800a1a0 <_Balloc+0x7c>)
 800a13e:	2166      	movs	r1, #102	; 0x66
 800a140:	f000 fd94 	bl	800ac6c <__assert_func>
 800a144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a148:	6006      	str	r6, [r0, #0]
 800a14a:	60c6      	str	r6, [r0, #12]
 800a14c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a14e:	68f3      	ldr	r3, [r6, #12]
 800a150:	b183      	cbz	r3, 800a174 <_Balloc+0x50>
 800a152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a15a:	b9b8      	cbnz	r0, 800a18c <_Balloc+0x68>
 800a15c:	2101      	movs	r1, #1
 800a15e:	fa01 f605 	lsl.w	r6, r1, r5
 800a162:	1d72      	adds	r2, r6, #5
 800a164:	0092      	lsls	r2, r2, #2
 800a166:	4620      	mov	r0, r4
 800a168:	f000 fb5a 	bl	800a820 <_calloc_r>
 800a16c:	b160      	cbz	r0, 800a188 <_Balloc+0x64>
 800a16e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a172:	e00e      	b.n	800a192 <_Balloc+0x6e>
 800a174:	2221      	movs	r2, #33	; 0x21
 800a176:	2104      	movs	r1, #4
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fb51 	bl	800a820 <_calloc_r>
 800a17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a180:	60f0      	str	r0, [r6, #12]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e4      	bne.n	800a152 <_Balloc+0x2e>
 800a188:	2000      	movs	r0, #0
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	6802      	ldr	r2, [r0, #0]
 800a18e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a192:	2300      	movs	r3, #0
 800a194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a198:	e7f7      	b.n	800a18a <_Balloc+0x66>
 800a19a:	bf00      	nop
 800a19c:	0800b8e9 	.word	0x0800b8e9
 800a1a0:	0800b970 	.word	0x0800b970

0800a1a4 <_Bfree>:
 800a1a4:	b570      	push	{r4, r5, r6, lr}
 800a1a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	b976      	cbnz	r6, 800a1cc <_Bfree+0x28>
 800a1ae:	2010      	movs	r0, #16
 800a1b0:	f7ff ffa2 	bl	800a0f8 <malloc>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6268      	str	r0, [r5, #36]	; 0x24
 800a1b8:	b920      	cbnz	r0, 800a1c4 <_Bfree+0x20>
 800a1ba:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <_Bfree+0x3c>)
 800a1bc:	4809      	ldr	r0, [pc, #36]	; (800a1e4 <_Bfree+0x40>)
 800a1be:	218a      	movs	r1, #138	; 0x8a
 800a1c0:	f000 fd54 	bl	800ac6c <__assert_func>
 800a1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1c8:	6006      	str	r6, [r0, #0]
 800a1ca:	60c6      	str	r6, [r0, #12]
 800a1cc:	b13c      	cbz	r4, 800a1de <_Bfree+0x3a>
 800a1ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1d0:	6862      	ldr	r2, [r4, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1d8:	6021      	str	r1, [r4, #0]
 800a1da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
 800a1e0:	0800b8e9 	.word	0x0800b8e9
 800a1e4:	0800b970 	.word	0x0800b970

0800a1e8 <__multadd>:
 800a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ec:	690e      	ldr	r6, [r1, #16]
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	4698      	mov	r8, r3
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f101 0014 	add.w	r0, r1, #20
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	6805      	ldr	r5, [r0, #0]
 800a1fc:	b2a9      	uxth	r1, r5
 800a1fe:	fb02 8101 	mla	r1, r2, r1, r8
 800a202:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a206:	0c2d      	lsrs	r5, r5, #16
 800a208:	fb02 c505 	mla	r5, r2, r5, ip
 800a20c:	b289      	uxth	r1, r1
 800a20e:	3301      	adds	r3, #1
 800a210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a214:	429e      	cmp	r6, r3
 800a216:	f840 1b04 	str.w	r1, [r0], #4
 800a21a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a21e:	dcec      	bgt.n	800a1fa <__multadd+0x12>
 800a220:	f1b8 0f00 	cmp.w	r8, #0
 800a224:	d022      	beq.n	800a26c <__multadd+0x84>
 800a226:	68a3      	ldr	r3, [r4, #8]
 800a228:	42b3      	cmp	r3, r6
 800a22a:	dc19      	bgt.n	800a260 <__multadd+0x78>
 800a22c:	6861      	ldr	r1, [r4, #4]
 800a22e:	4638      	mov	r0, r7
 800a230:	3101      	adds	r1, #1
 800a232:	f7ff ff77 	bl	800a124 <_Balloc>
 800a236:	4605      	mov	r5, r0
 800a238:	b928      	cbnz	r0, 800a246 <__multadd+0x5e>
 800a23a:	4602      	mov	r2, r0
 800a23c:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <__multadd+0x8c>)
 800a23e:	480e      	ldr	r0, [pc, #56]	; (800a278 <__multadd+0x90>)
 800a240:	21b5      	movs	r1, #181	; 0xb5
 800a242:	f000 fd13 	bl	800ac6c <__assert_func>
 800a246:	6922      	ldr	r2, [r4, #16]
 800a248:	3202      	adds	r2, #2
 800a24a:	f104 010c 	add.w	r1, r4, #12
 800a24e:	0092      	lsls	r2, r2, #2
 800a250:	300c      	adds	r0, #12
 800a252:	f7ff ff59 	bl	800a108 <memcpy>
 800a256:	4621      	mov	r1, r4
 800a258:	4638      	mov	r0, r7
 800a25a:	f7ff ffa3 	bl	800a1a4 <_Bfree>
 800a25e:	462c      	mov	r4, r5
 800a260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a264:	3601      	adds	r6, #1
 800a266:	f8c3 8014 	str.w	r8, [r3, #20]
 800a26a:	6126      	str	r6, [r4, #16]
 800a26c:	4620      	mov	r0, r4
 800a26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a272:	bf00      	nop
 800a274:	0800b95f 	.word	0x0800b95f
 800a278:	0800b970 	.word	0x0800b970

0800a27c <__hi0bits>:
 800a27c:	0c03      	lsrs	r3, r0, #16
 800a27e:	041b      	lsls	r3, r3, #16
 800a280:	b9d3      	cbnz	r3, 800a2b8 <__hi0bits+0x3c>
 800a282:	0400      	lsls	r0, r0, #16
 800a284:	2310      	movs	r3, #16
 800a286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a28a:	bf04      	itt	eq
 800a28c:	0200      	lsleq	r0, r0, #8
 800a28e:	3308      	addeq	r3, #8
 800a290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a294:	bf04      	itt	eq
 800a296:	0100      	lsleq	r0, r0, #4
 800a298:	3304      	addeq	r3, #4
 800a29a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a29e:	bf04      	itt	eq
 800a2a0:	0080      	lsleq	r0, r0, #2
 800a2a2:	3302      	addeq	r3, #2
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	db05      	blt.n	800a2b4 <__hi0bits+0x38>
 800a2a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2ac:	f103 0301 	add.w	r3, r3, #1
 800a2b0:	bf08      	it	eq
 800a2b2:	2320      	moveq	r3, #32
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	4770      	bx	lr
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e7e4      	b.n	800a286 <__hi0bits+0xa>

0800a2bc <__lo0bits>:
 800a2bc:	6803      	ldr	r3, [r0, #0]
 800a2be:	f013 0207 	ands.w	r2, r3, #7
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	d00b      	beq.n	800a2de <__lo0bits+0x22>
 800a2c6:	07da      	lsls	r2, r3, #31
 800a2c8:	d424      	bmi.n	800a314 <__lo0bits+0x58>
 800a2ca:	0798      	lsls	r0, r3, #30
 800a2cc:	bf49      	itett	mi
 800a2ce:	085b      	lsrmi	r3, r3, #1
 800a2d0:	089b      	lsrpl	r3, r3, #2
 800a2d2:	2001      	movmi	r0, #1
 800a2d4:	600b      	strmi	r3, [r1, #0]
 800a2d6:	bf5c      	itt	pl
 800a2d8:	600b      	strpl	r3, [r1, #0]
 800a2da:	2002      	movpl	r0, #2
 800a2dc:	4770      	bx	lr
 800a2de:	b298      	uxth	r0, r3
 800a2e0:	b9b0      	cbnz	r0, 800a310 <__lo0bits+0x54>
 800a2e2:	0c1b      	lsrs	r3, r3, #16
 800a2e4:	2010      	movs	r0, #16
 800a2e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2ea:	bf04      	itt	eq
 800a2ec:	0a1b      	lsreq	r3, r3, #8
 800a2ee:	3008      	addeq	r0, #8
 800a2f0:	071a      	lsls	r2, r3, #28
 800a2f2:	bf04      	itt	eq
 800a2f4:	091b      	lsreq	r3, r3, #4
 800a2f6:	3004      	addeq	r0, #4
 800a2f8:	079a      	lsls	r2, r3, #30
 800a2fa:	bf04      	itt	eq
 800a2fc:	089b      	lsreq	r3, r3, #2
 800a2fe:	3002      	addeq	r0, #2
 800a300:	07da      	lsls	r2, r3, #31
 800a302:	d403      	bmi.n	800a30c <__lo0bits+0x50>
 800a304:	085b      	lsrs	r3, r3, #1
 800a306:	f100 0001 	add.w	r0, r0, #1
 800a30a:	d005      	beq.n	800a318 <__lo0bits+0x5c>
 800a30c:	600b      	str	r3, [r1, #0]
 800a30e:	4770      	bx	lr
 800a310:	4610      	mov	r0, r2
 800a312:	e7e8      	b.n	800a2e6 <__lo0bits+0x2a>
 800a314:	2000      	movs	r0, #0
 800a316:	4770      	bx	lr
 800a318:	2020      	movs	r0, #32
 800a31a:	4770      	bx	lr

0800a31c <__i2b>:
 800a31c:	b510      	push	{r4, lr}
 800a31e:	460c      	mov	r4, r1
 800a320:	2101      	movs	r1, #1
 800a322:	f7ff feff 	bl	800a124 <_Balloc>
 800a326:	4602      	mov	r2, r0
 800a328:	b928      	cbnz	r0, 800a336 <__i2b+0x1a>
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <__i2b+0x24>)
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <__i2b+0x28>)
 800a32e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a332:	f000 fc9b 	bl	800ac6c <__assert_func>
 800a336:	2301      	movs	r3, #1
 800a338:	6144      	str	r4, [r0, #20]
 800a33a:	6103      	str	r3, [r0, #16]
 800a33c:	bd10      	pop	{r4, pc}
 800a33e:	bf00      	nop
 800a340:	0800b95f 	.word	0x0800b95f
 800a344:	0800b970 	.word	0x0800b970

0800a348 <__multiply>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	4614      	mov	r4, r2
 800a34e:	690a      	ldr	r2, [r1, #16]
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	429a      	cmp	r2, r3
 800a354:	bfb8      	it	lt
 800a356:	460b      	movlt	r3, r1
 800a358:	460d      	mov	r5, r1
 800a35a:	bfbc      	itt	lt
 800a35c:	4625      	movlt	r5, r4
 800a35e:	461c      	movlt	r4, r3
 800a360:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a368:	68ab      	ldr	r3, [r5, #8]
 800a36a:	6869      	ldr	r1, [r5, #4]
 800a36c:	eb0a 0709 	add.w	r7, sl, r9
 800a370:	42bb      	cmp	r3, r7
 800a372:	b085      	sub	sp, #20
 800a374:	bfb8      	it	lt
 800a376:	3101      	addlt	r1, #1
 800a378:	f7ff fed4 	bl	800a124 <_Balloc>
 800a37c:	b930      	cbnz	r0, 800a38c <__multiply+0x44>
 800a37e:	4602      	mov	r2, r0
 800a380:	4b42      	ldr	r3, [pc, #264]	; (800a48c <__multiply+0x144>)
 800a382:	4843      	ldr	r0, [pc, #268]	; (800a490 <__multiply+0x148>)
 800a384:	f240 115d 	movw	r1, #349	; 0x15d
 800a388:	f000 fc70 	bl	800ac6c <__assert_func>
 800a38c:	f100 0614 	add.w	r6, r0, #20
 800a390:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a394:	4633      	mov	r3, r6
 800a396:	2200      	movs	r2, #0
 800a398:	4543      	cmp	r3, r8
 800a39a:	d31e      	bcc.n	800a3da <__multiply+0x92>
 800a39c:	f105 0c14 	add.w	ip, r5, #20
 800a3a0:	f104 0314 	add.w	r3, r4, #20
 800a3a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a3a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a3ac:	9202      	str	r2, [sp, #8]
 800a3ae:	ebac 0205 	sub.w	r2, ip, r5
 800a3b2:	3a15      	subs	r2, #21
 800a3b4:	f022 0203 	bic.w	r2, r2, #3
 800a3b8:	3204      	adds	r2, #4
 800a3ba:	f105 0115 	add.w	r1, r5, #21
 800a3be:	458c      	cmp	ip, r1
 800a3c0:	bf38      	it	cc
 800a3c2:	2204      	movcc	r2, #4
 800a3c4:	9201      	str	r2, [sp, #4]
 800a3c6:	9a02      	ldr	r2, [sp, #8]
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d808      	bhi.n	800a3e0 <__multiply+0x98>
 800a3ce:	2f00      	cmp	r7, #0
 800a3d0:	dc55      	bgt.n	800a47e <__multiply+0x136>
 800a3d2:	6107      	str	r7, [r0, #16]
 800a3d4:	b005      	add	sp, #20
 800a3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3da:	f843 2b04 	str.w	r2, [r3], #4
 800a3de:	e7db      	b.n	800a398 <__multiply+0x50>
 800a3e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3e4:	f1ba 0f00 	cmp.w	sl, #0
 800a3e8:	d020      	beq.n	800a42c <__multiply+0xe4>
 800a3ea:	f105 0e14 	add.w	lr, r5, #20
 800a3ee:	46b1      	mov	r9, r6
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a3f6:	f8d9 b000 	ldr.w	fp, [r9]
 800a3fa:	b2a1      	uxth	r1, r4
 800a3fc:	fa1f fb8b 	uxth.w	fp, fp
 800a400:	fb0a b101 	mla	r1, sl, r1, fp
 800a404:	4411      	add	r1, r2
 800a406:	f8d9 2000 	ldr.w	r2, [r9]
 800a40a:	0c24      	lsrs	r4, r4, #16
 800a40c:	0c12      	lsrs	r2, r2, #16
 800a40e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a412:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a416:	b289      	uxth	r1, r1
 800a418:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a41c:	45f4      	cmp	ip, lr
 800a41e:	f849 1b04 	str.w	r1, [r9], #4
 800a422:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a426:	d8e4      	bhi.n	800a3f2 <__multiply+0xaa>
 800a428:	9901      	ldr	r1, [sp, #4]
 800a42a:	5072      	str	r2, [r6, r1]
 800a42c:	9a03      	ldr	r2, [sp, #12]
 800a42e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a432:	3304      	adds	r3, #4
 800a434:	f1b9 0f00 	cmp.w	r9, #0
 800a438:	d01f      	beq.n	800a47a <__multiply+0x132>
 800a43a:	6834      	ldr	r4, [r6, #0]
 800a43c:	f105 0114 	add.w	r1, r5, #20
 800a440:	46b6      	mov	lr, r6
 800a442:	f04f 0a00 	mov.w	sl, #0
 800a446:	880a      	ldrh	r2, [r1, #0]
 800a448:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a44c:	fb09 b202 	mla	r2, r9, r2, fp
 800a450:	4492      	add	sl, r2
 800a452:	b2a4      	uxth	r4, r4
 800a454:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a458:	f84e 4b04 	str.w	r4, [lr], #4
 800a45c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a460:	f8be 2000 	ldrh.w	r2, [lr]
 800a464:	0c24      	lsrs	r4, r4, #16
 800a466:	fb09 2404 	mla	r4, r9, r4, r2
 800a46a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a46e:	458c      	cmp	ip, r1
 800a470:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a474:	d8e7      	bhi.n	800a446 <__multiply+0xfe>
 800a476:	9a01      	ldr	r2, [sp, #4]
 800a478:	50b4      	str	r4, [r6, r2]
 800a47a:	3604      	adds	r6, #4
 800a47c:	e7a3      	b.n	800a3c6 <__multiply+0x7e>
 800a47e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1a5      	bne.n	800a3d2 <__multiply+0x8a>
 800a486:	3f01      	subs	r7, #1
 800a488:	e7a1      	b.n	800a3ce <__multiply+0x86>
 800a48a:	bf00      	nop
 800a48c:	0800b95f 	.word	0x0800b95f
 800a490:	0800b970 	.word	0x0800b970

0800a494 <__pow5mult>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	4615      	mov	r5, r2
 800a49a:	f012 0203 	ands.w	r2, r2, #3
 800a49e:	4606      	mov	r6, r0
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	d007      	beq.n	800a4b4 <__pow5mult+0x20>
 800a4a4:	4c25      	ldr	r4, [pc, #148]	; (800a53c <__pow5mult+0xa8>)
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ae:	f7ff fe9b 	bl	800a1e8 <__multadd>
 800a4b2:	4607      	mov	r7, r0
 800a4b4:	10ad      	asrs	r5, r5, #2
 800a4b6:	d03d      	beq.n	800a534 <__pow5mult+0xa0>
 800a4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4ba:	b97c      	cbnz	r4, 800a4dc <__pow5mult+0x48>
 800a4bc:	2010      	movs	r0, #16
 800a4be:	f7ff fe1b 	bl	800a0f8 <malloc>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	6270      	str	r0, [r6, #36]	; 0x24
 800a4c6:	b928      	cbnz	r0, 800a4d4 <__pow5mult+0x40>
 800a4c8:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <__pow5mult+0xac>)
 800a4ca:	481e      	ldr	r0, [pc, #120]	; (800a544 <__pow5mult+0xb0>)
 800a4cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4d0:	f000 fbcc 	bl	800ac6c <__assert_func>
 800a4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4d8:	6004      	str	r4, [r0, #0]
 800a4da:	60c4      	str	r4, [r0, #12]
 800a4dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4e4:	b94c      	cbnz	r4, 800a4fa <__pow5mult+0x66>
 800a4e6:	f240 2171 	movw	r1, #625	; 0x271
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ff16 	bl	800a31c <__i2b>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	f04f 0900 	mov.w	r9, #0
 800a4fe:	07eb      	lsls	r3, r5, #31
 800a500:	d50a      	bpl.n	800a518 <__pow5mult+0x84>
 800a502:	4639      	mov	r1, r7
 800a504:	4622      	mov	r2, r4
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ff1e 	bl	800a348 <__multiply>
 800a50c:	4639      	mov	r1, r7
 800a50e:	4680      	mov	r8, r0
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff fe47 	bl	800a1a4 <_Bfree>
 800a516:	4647      	mov	r7, r8
 800a518:	106d      	asrs	r5, r5, #1
 800a51a:	d00b      	beq.n	800a534 <__pow5mult+0xa0>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	b938      	cbnz	r0, 800a530 <__pow5mult+0x9c>
 800a520:	4622      	mov	r2, r4
 800a522:	4621      	mov	r1, r4
 800a524:	4630      	mov	r0, r6
 800a526:	f7ff ff0f 	bl	800a348 <__multiply>
 800a52a:	6020      	str	r0, [r4, #0]
 800a52c:	f8c0 9000 	str.w	r9, [r0]
 800a530:	4604      	mov	r4, r0
 800a532:	e7e4      	b.n	800a4fe <__pow5mult+0x6a>
 800a534:	4638      	mov	r0, r7
 800a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53a:	bf00      	nop
 800a53c:	0800bac0 	.word	0x0800bac0
 800a540:	0800b8e9 	.word	0x0800b8e9
 800a544:	0800b970 	.word	0x0800b970

0800a548 <__lshift>:
 800a548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a54c:	460c      	mov	r4, r1
 800a54e:	6849      	ldr	r1, [r1, #4]
 800a550:	6923      	ldr	r3, [r4, #16]
 800a552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	4607      	mov	r7, r0
 800a55a:	4691      	mov	r9, r2
 800a55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a560:	f108 0601 	add.w	r6, r8, #1
 800a564:	42b3      	cmp	r3, r6
 800a566:	db0b      	blt.n	800a580 <__lshift+0x38>
 800a568:	4638      	mov	r0, r7
 800a56a:	f7ff fddb 	bl	800a124 <_Balloc>
 800a56e:	4605      	mov	r5, r0
 800a570:	b948      	cbnz	r0, 800a586 <__lshift+0x3e>
 800a572:	4602      	mov	r2, r0
 800a574:	4b28      	ldr	r3, [pc, #160]	; (800a618 <__lshift+0xd0>)
 800a576:	4829      	ldr	r0, [pc, #164]	; (800a61c <__lshift+0xd4>)
 800a578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a57c:	f000 fb76 	bl	800ac6c <__assert_func>
 800a580:	3101      	adds	r1, #1
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	e7ee      	b.n	800a564 <__lshift+0x1c>
 800a586:	2300      	movs	r3, #0
 800a588:	f100 0114 	add.w	r1, r0, #20
 800a58c:	f100 0210 	add.w	r2, r0, #16
 800a590:	4618      	mov	r0, r3
 800a592:	4553      	cmp	r3, sl
 800a594:	db33      	blt.n	800a5fe <__lshift+0xb6>
 800a596:	6920      	ldr	r0, [r4, #16]
 800a598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a59c:	f104 0314 	add.w	r3, r4, #20
 800a5a0:	f019 091f 	ands.w	r9, r9, #31
 800a5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ac:	d02b      	beq.n	800a606 <__lshift+0xbe>
 800a5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a5b2:	468a      	mov	sl, r1
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5bc:	4302      	orrs	r2, r0
 800a5be:	f84a 2b04 	str.w	r2, [sl], #4
 800a5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c6:	459c      	cmp	ip, r3
 800a5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5cc:	d8f3      	bhi.n	800a5b6 <__lshift+0x6e>
 800a5ce:	ebac 0304 	sub.w	r3, ip, r4
 800a5d2:	3b15      	subs	r3, #21
 800a5d4:	f023 0303 	bic.w	r3, r3, #3
 800a5d8:	3304      	adds	r3, #4
 800a5da:	f104 0015 	add.w	r0, r4, #21
 800a5de:	4584      	cmp	ip, r0
 800a5e0:	bf38      	it	cc
 800a5e2:	2304      	movcc	r3, #4
 800a5e4:	50ca      	str	r2, [r1, r3]
 800a5e6:	b10a      	cbz	r2, 800a5ec <__lshift+0xa4>
 800a5e8:	f108 0602 	add.w	r6, r8, #2
 800a5ec:	3e01      	subs	r6, #1
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	612e      	str	r6, [r5, #16]
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	f7ff fdd6 	bl	800a1a4 <_Bfree>
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800a602:	3301      	adds	r3, #1
 800a604:	e7c5      	b.n	800a592 <__lshift+0x4a>
 800a606:	3904      	subs	r1, #4
 800a608:	f853 2b04 	ldr.w	r2, [r3], #4
 800a60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a610:	459c      	cmp	ip, r3
 800a612:	d8f9      	bhi.n	800a608 <__lshift+0xc0>
 800a614:	e7ea      	b.n	800a5ec <__lshift+0xa4>
 800a616:	bf00      	nop
 800a618:	0800b95f 	.word	0x0800b95f
 800a61c:	0800b970 	.word	0x0800b970

0800a620 <__mcmp>:
 800a620:	b530      	push	{r4, r5, lr}
 800a622:	6902      	ldr	r2, [r0, #16]
 800a624:	690c      	ldr	r4, [r1, #16]
 800a626:	1b12      	subs	r2, r2, r4
 800a628:	d10e      	bne.n	800a648 <__mcmp+0x28>
 800a62a:	f100 0314 	add.w	r3, r0, #20
 800a62e:	3114      	adds	r1, #20
 800a630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a640:	42a5      	cmp	r5, r4
 800a642:	d003      	beq.n	800a64c <__mcmp+0x2c>
 800a644:	d305      	bcc.n	800a652 <__mcmp+0x32>
 800a646:	2201      	movs	r2, #1
 800a648:	4610      	mov	r0, r2
 800a64a:	bd30      	pop	{r4, r5, pc}
 800a64c:	4283      	cmp	r3, r0
 800a64e:	d3f3      	bcc.n	800a638 <__mcmp+0x18>
 800a650:	e7fa      	b.n	800a648 <__mcmp+0x28>
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	e7f7      	b.n	800a648 <__mcmp+0x28>

0800a658 <__mdiff>:
 800a658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	460c      	mov	r4, r1
 800a65e:	4606      	mov	r6, r0
 800a660:	4611      	mov	r1, r2
 800a662:	4620      	mov	r0, r4
 800a664:	4617      	mov	r7, r2
 800a666:	f7ff ffdb 	bl	800a620 <__mcmp>
 800a66a:	1e05      	subs	r5, r0, #0
 800a66c:	d110      	bne.n	800a690 <__mdiff+0x38>
 800a66e:	4629      	mov	r1, r5
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff fd57 	bl	800a124 <_Balloc>
 800a676:	b930      	cbnz	r0, 800a686 <__mdiff+0x2e>
 800a678:	4b39      	ldr	r3, [pc, #228]	; (800a760 <__mdiff+0x108>)
 800a67a:	4602      	mov	r2, r0
 800a67c:	f240 2132 	movw	r1, #562	; 0x232
 800a680:	4838      	ldr	r0, [pc, #224]	; (800a764 <__mdiff+0x10c>)
 800a682:	f000 faf3 	bl	800ac6c <__assert_func>
 800a686:	2301      	movs	r3, #1
 800a688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	bfa4      	itt	ge
 800a692:	463b      	movge	r3, r7
 800a694:	4627      	movge	r7, r4
 800a696:	4630      	mov	r0, r6
 800a698:	6879      	ldr	r1, [r7, #4]
 800a69a:	bfa6      	itte	ge
 800a69c:	461c      	movge	r4, r3
 800a69e:	2500      	movge	r5, #0
 800a6a0:	2501      	movlt	r5, #1
 800a6a2:	f7ff fd3f 	bl	800a124 <_Balloc>
 800a6a6:	b920      	cbnz	r0, 800a6b2 <__mdiff+0x5a>
 800a6a8:	4b2d      	ldr	r3, [pc, #180]	; (800a760 <__mdiff+0x108>)
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6b0:	e7e6      	b.n	800a680 <__mdiff+0x28>
 800a6b2:	693e      	ldr	r6, [r7, #16]
 800a6b4:	60c5      	str	r5, [r0, #12]
 800a6b6:	6925      	ldr	r5, [r4, #16]
 800a6b8:	f107 0114 	add.w	r1, r7, #20
 800a6bc:	f104 0914 	add.w	r9, r4, #20
 800a6c0:	f100 0e14 	add.w	lr, r0, #20
 800a6c4:	f107 0210 	add.w	r2, r7, #16
 800a6c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6d0:	46f2      	mov	sl, lr
 800a6d2:	2700      	movs	r7, #0
 800a6d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6dc:	fa1f f883 	uxth.w	r8, r3
 800a6e0:	fa17 f78b 	uxtah	r7, r7, fp
 800a6e4:	0c1b      	lsrs	r3, r3, #16
 800a6e6:	eba7 0808 	sub.w	r8, r7, r8
 800a6ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6f2:	fa1f f888 	uxth.w	r8, r8
 800a6f6:	141f      	asrs	r7, r3, #16
 800a6f8:	454d      	cmp	r5, r9
 800a6fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6fe:	f84a 3b04 	str.w	r3, [sl], #4
 800a702:	d8e7      	bhi.n	800a6d4 <__mdiff+0x7c>
 800a704:	1b2b      	subs	r3, r5, r4
 800a706:	3b15      	subs	r3, #21
 800a708:	f023 0303 	bic.w	r3, r3, #3
 800a70c:	3304      	adds	r3, #4
 800a70e:	3415      	adds	r4, #21
 800a710:	42a5      	cmp	r5, r4
 800a712:	bf38      	it	cc
 800a714:	2304      	movcc	r3, #4
 800a716:	4419      	add	r1, r3
 800a718:	4473      	add	r3, lr
 800a71a:	469e      	mov	lr, r3
 800a71c:	460d      	mov	r5, r1
 800a71e:	4565      	cmp	r5, ip
 800a720:	d30e      	bcc.n	800a740 <__mdiff+0xe8>
 800a722:	f10c 0203 	add.w	r2, ip, #3
 800a726:	1a52      	subs	r2, r2, r1
 800a728:	f022 0203 	bic.w	r2, r2, #3
 800a72c:	3903      	subs	r1, #3
 800a72e:	458c      	cmp	ip, r1
 800a730:	bf38      	it	cc
 800a732:	2200      	movcc	r2, #0
 800a734:	441a      	add	r2, r3
 800a736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a73a:	b17b      	cbz	r3, 800a75c <__mdiff+0x104>
 800a73c:	6106      	str	r6, [r0, #16]
 800a73e:	e7a5      	b.n	800a68c <__mdiff+0x34>
 800a740:	f855 8b04 	ldr.w	r8, [r5], #4
 800a744:	fa17 f488 	uxtah	r4, r7, r8
 800a748:	1422      	asrs	r2, r4, #16
 800a74a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a74e:	b2a4      	uxth	r4, r4
 800a750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a754:	f84e 4b04 	str.w	r4, [lr], #4
 800a758:	1417      	asrs	r7, r2, #16
 800a75a:	e7e0      	b.n	800a71e <__mdiff+0xc6>
 800a75c:	3e01      	subs	r6, #1
 800a75e:	e7ea      	b.n	800a736 <__mdiff+0xde>
 800a760:	0800b95f 	.word	0x0800b95f
 800a764:	0800b970 	.word	0x0800b970

0800a768 <__d2b>:
 800a768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a76c:	4689      	mov	r9, r1
 800a76e:	2101      	movs	r1, #1
 800a770:	ec57 6b10 	vmov	r6, r7, d0
 800a774:	4690      	mov	r8, r2
 800a776:	f7ff fcd5 	bl	800a124 <_Balloc>
 800a77a:	4604      	mov	r4, r0
 800a77c:	b930      	cbnz	r0, 800a78c <__d2b+0x24>
 800a77e:	4602      	mov	r2, r0
 800a780:	4b25      	ldr	r3, [pc, #148]	; (800a818 <__d2b+0xb0>)
 800a782:	4826      	ldr	r0, [pc, #152]	; (800a81c <__d2b+0xb4>)
 800a784:	f240 310a 	movw	r1, #778	; 0x30a
 800a788:	f000 fa70 	bl	800ac6c <__assert_func>
 800a78c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a794:	bb35      	cbnz	r5, 800a7e4 <__d2b+0x7c>
 800a796:	2e00      	cmp	r6, #0
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	d028      	beq.n	800a7ee <__d2b+0x86>
 800a79c:	4668      	mov	r0, sp
 800a79e:	9600      	str	r6, [sp, #0]
 800a7a0:	f7ff fd8c 	bl	800a2bc <__lo0bits>
 800a7a4:	9900      	ldr	r1, [sp, #0]
 800a7a6:	b300      	cbz	r0, 800a7ea <__d2b+0x82>
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	f1c0 0320 	rsb	r3, r0, #32
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	430b      	orrs	r3, r1
 800a7b4:	40c2      	lsrs	r2, r0
 800a7b6:	6163      	str	r3, [r4, #20]
 800a7b8:	9201      	str	r2, [sp, #4]
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	61a3      	str	r3, [r4, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	bf14      	ite	ne
 800a7c2:	2202      	movne	r2, #2
 800a7c4:	2201      	moveq	r2, #1
 800a7c6:	6122      	str	r2, [r4, #16]
 800a7c8:	b1d5      	cbz	r5, 800a800 <__d2b+0x98>
 800a7ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7ce:	4405      	add	r5, r0
 800a7d0:	f8c9 5000 	str.w	r5, [r9]
 800a7d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7d8:	f8c8 0000 	str.w	r0, [r8]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	b003      	add	sp, #12
 800a7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7e8:	e7d5      	b.n	800a796 <__d2b+0x2e>
 800a7ea:	6161      	str	r1, [r4, #20]
 800a7ec:	e7e5      	b.n	800a7ba <__d2b+0x52>
 800a7ee:	a801      	add	r0, sp, #4
 800a7f0:	f7ff fd64 	bl	800a2bc <__lo0bits>
 800a7f4:	9b01      	ldr	r3, [sp, #4]
 800a7f6:	6163      	str	r3, [r4, #20]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	6122      	str	r2, [r4, #16]
 800a7fc:	3020      	adds	r0, #32
 800a7fe:	e7e3      	b.n	800a7c8 <__d2b+0x60>
 800a800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a808:	f8c9 0000 	str.w	r0, [r9]
 800a80c:	6918      	ldr	r0, [r3, #16]
 800a80e:	f7ff fd35 	bl	800a27c <__hi0bits>
 800a812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a816:	e7df      	b.n	800a7d8 <__d2b+0x70>
 800a818:	0800b95f 	.word	0x0800b95f
 800a81c:	0800b970 	.word	0x0800b970

0800a820 <_calloc_r>:
 800a820:	b513      	push	{r0, r1, r4, lr}
 800a822:	434a      	muls	r2, r1
 800a824:	4611      	mov	r1, r2
 800a826:	9201      	str	r2, [sp, #4]
 800a828:	f000 f85a 	bl	800a8e0 <_malloc_r>
 800a82c:	4604      	mov	r4, r0
 800a82e:	b118      	cbz	r0, 800a838 <_calloc_r+0x18>
 800a830:	9a01      	ldr	r2, [sp, #4]
 800a832:	2100      	movs	r1, #0
 800a834:	f7fe f93c 	bl	8008ab0 <memset>
 800a838:	4620      	mov	r0, r4
 800a83a:	b002      	add	sp, #8
 800a83c:	bd10      	pop	{r4, pc}
	...

0800a840 <_free_r>:
 800a840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a842:	2900      	cmp	r1, #0
 800a844:	d048      	beq.n	800a8d8 <_free_r+0x98>
 800a846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a84a:	9001      	str	r0, [sp, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f1a1 0404 	sub.w	r4, r1, #4
 800a852:	bfb8      	it	lt
 800a854:	18e4      	addlt	r4, r4, r3
 800a856:	f000 fa65 	bl	800ad24 <__malloc_lock>
 800a85a:	4a20      	ldr	r2, [pc, #128]	; (800a8dc <_free_r+0x9c>)
 800a85c:	9801      	ldr	r0, [sp, #4]
 800a85e:	6813      	ldr	r3, [r2, #0]
 800a860:	4615      	mov	r5, r2
 800a862:	b933      	cbnz	r3, 800a872 <_free_r+0x32>
 800a864:	6063      	str	r3, [r4, #4]
 800a866:	6014      	str	r4, [r2, #0]
 800a868:	b003      	add	sp, #12
 800a86a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a86e:	f000 ba5f 	b.w	800ad30 <__malloc_unlock>
 800a872:	42a3      	cmp	r3, r4
 800a874:	d90b      	bls.n	800a88e <_free_r+0x4e>
 800a876:	6821      	ldr	r1, [r4, #0]
 800a878:	1862      	adds	r2, r4, r1
 800a87a:	4293      	cmp	r3, r2
 800a87c:	bf04      	itt	eq
 800a87e:	681a      	ldreq	r2, [r3, #0]
 800a880:	685b      	ldreq	r3, [r3, #4]
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	bf04      	itt	eq
 800a886:	1852      	addeq	r2, r2, r1
 800a888:	6022      	streq	r2, [r4, #0]
 800a88a:	602c      	str	r4, [r5, #0]
 800a88c:	e7ec      	b.n	800a868 <_free_r+0x28>
 800a88e:	461a      	mov	r2, r3
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	b10b      	cbz	r3, 800a898 <_free_r+0x58>
 800a894:	42a3      	cmp	r3, r4
 800a896:	d9fa      	bls.n	800a88e <_free_r+0x4e>
 800a898:	6811      	ldr	r1, [r2, #0]
 800a89a:	1855      	adds	r5, r2, r1
 800a89c:	42a5      	cmp	r5, r4
 800a89e:	d10b      	bne.n	800a8b8 <_free_r+0x78>
 800a8a0:	6824      	ldr	r4, [r4, #0]
 800a8a2:	4421      	add	r1, r4
 800a8a4:	1854      	adds	r4, r2, r1
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	6011      	str	r1, [r2, #0]
 800a8aa:	d1dd      	bne.n	800a868 <_free_r+0x28>
 800a8ac:	681c      	ldr	r4, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	6053      	str	r3, [r2, #4]
 800a8b2:	4421      	add	r1, r4
 800a8b4:	6011      	str	r1, [r2, #0]
 800a8b6:	e7d7      	b.n	800a868 <_free_r+0x28>
 800a8b8:	d902      	bls.n	800a8c0 <_free_r+0x80>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	e7d3      	b.n	800a868 <_free_r+0x28>
 800a8c0:	6825      	ldr	r5, [r4, #0]
 800a8c2:	1961      	adds	r1, r4, r5
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf04      	itt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	bf04      	itt	eq
 800a8d0:	1949      	addeq	r1, r1, r5
 800a8d2:	6021      	streq	r1, [r4, #0]
 800a8d4:	6054      	str	r4, [r2, #4]
 800a8d6:	e7c7      	b.n	800a868 <_free_r+0x28>
 800a8d8:	b003      	add	sp, #12
 800a8da:	bd30      	pop	{r4, r5, pc}
 800a8dc:	20000594 	.word	0x20000594

0800a8e0 <_malloc_r>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	1ccd      	adds	r5, r1, #3
 800a8e4:	f025 0503 	bic.w	r5, r5, #3
 800a8e8:	3508      	adds	r5, #8
 800a8ea:	2d0c      	cmp	r5, #12
 800a8ec:	bf38      	it	cc
 800a8ee:	250c      	movcc	r5, #12
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	db01      	blt.n	800a8fa <_malloc_r+0x1a>
 800a8f6:	42a9      	cmp	r1, r5
 800a8f8:	d903      	bls.n	800a902 <_malloc_r+0x22>
 800a8fa:	230c      	movs	r3, #12
 800a8fc:	6033      	str	r3, [r6, #0]
 800a8fe:	2000      	movs	r0, #0
 800a900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a902:	f000 fa0f 	bl	800ad24 <__malloc_lock>
 800a906:	4921      	ldr	r1, [pc, #132]	; (800a98c <_malloc_r+0xac>)
 800a908:	680a      	ldr	r2, [r1, #0]
 800a90a:	4614      	mov	r4, r2
 800a90c:	b99c      	cbnz	r4, 800a936 <_malloc_r+0x56>
 800a90e:	4f20      	ldr	r7, [pc, #128]	; (800a990 <_malloc_r+0xb0>)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	b923      	cbnz	r3, 800a91e <_malloc_r+0x3e>
 800a914:	4621      	mov	r1, r4
 800a916:	4630      	mov	r0, r6
 800a918:	f000 f998 	bl	800ac4c <_sbrk_r>
 800a91c:	6038      	str	r0, [r7, #0]
 800a91e:	4629      	mov	r1, r5
 800a920:	4630      	mov	r0, r6
 800a922:	f000 f993 	bl	800ac4c <_sbrk_r>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	d123      	bne.n	800a972 <_malloc_r+0x92>
 800a92a:	230c      	movs	r3, #12
 800a92c:	6033      	str	r3, [r6, #0]
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f9fe 	bl	800ad30 <__malloc_unlock>
 800a934:	e7e3      	b.n	800a8fe <_malloc_r+0x1e>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	1b5b      	subs	r3, r3, r5
 800a93a:	d417      	bmi.n	800a96c <_malloc_r+0x8c>
 800a93c:	2b0b      	cmp	r3, #11
 800a93e:	d903      	bls.n	800a948 <_malloc_r+0x68>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	441c      	add	r4, r3
 800a944:	6025      	str	r5, [r4, #0]
 800a946:	e004      	b.n	800a952 <_malloc_r+0x72>
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	42a2      	cmp	r2, r4
 800a94c:	bf0c      	ite	eq
 800a94e:	600b      	streq	r3, [r1, #0]
 800a950:	6053      	strne	r3, [r2, #4]
 800a952:	4630      	mov	r0, r6
 800a954:	f000 f9ec 	bl	800ad30 <__malloc_unlock>
 800a958:	f104 000b 	add.w	r0, r4, #11
 800a95c:	1d23      	adds	r3, r4, #4
 800a95e:	f020 0007 	bic.w	r0, r0, #7
 800a962:	1ac2      	subs	r2, r0, r3
 800a964:	d0cc      	beq.n	800a900 <_malloc_r+0x20>
 800a966:	1a1b      	subs	r3, r3, r0
 800a968:	50a3      	str	r3, [r4, r2]
 800a96a:	e7c9      	b.n	800a900 <_malloc_r+0x20>
 800a96c:	4622      	mov	r2, r4
 800a96e:	6864      	ldr	r4, [r4, #4]
 800a970:	e7cc      	b.n	800a90c <_malloc_r+0x2c>
 800a972:	1cc4      	adds	r4, r0, #3
 800a974:	f024 0403 	bic.w	r4, r4, #3
 800a978:	42a0      	cmp	r0, r4
 800a97a:	d0e3      	beq.n	800a944 <_malloc_r+0x64>
 800a97c:	1a21      	subs	r1, r4, r0
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 f964 	bl	800ac4c <_sbrk_r>
 800a984:	3001      	adds	r0, #1
 800a986:	d1dd      	bne.n	800a944 <_malloc_r+0x64>
 800a988:	e7cf      	b.n	800a92a <_malloc_r+0x4a>
 800a98a:	bf00      	nop
 800a98c:	20000594 	.word	0x20000594
 800a990:	20000598 	.word	0x20000598

0800a994 <__ssputs_r>:
 800a994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a998:	688e      	ldr	r6, [r1, #8]
 800a99a:	429e      	cmp	r6, r3
 800a99c:	4682      	mov	sl, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	4690      	mov	r8, r2
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	d838      	bhi.n	800aa18 <__ssputs_r+0x84>
 800a9a6:	898a      	ldrh	r2, [r1, #12]
 800a9a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9ac:	d032      	beq.n	800aa14 <__ssputs_r+0x80>
 800a9ae:	6825      	ldr	r5, [r4, #0]
 800a9b0:	6909      	ldr	r1, [r1, #16]
 800a9b2:	eba5 0901 	sub.w	r9, r5, r1
 800a9b6:	6965      	ldr	r5, [r4, #20]
 800a9b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	444b      	add	r3, r9
 800a9c4:	106d      	asrs	r5, r5, #1
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	bf38      	it	cc
 800a9ca:	461d      	movcc	r5, r3
 800a9cc:	0553      	lsls	r3, r2, #21
 800a9ce:	d531      	bpl.n	800aa34 <__ssputs_r+0xa0>
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7ff ff85 	bl	800a8e0 <_malloc_r>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	b950      	cbnz	r0, 800a9f0 <__ssputs_r+0x5c>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	f8ca 3000 	str.w	r3, [sl]
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f0:	6921      	ldr	r1, [r4, #16]
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	f7ff fb88 	bl	800a108 <memcpy>
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa02:	81a3      	strh	r3, [r4, #12]
 800aa04:	6126      	str	r6, [r4, #16]
 800aa06:	6165      	str	r5, [r4, #20]
 800aa08:	444e      	add	r6, r9
 800aa0a:	eba5 0509 	sub.w	r5, r5, r9
 800aa0e:	6026      	str	r6, [r4, #0]
 800aa10:	60a5      	str	r5, [r4, #8]
 800aa12:	463e      	mov	r6, r7
 800aa14:	42be      	cmp	r6, r7
 800aa16:	d900      	bls.n	800aa1a <__ssputs_r+0x86>
 800aa18:	463e      	mov	r6, r7
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	4641      	mov	r1, r8
 800aa20:	f000 f966 	bl	800acf0 <memmove>
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	1b9b      	subs	r3, r3, r6
 800aa2a:	4432      	add	r2, r6
 800aa2c:	60a3      	str	r3, [r4, #8]
 800aa2e:	6022      	str	r2, [r4, #0]
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7db      	b.n	800a9ec <__ssputs_r+0x58>
 800aa34:	462a      	mov	r2, r5
 800aa36:	f000 f981 	bl	800ad3c <_realloc_r>
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d1e1      	bne.n	800aa04 <__ssputs_r+0x70>
 800aa40:	6921      	ldr	r1, [r4, #16]
 800aa42:	4650      	mov	r0, sl
 800aa44:	f7ff fefc 	bl	800a840 <_free_r>
 800aa48:	e7c7      	b.n	800a9da <__ssputs_r+0x46>
	...

0800aa4c <_svfiprintf_r>:
 800aa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	4698      	mov	r8, r3
 800aa52:	898b      	ldrh	r3, [r1, #12]
 800aa54:	061b      	lsls	r3, r3, #24
 800aa56:	b09d      	sub	sp, #116	; 0x74
 800aa58:	4607      	mov	r7, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	d50e      	bpl.n	800aa7e <_svfiprintf_r+0x32>
 800aa60:	690b      	ldr	r3, [r1, #16]
 800aa62:	b963      	cbnz	r3, 800aa7e <_svfiprintf_r+0x32>
 800aa64:	2140      	movs	r1, #64	; 0x40
 800aa66:	f7ff ff3b 	bl	800a8e0 <_malloc_r>
 800aa6a:	6028      	str	r0, [r5, #0]
 800aa6c:	6128      	str	r0, [r5, #16]
 800aa6e:	b920      	cbnz	r0, 800aa7a <_svfiprintf_r+0x2e>
 800aa70:	230c      	movs	r3, #12
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	f04f 30ff 	mov.w	r0, #4294967295
 800aa78:	e0d1      	b.n	800ac1e <_svfiprintf_r+0x1d2>
 800aa7a:	2340      	movs	r3, #64	; 0x40
 800aa7c:	616b      	str	r3, [r5, #20]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9309      	str	r3, [sp, #36]	; 0x24
 800aa82:	2320      	movs	r3, #32
 800aa84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa88:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa8c:	2330      	movs	r3, #48	; 0x30
 800aa8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac38 <_svfiprintf_r+0x1ec>
 800aa92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa96:	f04f 0901 	mov.w	r9, #1
 800aa9a:	4623      	mov	r3, r4
 800aa9c:	469a      	mov	sl, r3
 800aa9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa2:	b10a      	cbz	r2, 800aaa8 <_svfiprintf_r+0x5c>
 800aaa4:	2a25      	cmp	r2, #37	; 0x25
 800aaa6:	d1f9      	bne.n	800aa9c <_svfiprintf_r+0x50>
 800aaa8:	ebba 0b04 	subs.w	fp, sl, r4
 800aaac:	d00b      	beq.n	800aac6 <_svfiprintf_r+0x7a>
 800aaae:	465b      	mov	r3, fp
 800aab0:	4622      	mov	r2, r4
 800aab2:	4629      	mov	r1, r5
 800aab4:	4638      	mov	r0, r7
 800aab6:	f7ff ff6d 	bl	800a994 <__ssputs_r>
 800aaba:	3001      	adds	r0, #1
 800aabc:	f000 80aa 	beq.w	800ac14 <_svfiprintf_r+0x1c8>
 800aac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aac2:	445a      	add	r2, fp
 800aac4:	9209      	str	r2, [sp, #36]	; 0x24
 800aac6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 80a2 	beq.w	800ac14 <_svfiprintf_r+0x1c8>
 800aad0:	2300      	movs	r3, #0
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295
 800aad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aada:	f10a 0a01 	add.w	sl, sl, #1
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	9307      	str	r3, [sp, #28]
 800aae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aae6:	931a      	str	r3, [sp, #104]	; 0x68
 800aae8:	4654      	mov	r4, sl
 800aaea:	2205      	movs	r2, #5
 800aaec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf0:	4851      	ldr	r0, [pc, #324]	; (800ac38 <_svfiprintf_r+0x1ec>)
 800aaf2:	f7f5 fb7d 	bl	80001f0 <memchr>
 800aaf6:	9a04      	ldr	r2, [sp, #16]
 800aaf8:	b9d8      	cbnz	r0, 800ab32 <_svfiprintf_r+0xe6>
 800aafa:	06d0      	lsls	r0, r2, #27
 800aafc:	bf44      	itt	mi
 800aafe:	2320      	movmi	r3, #32
 800ab00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab04:	0711      	lsls	r1, r2, #28
 800ab06:	bf44      	itt	mi
 800ab08:	232b      	movmi	r3, #43	; 0x2b
 800ab0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab12:	2b2a      	cmp	r3, #42	; 0x2a
 800ab14:	d015      	beq.n	800ab42 <_svfiprintf_r+0xf6>
 800ab16:	9a07      	ldr	r2, [sp, #28]
 800ab18:	4654      	mov	r4, sl
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f04f 0c0a 	mov.w	ip, #10
 800ab20:	4621      	mov	r1, r4
 800ab22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab26:	3b30      	subs	r3, #48	; 0x30
 800ab28:	2b09      	cmp	r3, #9
 800ab2a:	d94e      	bls.n	800abca <_svfiprintf_r+0x17e>
 800ab2c:	b1b0      	cbz	r0, 800ab5c <_svfiprintf_r+0x110>
 800ab2e:	9207      	str	r2, [sp, #28]
 800ab30:	e014      	b.n	800ab5c <_svfiprintf_r+0x110>
 800ab32:	eba0 0308 	sub.w	r3, r0, r8
 800ab36:	fa09 f303 	lsl.w	r3, r9, r3
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	46a2      	mov	sl, r4
 800ab40:	e7d2      	b.n	800aae8 <_svfiprintf_r+0x9c>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	1d19      	adds	r1, r3, #4
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	9103      	str	r1, [sp, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	bfbb      	ittet	lt
 800ab4e:	425b      	neglt	r3, r3
 800ab50:	f042 0202 	orrlt.w	r2, r2, #2
 800ab54:	9307      	strge	r3, [sp, #28]
 800ab56:	9307      	strlt	r3, [sp, #28]
 800ab58:	bfb8      	it	lt
 800ab5a:	9204      	strlt	r2, [sp, #16]
 800ab5c:	7823      	ldrb	r3, [r4, #0]
 800ab5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab60:	d10c      	bne.n	800ab7c <_svfiprintf_r+0x130>
 800ab62:	7863      	ldrb	r3, [r4, #1]
 800ab64:	2b2a      	cmp	r3, #42	; 0x2a
 800ab66:	d135      	bne.n	800abd4 <_svfiprintf_r+0x188>
 800ab68:	9b03      	ldr	r3, [sp, #12]
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	9203      	str	r2, [sp, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bfb8      	it	lt
 800ab74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab78:	3402      	adds	r4, #2
 800ab7a:	9305      	str	r3, [sp, #20]
 800ab7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac48 <_svfiprintf_r+0x1fc>
 800ab80:	7821      	ldrb	r1, [r4, #0]
 800ab82:	2203      	movs	r2, #3
 800ab84:	4650      	mov	r0, sl
 800ab86:	f7f5 fb33 	bl	80001f0 <memchr>
 800ab8a:	b140      	cbz	r0, 800ab9e <_svfiprintf_r+0x152>
 800ab8c:	2340      	movs	r3, #64	; 0x40
 800ab8e:	eba0 000a 	sub.w	r0, r0, sl
 800ab92:	fa03 f000 	lsl.w	r0, r3, r0
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	4303      	orrs	r3, r0
 800ab9a:	3401      	adds	r4, #1
 800ab9c:	9304      	str	r3, [sp, #16]
 800ab9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba2:	4826      	ldr	r0, [pc, #152]	; (800ac3c <_svfiprintf_r+0x1f0>)
 800aba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba8:	2206      	movs	r2, #6
 800abaa:	f7f5 fb21 	bl	80001f0 <memchr>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d038      	beq.n	800ac24 <_svfiprintf_r+0x1d8>
 800abb2:	4b23      	ldr	r3, [pc, #140]	; (800ac40 <_svfiprintf_r+0x1f4>)
 800abb4:	bb1b      	cbnz	r3, 800abfe <_svfiprintf_r+0x1b2>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	3307      	adds	r3, #7
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	3308      	adds	r3, #8
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc4:	4433      	add	r3, r6
 800abc6:	9309      	str	r3, [sp, #36]	; 0x24
 800abc8:	e767      	b.n	800aa9a <_svfiprintf_r+0x4e>
 800abca:	fb0c 3202 	mla	r2, ip, r2, r3
 800abce:	460c      	mov	r4, r1
 800abd0:	2001      	movs	r0, #1
 800abd2:	e7a5      	b.n	800ab20 <_svfiprintf_r+0xd4>
 800abd4:	2300      	movs	r3, #0
 800abd6:	3401      	adds	r4, #1
 800abd8:	9305      	str	r3, [sp, #20]
 800abda:	4619      	mov	r1, r3
 800abdc:	f04f 0c0a 	mov.w	ip, #10
 800abe0:	4620      	mov	r0, r4
 800abe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe6:	3a30      	subs	r2, #48	; 0x30
 800abe8:	2a09      	cmp	r2, #9
 800abea:	d903      	bls.n	800abf4 <_svfiprintf_r+0x1a8>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d0c5      	beq.n	800ab7c <_svfiprintf_r+0x130>
 800abf0:	9105      	str	r1, [sp, #20]
 800abf2:	e7c3      	b.n	800ab7c <_svfiprintf_r+0x130>
 800abf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf8:	4604      	mov	r4, r0
 800abfa:	2301      	movs	r3, #1
 800abfc:	e7f0      	b.n	800abe0 <_svfiprintf_r+0x194>
 800abfe:	ab03      	add	r3, sp, #12
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	462a      	mov	r2, r5
 800ac04:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <_svfiprintf_r+0x1f8>)
 800ac06:	a904      	add	r1, sp, #16
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7fd fff9 	bl	8008c00 <_printf_float>
 800ac0e:	1c42      	adds	r2, r0, #1
 800ac10:	4606      	mov	r6, r0
 800ac12:	d1d6      	bne.n	800abc2 <_svfiprintf_r+0x176>
 800ac14:	89ab      	ldrh	r3, [r5, #12]
 800ac16:	065b      	lsls	r3, r3, #25
 800ac18:	f53f af2c 	bmi.w	800aa74 <_svfiprintf_r+0x28>
 800ac1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac1e:	b01d      	add	sp, #116	; 0x74
 800ac20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	ab03      	add	r3, sp, #12
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	462a      	mov	r2, r5
 800ac2a:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <_svfiprintf_r+0x1f8>)
 800ac2c:	a904      	add	r1, sp, #16
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f7fe fa8a 	bl	8009148 <_printf_i>
 800ac34:	e7eb      	b.n	800ac0e <_svfiprintf_r+0x1c2>
 800ac36:	bf00      	nop
 800ac38:	0800bacc 	.word	0x0800bacc
 800ac3c:	0800bad6 	.word	0x0800bad6
 800ac40:	08008c01 	.word	0x08008c01
 800ac44:	0800a995 	.word	0x0800a995
 800ac48:	0800bad2 	.word	0x0800bad2

0800ac4c <_sbrk_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_sbrk_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f7 f888 	bl	8001d6c <_sbrk>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_sbrk_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_sbrk_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	20001f18 	.word	0x20001f18

0800ac6c <__assert_func>:
 800ac6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6e:	4614      	mov	r4, r2
 800ac70:	461a      	mov	r2, r3
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <__assert_func+0x2c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4605      	mov	r5, r0
 800ac78:	68d8      	ldr	r0, [r3, #12]
 800ac7a:	b14c      	cbz	r4, 800ac90 <__assert_func+0x24>
 800ac7c:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <__assert_func+0x30>)
 800ac7e:	9100      	str	r1, [sp, #0]
 800ac80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac84:	4906      	ldr	r1, [pc, #24]	; (800aca0 <__assert_func+0x34>)
 800ac86:	462b      	mov	r3, r5
 800ac88:	f000 f80e 	bl	800aca8 <fiprintf>
 800ac8c:	f000 faa4 	bl	800b1d8 <abort>
 800ac90:	4b04      	ldr	r3, [pc, #16]	; (800aca4 <__assert_func+0x38>)
 800ac92:	461c      	mov	r4, r3
 800ac94:	e7f3      	b.n	800ac7e <__assert_func+0x12>
 800ac96:	bf00      	nop
 800ac98:	20000180 	.word	0x20000180
 800ac9c:	0800badd 	.word	0x0800badd
 800aca0:	0800baea 	.word	0x0800baea
 800aca4:	0800bb18 	.word	0x0800bb18

0800aca8 <fiprintf>:
 800aca8:	b40e      	push	{r1, r2, r3}
 800acaa:	b503      	push	{r0, r1, lr}
 800acac:	4601      	mov	r1, r0
 800acae:	ab03      	add	r3, sp, #12
 800acb0:	4805      	ldr	r0, [pc, #20]	; (800acc8 <fiprintf+0x20>)
 800acb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb6:	6800      	ldr	r0, [r0, #0]
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	f000 f88f 	bl	800addc <_vfiprintf_r>
 800acbe:	b002      	add	sp, #8
 800acc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc4:	b003      	add	sp, #12
 800acc6:	4770      	bx	lr
 800acc8:	20000180 	.word	0x20000180

0800accc <__ascii_mbtowc>:
 800accc:	b082      	sub	sp, #8
 800acce:	b901      	cbnz	r1, 800acd2 <__ascii_mbtowc+0x6>
 800acd0:	a901      	add	r1, sp, #4
 800acd2:	b142      	cbz	r2, 800ace6 <__ascii_mbtowc+0x1a>
 800acd4:	b14b      	cbz	r3, 800acea <__ascii_mbtowc+0x1e>
 800acd6:	7813      	ldrb	r3, [r2, #0]
 800acd8:	600b      	str	r3, [r1, #0]
 800acda:	7812      	ldrb	r2, [r2, #0]
 800acdc:	1e10      	subs	r0, r2, #0
 800acde:	bf18      	it	ne
 800ace0:	2001      	movne	r0, #1
 800ace2:	b002      	add	sp, #8
 800ace4:	4770      	bx	lr
 800ace6:	4610      	mov	r0, r2
 800ace8:	e7fb      	b.n	800ace2 <__ascii_mbtowc+0x16>
 800acea:	f06f 0001 	mvn.w	r0, #1
 800acee:	e7f8      	b.n	800ace2 <__ascii_mbtowc+0x16>

0800acf0 <memmove>:
 800acf0:	4288      	cmp	r0, r1
 800acf2:	b510      	push	{r4, lr}
 800acf4:	eb01 0402 	add.w	r4, r1, r2
 800acf8:	d902      	bls.n	800ad00 <memmove+0x10>
 800acfa:	4284      	cmp	r4, r0
 800acfc:	4623      	mov	r3, r4
 800acfe:	d807      	bhi.n	800ad10 <memmove+0x20>
 800ad00:	1e43      	subs	r3, r0, #1
 800ad02:	42a1      	cmp	r1, r4
 800ad04:	d008      	beq.n	800ad18 <memmove+0x28>
 800ad06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad0e:	e7f8      	b.n	800ad02 <memmove+0x12>
 800ad10:	4402      	add	r2, r0
 800ad12:	4601      	mov	r1, r0
 800ad14:	428a      	cmp	r2, r1
 800ad16:	d100      	bne.n	800ad1a <memmove+0x2a>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad22:	e7f7      	b.n	800ad14 <memmove+0x24>

0800ad24 <__malloc_lock>:
 800ad24:	4801      	ldr	r0, [pc, #4]	; (800ad2c <__malloc_lock+0x8>)
 800ad26:	f000 bc17 	b.w	800b558 <__retarget_lock_acquire_recursive>
 800ad2a:	bf00      	nop
 800ad2c:	20001f20 	.word	0x20001f20

0800ad30 <__malloc_unlock>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__malloc_unlock+0x8>)
 800ad32:	f000 bc12 	b.w	800b55a <__retarget_lock_release_recursive>
 800ad36:	bf00      	nop
 800ad38:	20001f20 	.word	0x20001f20

0800ad3c <_realloc_r>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	4607      	mov	r7, r0
 800ad40:	4614      	mov	r4, r2
 800ad42:	460e      	mov	r6, r1
 800ad44:	b921      	cbnz	r1, 800ad50 <_realloc_r+0x14>
 800ad46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	f7ff bdc8 	b.w	800a8e0 <_malloc_r>
 800ad50:	b922      	cbnz	r2, 800ad5c <_realloc_r+0x20>
 800ad52:	f7ff fd75 	bl	800a840 <_free_r>
 800ad56:	4625      	mov	r5, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad5c:	f000 fc62 	bl	800b624 <_malloc_usable_size_r>
 800ad60:	42a0      	cmp	r0, r4
 800ad62:	d20f      	bcs.n	800ad84 <_realloc_r+0x48>
 800ad64:	4621      	mov	r1, r4
 800ad66:	4638      	mov	r0, r7
 800ad68:	f7ff fdba 	bl	800a8e0 <_malloc_r>
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d0f2      	beq.n	800ad58 <_realloc_r+0x1c>
 800ad72:	4631      	mov	r1, r6
 800ad74:	4622      	mov	r2, r4
 800ad76:	f7ff f9c7 	bl	800a108 <memcpy>
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f7ff fd5f 	bl	800a840 <_free_r>
 800ad82:	e7e9      	b.n	800ad58 <_realloc_r+0x1c>
 800ad84:	4635      	mov	r5, r6
 800ad86:	e7e7      	b.n	800ad58 <_realloc_r+0x1c>

0800ad88 <__sfputc_r>:
 800ad88:	6893      	ldr	r3, [r2, #8]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	b410      	push	{r4}
 800ad90:	6093      	str	r3, [r2, #8]
 800ad92:	da08      	bge.n	800ada6 <__sfputc_r+0x1e>
 800ad94:	6994      	ldr	r4, [r2, #24]
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	db01      	blt.n	800ad9e <__sfputc_r+0x16>
 800ad9a:	290a      	cmp	r1, #10
 800ad9c:	d103      	bne.n	800ada6 <__sfputc_r+0x1e>
 800ad9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada2:	f000 b94b 	b.w	800b03c <__swbuf_r>
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	1c58      	adds	r0, r3, #1
 800adaa:	6010      	str	r0, [r2, #0]
 800adac:	7019      	strb	r1, [r3, #0]
 800adae:	4608      	mov	r0, r1
 800adb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <__sfputs_r>:
 800adb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb8:	4606      	mov	r6, r0
 800adba:	460f      	mov	r7, r1
 800adbc:	4614      	mov	r4, r2
 800adbe:	18d5      	adds	r5, r2, r3
 800adc0:	42ac      	cmp	r4, r5
 800adc2:	d101      	bne.n	800adc8 <__sfputs_r+0x12>
 800adc4:	2000      	movs	r0, #0
 800adc6:	e007      	b.n	800add8 <__sfputs_r+0x22>
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	463a      	mov	r2, r7
 800adce:	4630      	mov	r0, r6
 800add0:	f7ff ffda 	bl	800ad88 <__sfputc_r>
 800add4:	1c43      	adds	r3, r0, #1
 800add6:	d1f3      	bne.n	800adc0 <__sfputs_r+0xa>
 800add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800addc <_vfiprintf_r>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	460d      	mov	r5, r1
 800ade2:	b09d      	sub	sp, #116	; 0x74
 800ade4:	4614      	mov	r4, r2
 800ade6:	4698      	mov	r8, r3
 800ade8:	4606      	mov	r6, r0
 800adea:	b118      	cbz	r0, 800adf4 <_vfiprintf_r+0x18>
 800adec:	6983      	ldr	r3, [r0, #24]
 800adee:	b90b      	cbnz	r3, 800adf4 <_vfiprintf_r+0x18>
 800adf0:	f000 fb14 	bl	800b41c <__sinit>
 800adf4:	4b89      	ldr	r3, [pc, #548]	; (800b01c <_vfiprintf_r+0x240>)
 800adf6:	429d      	cmp	r5, r3
 800adf8:	d11b      	bne.n	800ae32 <_vfiprintf_r+0x56>
 800adfa:	6875      	ldr	r5, [r6, #4]
 800adfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adfe:	07d9      	lsls	r1, r3, #31
 800ae00:	d405      	bmi.n	800ae0e <_vfiprintf_r+0x32>
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	059a      	lsls	r2, r3, #22
 800ae06:	d402      	bmi.n	800ae0e <_vfiprintf_r+0x32>
 800ae08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae0a:	f000 fba5 	bl	800b558 <__retarget_lock_acquire_recursive>
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	071b      	lsls	r3, r3, #28
 800ae12:	d501      	bpl.n	800ae18 <_vfiprintf_r+0x3c>
 800ae14:	692b      	ldr	r3, [r5, #16]
 800ae16:	b9eb      	cbnz	r3, 800ae54 <_vfiprintf_r+0x78>
 800ae18:	4629      	mov	r1, r5
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f000 f96e 	bl	800b0fc <__swsetup_r>
 800ae20:	b1c0      	cbz	r0, 800ae54 <_vfiprintf_r+0x78>
 800ae22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae24:	07dc      	lsls	r4, r3, #31
 800ae26:	d50e      	bpl.n	800ae46 <_vfiprintf_r+0x6a>
 800ae28:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2c:	b01d      	add	sp, #116	; 0x74
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	4b7b      	ldr	r3, [pc, #492]	; (800b020 <_vfiprintf_r+0x244>)
 800ae34:	429d      	cmp	r5, r3
 800ae36:	d101      	bne.n	800ae3c <_vfiprintf_r+0x60>
 800ae38:	68b5      	ldr	r5, [r6, #8]
 800ae3a:	e7df      	b.n	800adfc <_vfiprintf_r+0x20>
 800ae3c:	4b79      	ldr	r3, [pc, #484]	; (800b024 <_vfiprintf_r+0x248>)
 800ae3e:	429d      	cmp	r5, r3
 800ae40:	bf08      	it	eq
 800ae42:	68f5      	ldreq	r5, [r6, #12]
 800ae44:	e7da      	b.n	800adfc <_vfiprintf_r+0x20>
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d4ed      	bmi.n	800ae28 <_vfiprintf_r+0x4c>
 800ae4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae4e:	f000 fb84 	bl	800b55a <__retarget_lock_release_recursive>
 800ae52:	e7e9      	b.n	800ae28 <_vfiprintf_r+0x4c>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	; 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae62:	2330      	movs	r3, #48	; 0x30
 800ae64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b028 <_vfiprintf_r+0x24c>
 800ae68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae6c:	f04f 0901 	mov.w	r9, #1
 800ae70:	4623      	mov	r3, r4
 800ae72:	469a      	mov	sl, r3
 800ae74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae78:	b10a      	cbz	r2, 800ae7e <_vfiprintf_r+0xa2>
 800ae7a:	2a25      	cmp	r2, #37	; 0x25
 800ae7c:	d1f9      	bne.n	800ae72 <_vfiprintf_r+0x96>
 800ae7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae82:	d00b      	beq.n	800ae9c <_vfiprintf_r+0xc0>
 800ae84:	465b      	mov	r3, fp
 800ae86:	4622      	mov	r2, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ff93 	bl	800adb6 <__sfputs_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f000 80aa 	beq.w	800afea <_vfiprintf_r+0x20e>
 800ae96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae98:	445a      	add	r2, fp
 800ae9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 80a2 	beq.w	800afea <_vfiprintf_r+0x20e>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb0:	f10a 0a01 	add.w	sl, sl, #1
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aebc:	931a      	str	r3, [sp, #104]	; 0x68
 800aebe:	4654      	mov	r4, sl
 800aec0:	2205      	movs	r2, #5
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4858      	ldr	r0, [pc, #352]	; (800b028 <_vfiprintf_r+0x24c>)
 800aec8:	f7f5 f992 	bl	80001f0 <memchr>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	b9d8      	cbnz	r0, 800af08 <_vfiprintf_r+0x12c>
 800aed0:	06d1      	lsls	r1, r2, #27
 800aed2:	bf44      	itt	mi
 800aed4:	2320      	movmi	r3, #32
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aeda:	0713      	lsls	r3, r2, #28
 800aedc:	bf44      	itt	mi
 800aede:	232b      	movmi	r3, #43	; 0x2b
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeea:	d015      	beq.n	800af18 <_vfiprintf_r+0x13c>
 800aeec:	9a07      	ldr	r2, [sp, #28]
 800aeee:	4654      	mov	r4, sl
 800aef0:	2000      	movs	r0, #0
 800aef2:	f04f 0c0a 	mov.w	ip, #10
 800aef6:	4621      	mov	r1, r4
 800aef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefc:	3b30      	subs	r3, #48	; 0x30
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d94e      	bls.n	800afa0 <_vfiprintf_r+0x1c4>
 800af02:	b1b0      	cbz	r0, 800af32 <_vfiprintf_r+0x156>
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	e014      	b.n	800af32 <_vfiprintf_r+0x156>
 800af08:	eba0 0308 	sub.w	r3, r0, r8
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	46a2      	mov	sl, r4
 800af16:	e7d2      	b.n	800aebe <_vfiprintf_r+0xe2>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	1d19      	adds	r1, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	bfbb      	ittet	lt
 800af24:	425b      	neglt	r3, r3
 800af26:	f042 0202 	orrlt.w	r2, r2, #2
 800af2a:	9307      	strge	r3, [sp, #28]
 800af2c:	9307      	strlt	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	9204      	strlt	r2, [sp, #16]
 800af32:	7823      	ldrb	r3, [r4, #0]
 800af34:	2b2e      	cmp	r3, #46	; 0x2e
 800af36:	d10c      	bne.n	800af52 <_vfiprintf_r+0x176>
 800af38:	7863      	ldrb	r3, [r4, #1]
 800af3a:	2b2a      	cmp	r3, #42	; 0x2a
 800af3c:	d135      	bne.n	800afaa <_vfiprintf_r+0x1ce>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	1d1a      	adds	r2, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	9203      	str	r2, [sp, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	bfb8      	it	lt
 800af4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af4e:	3402      	adds	r4, #2
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b038 <_vfiprintf_r+0x25c>
 800af56:	7821      	ldrb	r1, [r4, #0]
 800af58:	2203      	movs	r2, #3
 800af5a:	4650      	mov	r0, sl
 800af5c:	f7f5 f948 	bl	80001f0 <memchr>
 800af60:	b140      	cbz	r0, 800af74 <_vfiprintf_r+0x198>
 800af62:	2340      	movs	r3, #64	; 0x40
 800af64:	eba0 000a 	sub.w	r0, r0, sl
 800af68:	fa03 f000 	lsl.w	r0, r3, r0
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	4303      	orrs	r3, r0
 800af70:	3401      	adds	r4, #1
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af78:	482c      	ldr	r0, [pc, #176]	; (800b02c <_vfiprintf_r+0x250>)
 800af7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af7e:	2206      	movs	r2, #6
 800af80:	f7f5 f936 	bl	80001f0 <memchr>
 800af84:	2800      	cmp	r0, #0
 800af86:	d03f      	beq.n	800b008 <_vfiprintf_r+0x22c>
 800af88:	4b29      	ldr	r3, [pc, #164]	; (800b030 <_vfiprintf_r+0x254>)
 800af8a:	bb1b      	cbnz	r3, 800afd4 <_vfiprintf_r+0x1f8>
 800af8c:	9b03      	ldr	r3, [sp, #12]
 800af8e:	3307      	adds	r3, #7
 800af90:	f023 0307 	bic.w	r3, r3, #7
 800af94:	3308      	adds	r3, #8
 800af96:	9303      	str	r3, [sp, #12]
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	443b      	add	r3, r7
 800af9c:	9309      	str	r3, [sp, #36]	; 0x24
 800af9e:	e767      	b.n	800ae70 <_vfiprintf_r+0x94>
 800afa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa4:	460c      	mov	r4, r1
 800afa6:	2001      	movs	r0, #1
 800afa8:	e7a5      	b.n	800aef6 <_vfiprintf_r+0x11a>
 800afaa:	2300      	movs	r3, #0
 800afac:	3401      	adds	r4, #1
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	4619      	mov	r1, r3
 800afb2:	f04f 0c0a 	mov.w	ip, #10
 800afb6:	4620      	mov	r0, r4
 800afb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afbc:	3a30      	subs	r2, #48	; 0x30
 800afbe:	2a09      	cmp	r2, #9
 800afc0:	d903      	bls.n	800afca <_vfiprintf_r+0x1ee>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0c5      	beq.n	800af52 <_vfiprintf_r+0x176>
 800afc6:	9105      	str	r1, [sp, #20]
 800afc8:	e7c3      	b.n	800af52 <_vfiprintf_r+0x176>
 800afca:	fb0c 2101 	mla	r1, ip, r1, r2
 800afce:	4604      	mov	r4, r0
 800afd0:	2301      	movs	r3, #1
 800afd2:	e7f0      	b.n	800afb6 <_vfiprintf_r+0x1da>
 800afd4:	ab03      	add	r3, sp, #12
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	462a      	mov	r2, r5
 800afda:	4b16      	ldr	r3, [pc, #88]	; (800b034 <_vfiprintf_r+0x258>)
 800afdc:	a904      	add	r1, sp, #16
 800afde:	4630      	mov	r0, r6
 800afe0:	f7fd fe0e 	bl	8008c00 <_printf_float>
 800afe4:	4607      	mov	r7, r0
 800afe6:	1c78      	adds	r0, r7, #1
 800afe8:	d1d6      	bne.n	800af98 <_vfiprintf_r+0x1bc>
 800afea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afec:	07d9      	lsls	r1, r3, #31
 800afee:	d405      	bmi.n	800affc <_vfiprintf_r+0x220>
 800aff0:	89ab      	ldrh	r3, [r5, #12]
 800aff2:	059a      	lsls	r2, r3, #22
 800aff4:	d402      	bmi.n	800affc <_vfiprintf_r+0x220>
 800aff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff8:	f000 faaf 	bl	800b55a <__retarget_lock_release_recursive>
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	065b      	lsls	r3, r3, #25
 800b000:	f53f af12 	bmi.w	800ae28 <_vfiprintf_r+0x4c>
 800b004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b006:	e711      	b.n	800ae2c <_vfiprintf_r+0x50>
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	462a      	mov	r2, r5
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <_vfiprintf_r+0x258>)
 800b010:	a904      	add	r1, sp, #16
 800b012:	4630      	mov	r0, r6
 800b014:	f7fe f898 	bl	8009148 <_printf_i>
 800b018:	e7e4      	b.n	800afe4 <_vfiprintf_r+0x208>
 800b01a:	bf00      	nop
 800b01c:	0800bc44 	.word	0x0800bc44
 800b020:	0800bc64 	.word	0x0800bc64
 800b024:	0800bc24 	.word	0x0800bc24
 800b028:	0800bacc 	.word	0x0800bacc
 800b02c:	0800bad6 	.word	0x0800bad6
 800b030:	08008c01 	.word	0x08008c01
 800b034:	0800adb7 	.word	0x0800adb7
 800b038:	0800bad2 	.word	0x0800bad2

0800b03c <__swbuf_r>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	460e      	mov	r6, r1
 800b040:	4614      	mov	r4, r2
 800b042:	4605      	mov	r5, r0
 800b044:	b118      	cbz	r0, 800b04e <__swbuf_r+0x12>
 800b046:	6983      	ldr	r3, [r0, #24]
 800b048:	b90b      	cbnz	r3, 800b04e <__swbuf_r+0x12>
 800b04a:	f000 f9e7 	bl	800b41c <__sinit>
 800b04e:	4b21      	ldr	r3, [pc, #132]	; (800b0d4 <__swbuf_r+0x98>)
 800b050:	429c      	cmp	r4, r3
 800b052:	d12b      	bne.n	800b0ac <__swbuf_r+0x70>
 800b054:	686c      	ldr	r4, [r5, #4]
 800b056:	69a3      	ldr	r3, [r4, #24]
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	071a      	lsls	r2, r3, #28
 800b05e:	d52f      	bpl.n	800b0c0 <__swbuf_r+0x84>
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	b36b      	cbz	r3, 800b0c0 <__swbuf_r+0x84>
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	6820      	ldr	r0, [r4, #0]
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	6963      	ldr	r3, [r4, #20]
 800b06c:	b2f6      	uxtb	r6, r6
 800b06e:	4283      	cmp	r3, r0
 800b070:	4637      	mov	r7, r6
 800b072:	dc04      	bgt.n	800b07e <__swbuf_r+0x42>
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f93c 	bl	800b2f4 <_fflush_r>
 800b07c:	bb30      	cbnz	r0, 800b0cc <__swbuf_r+0x90>
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	3b01      	subs	r3, #1
 800b082:	60a3      	str	r3, [r4, #8]
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	6022      	str	r2, [r4, #0]
 800b08a:	701e      	strb	r6, [r3, #0]
 800b08c:	6963      	ldr	r3, [r4, #20]
 800b08e:	3001      	adds	r0, #1
 800b090:	4283      	cmp	r3, r0
 800b092:	d004      	beq.n	800b09e <__swbuf_r+0x62>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	07db      	lsls	r3, r3, #31
 800b098:	d506      	bpl.n	800b0a8 <__swbuf_r+0x6c>
 800b09a:	2e0a      	cmp	r6, #10
 800b09c:	d104      	bne.n	800b0a8 <__swbuf_r+0x6c>
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f000 f927 	bl	800b2f4 <_fflush_r>
 800b0a6:	b988      	cbnz	r0, 800b0cc <__swbuf_r+0x90>
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <__swbuf_r+0x9c>)
 800b0ae:	429c      	cmp	r4, r3
 800b0b0:	d101      	bne.n	800b0b6 <__swbuf_r+0x7a>
 800b0b2:	68ac      	ldr	r4, [r5, #8]
 800b0b4:	e7cf      	b.n	800b056 <__swbuf_r+0x1a>
 800b0b6:	4b09      	ldr	r3, [pc, #36]	; (800b0dc <__swbuf_r+0xa0>)
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	bf08      	it	eq
 800b0bc:	68ec      	ldreq	r4, [r5, #12]
 800b0be:	e7ca      	b.n	800b056 <__swbuf_r+0x1a>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 f81a 	bl	800b0fc <__swsetup_r>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0cb      	beq.n	800b064 <__swbuf_r+0x28>
 800b0cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b0d0:	e7ea      	b.n	800b0a8 <__swbuf_r+0x6c>
 800b0d2:	bf00      	nop
 800b0d4:	0800bc44 	.word	0x0800bc44
 800b0d8:	0800bc64 	.word	0x0800bc64
 800b0dc:	0800bc24 	.word	0x0800bc24

0800b0e0 <__ascii_wctomb>:
 800b0e0:	b149      	cbz	r1, 800b0f6 <__ascii_wctomb+0x16>
 800b0e2:	2aff      	cmp	r2, #255	; 0xff
 800b0e4:	bf85      	ittet	hi
 800b0e6:	238a      	movhi	r3, #138	; 0x8a
 800b0e8:	6003      	strhi	r3, [r0, #0]
 800b0ea:	700a      	strbls	r2, [r1, #0]
 800b0ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0f0:	bf98      	it	ls
 800b0f2:	2001      	movls	r0, #1
 800b0f4:	4770      	bx	lr
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4770      	bx	lr
	...

0800b0fc <__swsetup_r>:
 800b0fc:	4b32      	ldr	r3, [pc, #200]	; (800b1c8 <__swsetup_r+0xcc>)
 800b0fe:	b570      	push	{r4, r5, r6, lr}
 800b100:	681d      	ldr	r5, [r3, #0]
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	b125      	cbz	r5, 800b112 <__swsetup_r+0x16>
 800b108:	69ab      	ldr	r3, [r5, #24]
 800b10a:	b913      	cbnz	r3, 800b112 <__swsetup_r+0x16>
 800b10c:	4628      	mov	r0, r5
 800b10e:	f000 f985 	bl	800b41c <__sinit>
 800b112:	4b2e      	ldr	r3, [pc, #184]	; (800b1cc <__swsetup_r+0xd0>)
 800b114:	429c      	cmp	r4, r3
 800b116:	d10f      	bne.n	800b138 <__swsetup_r+0x3c>
 800b118:	686c      	ldr	r4, [r5, #4]
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b120:	0719      	lsls	r1, r3, #28
 800b122:	d42c      	bmi.n	800b17e <__swsetup_r+0x82>
 800b124:	06dd      	lsls	r5, r3, #27
 800b126:	d411      	bmi.n	800b14c <__swsetup_r+0x50>
 800b128:	2309      	movs	r3, #9
 800b12a:	6033      	str	r3, [r6, #0]
 800b12c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b130:	81a3      	strh	r3, [r4, #12]
 800b132:	f04f 30ff 	mov.w	r0, #4294967295
 800b136:	e03e      	b.n	800b1b6 <__swsetup_r+0xba>
 800b138:	4b25      	ldr	r3, [pc, #148]	; (800b1d0 <__swsetup_r+0xd4>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <__swsetup_r+0x46>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7eb      	b.n	800b11a <__swsetup_r+0x1e>
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <__swsetup_r+0xd8>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7e6      	b.n	800b11a <__swsetup_r+0x1e>
 800b14c:	0758      	lsls	r0, r3, #29
 800b14e:	d512      	bpl.n	800b176 <__swsetup_r+0x7a>
 800b150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b152:	b141      	cbz	r1, 800b166 <__swsetup_r+0x6a>
 800b154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b158:	4299      	cmp	r1, r3
 800b15a:	d002      	beq.n	800b162 <__swsetup_r+0x66>
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7ff fb6f 	bl	800a840 <_free_r>
 800b162:	2300      	movs	r3, #0
 800b164:	6363      	str	r3, [r4, #52]	; 0x34
 800b166:	89a3      	ldrh	r3, [r4, #12]
 800b168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	2300      	movs	r3, #0
 800b170:	6063      	str	r3, [r4, #4]
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	f043 0308 	orr.w	r3, r3, #8
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	b94b      	cbnz	r3, 800b196 <__swsetup_r+0x9a>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b18c:	d003      	beq.n	800b196 <__swsetup_r+0x9a>
 800b18e:	4621      	mov	r1, r4
 800b190:	4630      	mov	r0, r6
 800b192:	f000 fa07 	bl	800b5a4 <__smakebuf_r>
 800b196:	89a0      	ldrh	r0, [r4, #12]
 800b198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b19c:	f010 0301 	ands.w	r3, r0, #1
 800b1a0:	d00a      	beq.n	800b1b8 <__swsetup_r+0xbc>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	6963      	ldr	r3, [r4, #20]
 800b1a8:	425b      	negs	r3, r3
 800b1aa:	61a3      	str	r3, [r4, #24]
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	b943      	cbnz	r3, 800b1c2 <__swsetup_r+0xc6>
 800b1b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b1b4:	d1ba      	bne.n	800b12c <__swsetup_r+0x30>
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	0781      	lsls	r1, r0, #30
 800b1ba:	bf58      	it	pl
 800b1bc:	6963      	ldrpl	r3, [r4, #20]
 800b1be:	60a3      	str	r3, [r4, #8]
 800b1c0:	e7f4      	b.n	800b1ac <__swsetup_r+0xb0>
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	e7f7      	b.n	800b1b6 <__swsetup_r+0xba>
 800b1c6:	bf00      	nop
 800b1c8:	20000180 	.word	0x20000180
 800b1cc:	0800bc44 	.word	0x0800bc44
 800b1d0:	0800bc64 	.word	0x0800bc64
 800b1d4:	0800bc24 	.word	0x0800bc24

0800b1d8 <abort>:
 800b1d8:	b508      	push	{r3, lr}
 800b1da:	2006      	movs	r0, #6
 800b1dc:	f000 fa52 	bl	800b684 <raise>
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	f7f6 fd4b 	bl	8001c7c <_exit>
	...

0800b1e8 <__sflush_r>:
 800b1e8:	898a      	ldrh	r2, [r1, #12]
 800b1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	0710      	lsls	r0, r2, #28
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	d458      	bmi.n	800b2a8 <__sflush_r+0xc0>
 800b1f6:	684b      	ldr	r3, [r1, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dc05      	bgt.n	800b208 <__sflush_r+0x20>
 800b1fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	dc02      	bgt.n	800b208 <__sflush_r+0x20>
 800b202:	2000      	movs	r0, #0
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20a:	2e00      	cmp	r6, #0
 800b20c:	d0f9      	beq.n	800b202 <__sflush_r+0x1a>
 800b20e:	2300      	movs	r3, #0
 800b210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b214:	682f      	ldr	r7, [r5, #0]
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	d032      	beq.n	800b280 <__sflush_r+0x98>
 800b21a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	075a      	lsls	r2, r3, #29
 800b220:	d505      	bpl.n	800b22e <__sflush_r+0x46>
 800b222:	6863      	ldr	r3, [r4, #4]
 800b224:	1ac0      	subs	r0, r0, r3
 800b226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b228:	b10b      	cbz	r3, 800b22e <__sflush_r+0x46>
 800b22a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b22c:	1ac0      	subs	r0, r0, r3
 800b22e:	2300      	movs	r3, #0
 800b230:	4602      	mov	r2, r0
 800b232:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b234:	6a21      	ldr	r1, [r4, #32]
 800b236:	4628      	mov	r0, r5
 800b238:	47b0      	blx	r6
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	d106      	bne.n	800b24e <__sflush_r+0x66>
 800b240:	6829      	ldr	r1, [r5, #0]
 800b242:	291d      	cmp	r1, #29
 800b244:	d82c      	bhi.n	800b2a0 <__sflush_r+0xb8>
 800b246:	4a2a      	ldr	r2, [pc, #168]	; (800b2f0 <__sflush_r+0x108>)
 800b248:	40ca      	lsrs	r2, r1
 800b24a:	07d6      	lsls	r6, r2, #31
 800b24c:	d528      	bpl.n	800b2a0 <__sflush_r+0xb8>
 800b24e:	2200      	movs	r2, #0
 800b250:	6062      	str	r2, [r4, #4]
 800b252:	04d9      	lsls	r1, r3, #19
 800b254:	6922      	ldr	r2, [r4, #16]
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	d504      	bpl.n	800b264 <__sflush_r+0x7c>
 800b25a:	1c42      	adds	r2, r0, #1
 800b25c:	d101      	bne.n	800b262 <__sflush_r+0x7a>
 800b25e:	682b      	ldr	r3, [r5, #0]
 800b260:	b903      	cbnz	r3, 800b264 <__sflush_r+0x7c>
 800b262:	6560      	str	r0, [r4, #84]	; 0x54
 800b264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b266:	602f      	str	r7, [r5, #0]
 800b268:	2900      	cmp	r1, #0
 800b26a:	d0ca      	beq.n	800b202 <__sflush_r+0x1a>
 800b26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b270:	4299      	cmp	r1, r3
 800b272:	d002      	beq.n	800b27a <__sflush_r+0x92>
 800b274:	4628      	mov	r0, r5
 800b276:	f7ff fae3 	bl	800a840 <_free_r>
 800b27a:	2000      	movs	r0, #0
 800b27c:	6360      	str	r0, [r4, #52]	; 0x34
 800b27e:	e7c1      	b.n	800b204 <__sflush_r+0x1c>
 800b280:	6a21      	ldr	r1, [r4, #32]
 800b282:	2301      	movs	r3, #1
 800b284:	4628      	mov	r0, r5
 800b286:	47b0      	blx	r6
 800b288:	1c41      	adds	r1, r0, #1
 800b28a:	d1c7      	bne.n	800b21c <__sflush_r+0x34>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0c4      	beq.n	800b21c <__sflush_r+0x34>
 800b292:	2b1d      	cmp	r3, #29
 800b294:	d001      	beq.n	800b29a <__sflush_r+0xb2>
 800b296:	2b16      	cmp	r3, #22
 800b298:	d101      	bne.n	800b29e <__sflush_r+0xb6>
 800b29a:	602f      	str	r7, [r5, #0]
 800b29c:	e7b1      	b.n	800b202 <__sflush_r+0x1a>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	e7ad      	b.n	800b204 <__sflush_r+0x1c>
 800b2a8:	690f      	ldr	r7, [r1, #16]
 800b2aa:	2f00      	cmp	r7, #0
 800b2ac:	d0a9      	beq.n	800b202 <__sflush_r+0x1a>
 800b2ae:	0793      	lsls	r3, r2, #30
 800b2b0:	680e      	ldr	r6, [r1, #0]
 800b2b2:	bf08      	it	eq
 800b2b4:	694b      	ldreq	r3, [r1, #20]
 800b2b6:	600f      	str	r7, [r1, #0]
 800b2b8:	bf18      	it	ne
 800b2ba:	2300      	movne	r3, #0
 800b2bc:	eba6 0807 	sub.w	r8, r6, r7
 800b2c0:	608b      	str	r3, [r1, #8]
 800b2c2:	f1b8 0f00 	cmp.w	r8, #0
 800b2c6:	dd9c      	ble.n	800b202 <__sflush_r+0x1a>
 800b2c8:	6a21      	ldr	r1, [r4, #32]
 800b2ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2cc:	4643      	mov	r3, r8
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	47b0      	blx	r6
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dc06      	bgt.n	800b2e6 <__sflush_r+0xfe>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	e78e      	b.n	800b204 <__sflush_r+0x1c>
 800b2e6:	4407      	add	r7, r0
 800b2e8:	eba8 0800 	sub.w	r8, r8, r0
 800b2ec:	e7e9      	b.n	800b2c2 <__sflush_r+0xda>
 800b2ee:	bf00      	nop
 800b2f0:	20400001 	.word	0x20400001

0800b2f4 <_fflush_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	690b      	ldr	r3, [r1, #16]
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	b913      	cbnz	r3, 800b304 <_fflush_r+0x10>
 800b2fe:	2500      	movs	r5, #0
 800b300:	4628      	mov	r0, r5
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	b118      	cbz	r0, 800b30e <_fflush_r+0x1a>
 800b306:	6983      	ldr	r3, [r0, #24]
 800b308:	b90b      	cbnz	r3, 800b30e <_fflush_r+0x1a>
 800b30a:	f000 f887 	bl	800b41c <__sinit>
 800b30e:	4b14      	ldr	r3, [pc, #80]	; (800b360 <_fflush_r+0x6c>)
 800b310:	429c      	cmp	r4, r3
 800b312:	d11b      	bne.n	800b34c <_fflush_r+0x58>
 800b314:	686c      	ldr	r4, [r5, #4]
 800b316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0ef      	beq.n	800b2fe <_fflush_r+0xa>
 800b31e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b320:	07d0      	lsls	r0, r2, #31
 800b322:	d404      	bmi.n	800b32e <_fflush_r+0x3a>
 800b324:	0599      	lsls	r1, r3, #22
 800b326:	d402      	bmi.n	800b32e <_fflush_r+0x3a>
 800b328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b32a:	f000 f915 	bl	800b558 <__retarget_lock_acquire_recursive>
 800b32e:	4628      	mov	r0, r5
 800b330:	4621      	mov	r1, r4
 800b332:	f7ff ff59 	bl	800b1e8 <__sflush_r>
 800b336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b338:	07da      	lsls	r2, r3, #31
 800b33a:	4605      	mov	r5, r0
 800b33c:	d4e0      	bmi.n	800b300 <_fflush_r+0xc>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	059b      	lsls	r3, r3, #22
 800b342:	d4dd      	bmi.n	800b300 <_fflush_r+0xc>
 800b344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b346:	f000 f908 	bl	800b55a <__retarget_lock_release_recursive>
 800b34a:	e7d9      	b.n	800b300 <_fflush_r+0xc>
 800b34c:	4b05      	ldr	r3, [pc, #20]	; (800b364 <_fflush_r+0x70>)
 800b34e:	429c      	cmp	r4, r3
 800b350:	d101      	bne.n	800b356 <_fflush_r+0x62>
 800b352:	68ac      	ldr	r4, [r5, #8]
 800b354:	e7df      	b.n	800b316 <_fflush_r+0x22>
 800b356:	4b04      	ldr	r3, [pc, #16]	; (800b368 <_fflush_r+0x74>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	bf08      	it	eq
 800b35c:	68ec      	ldreq	r4, [r5, #12]
 800b35e:	e7da      	b.n	800b316 <_fflush_r+0x22>
 800b360:	0800bc44 	.word	0x0800bc44
 800b364:	0800bc64 	.word	0x0800bc64
 800b368:	0800bc24 	.word	0x0800bc24

0800b36c <std>:
 800b36c:	2300      	movs	r3, #0
 800b36e:	b510      	push	{r4, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	e9c0 3300 	strd	r3, r3, [r0]
 800b376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b37a:	6083      	str	r3, [r0, #8]
 800b37c:	8181      	strh	r1, [r0, #12]
 800b37e:	6643      	str	r3, [r0, #100]	; 0x64
 800b380:	81c2      	strh	r2, [r0, #14]
 800b382:	6183      	str	r3, [r0, #24]
 800b384:	4619      	mov	r1, r3
 800b386:	2208      	movs	r2, #8
 800b388:	305c      	adds	r0, #92	; 0x5c
 800b38a:	f7fd fb91 	bl	8008ab0 <memset>
 800b38e:	4b05      	ldr	r3, [pc, #20]	; (800b3a4 <std+0x38>)
 800b390:	6263      	str	r3, [r4, #36]	; 0x24
 800b392:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <std+0x3c>)
 800b394:	62a3      	str	r3, [r4, #40]	; 0x28
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <std+0x40>)
 800b398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <std+0x44>)
 800b39c:	6224      	str	r4, [r4, #32]
 800b39e:	6323      	str	r3, [r4, #48]	; 0x30
 800b3a0:	bd10      	pop	{r4, pc}
 800b3a2:	bf00      	nop
 800b3a4:	0800b6bd 	.word	0x0800b6bd
 800b3a8:	0800b6df 	.word	0x0800b6df
 800b3ac:	0800b717 	.word	0x0800b717
 800b3b0:	0800b73b 	.word	0x0800b73b

0800b3b4 <_cleanup_r>:
 800b3b4:	4901      	ldr	r1, [pc, #4]	; (800b3bc <_cleanup_r+0x8>)
 800b3b6:	f000 b8af 	b.w	800b518 <_fwalk_reent>
 800b3ba:	bf00      	nop
 800b3bc:	0800b2f5 	.word	0x0800b2f5

0800b3c0 <__sfmoreglue>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	1e4a      	subs	r2, r1, #1
 800b3c4:	2568      	movs	r5, #104	; 0x68
 800b3c6:	4355      	muls	r5, r2
 800b3c8:	460e      	mov	r6, r1
 800b3ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b3ce:	f7ff fa87 	bl	800a8e0 <_malloc_r>
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	b140      	cbz	r0, 800b3e8 <__sfmoreglue+0x28>
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	e9c0 1600 	strd	r1, r6, [r0]
 800b3dc:	300c      	adds	r0, #12
 800b3de:	60a0      	str	r0, [r4, #8]
 800b3e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3e4:	f7fd fb64 	bl	8008ab0 <memset>
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}

0800b3ec <__sfp_lock_acquire>:
 800b3ec:	4801      	ldr	r0, [pc, #4]	; (800b3f4 <__sfp_lock_acquire+0x8>)
 800b3ee:	f000 b8b3 	b.w	800b558 <__retarget_lock_acquire_recursive>
 800b3f2:	bf00      	nop
 800b3f4:	20001f24 	.word	0x20001f24

0800b3f8 <__sfp_lock_release>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__sfp_lock_release+0x8>)
 800b3fa:	f000 b8ae 	b.w	800b55a <__retarget_lock_release_recursive>
 800b3fe:	bf00      	nop
 800b400:	20001f24 	.word	0x20001f24

0800b404 <__sinit_lock_acquire>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__sinit_lock_acquire+0x8>)
 800b406:	f000 b8a7 	b.w	800b558 <__retarget_lock_acquire_recursive>
 800b40a:	bf00      	nop
 800b40c:	20001f1f 	.word	0x20001f1f

0800b410 <__sinit_lock_release>:
 800b410:	4801      	ldr	r0, [pc, #4]	; (800b418 <__sinit_lock_release+0x8>)
 800b412:	f000 b8a2 	b.w	800b55a <__retarget_lock_release_recursive>
 800b416:	bf00      	nop
 800b418:	20001f1f 	.word	0x20001f1f

0800b41c <__sinit>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	4604      	mov	r4, r0
 800b420:	f7ff fff0 	bl	800b404 <__sinit_lock_acquire>
 800b424:	69a3      	ldr	r3, [r4, #24]
 800b426:	b11b      	cbz	r3, 800b430 <__sinit+0x14>
 800b428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b42c:	f7ff bff0 	b.w	800b410 <__sinit_lock_release>
 800b430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b434:	6523      	str	r3, [r4, #80]	; 0x50
 800b436:	4b13      	ldr	r3, [pc, #76]	; (800b484 <__sinit+0x68>)
 800b438:	4a13      	ldr	r2, [pc, #76]	; (800b488 <__sinit+0x6c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b43e:	42a3      	cmp	r3, r4
 800b440:	bf04      	itt	eq
 800b442:	2301      	moveq	r3, #1
 800b444:	61a3      	streq	r3, [r4, #24]
 800b446:	4620      	mov	r0, r4
 800b448:	f000 f820 	bl	800b48c <__sfp>
 800b44c:	6060      	str	r0, [r4, #4]
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 f81c 	bl	800b48c <__sfp>
 800b454:	60a0      	str	r0, [r4, #8]
 800b456:	4620      	mov	r0, r4
 800b458:	f000 f818 	bl	800b48c <__sfp>
 800b45c:	2200      	movs	r2, #0
 800b45e:	60e0      	str	r0, [r4, #12]
 800b460:	2104      	movs	r1, #4
 800b462:	6860      	ldr	r0, [r4, #4]
 800b464:	f7ff ff82 	bl	800b36c <std>
 800b468:	68a0      	ldr	r0, [r4, #8]
 800b46a:	2201      	movs	r2, #1
 800b46c:	2109      	movs	r1, #9
 800b46e:	f7ff ff7d 	bl	800b36c <std>
 800b472:	68e0      	ldr	r0, [r4, #12]
 800b474:	2202      	movs	r2, #2
 800b476:	2112      	movs	r1, #18
 800b478:	f7ff ff78 	bl	800b36c <std>
 800b47c:	2301      	movs	r3, #1
 800b47e:	61a3      	str	r3, [r4, #24]
 800b480:	e7d2      	b.n	800b428 <__sinit+0xc>
 800b482:	bf00      	nop
 800b484:	0800b8a4 	.word	0x0800b8a4
 800b488:	0800b3b5 	.word	0x0800b3b5

0800b48c <__sfp>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	4607      	mov	r7, r0
 800b490:	f7ff ffac 	bl	800b3ec <__sfp_lock_acquire>
 800b494:	4b1e      	ldr	r3, [pc, #120]	; (800b510 <__sfp+0x84>)
 800b496:	681e      	ldr	r6, [r3, #0]
 800b498:	69b3      	ldr	r3, [r6, #24]
 800b49a:	b913      	cbnz	r3, 800b4a2 <__sfp+0x16>
 800b49c:	4630      	mov	r0, r6
 800b49e:	f7ff ffbd 	bl	800b41c <__sinit>
 800b4a2:	3648      	adds	r6, #72	; 0x48
 800b4a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	d503      	bpl.n	800b4b4 <__sfp+0x28>
 800b4ac:	6833      	ldr	r3, [r6, #0]
 800b4ae:	b30b      	cbz	r3, 800b4f4 <__sfp+0x68>
 800b4b0:	6836      	ldr	r6, [r6, #0]
 800b4b2:	e7f7      	b.n	800b4a4 <__sfp+0x18>
 800b4b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b4b8:	b9d5      	cbnz	r5, 800b4f0 <__sfp+0x64>
 800b4ba:	4b16      	ldr	r3, [pc, #88]	; (800b514 <__sfp+0x88>)
 800b4bc:	60e3      	str	r3, [r4, #12]
 800b4be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4c2:	6665      	str	r5, [r4, #100]	; 0x64
 800b4c4:	f000 f847 	bl	800b556 <__retarget_lock_init_recursive>
 800b4c8:	f7ff ff96 	bl	800b3f8 <__sfp_lock_release>
 800b4cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4d4:	6025      	str	r5, [r4, #0]
 800b4d6:	61a5      	str	r5, [r4, #24]
 800b4d8:	2208      	movs	r2, #8
 800b4da:	4629      	mov	r1, r5
 800b4dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4e0:	f7fd fae6 	bl	8008ab0 <memset>
 800b4e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f0:	3468      	adds	r4, #104	; 0x68
 800b4f2:	e7d9      	b.n	800b4a8 <__sfp+0x1c>
 800b4f4:	2104      	movs	r1, #4
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f7ff ff62 	bl	800b3c0 <__sfmoreglue>
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	6030      	str	r0, [r6, #0]
 800b500:	2800      	cmp	r0, #0
 800b502:	d1d5      	bne.n	800b4b0 <__sfp+0x24>
 800b504:	f7ff ff78 	bl	800b3f8 <__sfp_lock_release>
 800b508:	230c      	movs	r3, #12
 800b50a:	603b      	str	r3, [r7, #0]
 800b50c:	e7ee      	b.n	800b4ec <__sfp+0x60>
 800b50e:	bf00      	nop
 800b510:	0800b8a4 	.word	0x0800b8a4
 800b514:	ffff0001 	.word	0xffff0001

0800b518 <_fwalk_reent>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	4606      	mov	r6, r0
 800b51e:	4688      	mov	r8, r1
 800b520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b524:	2700      	movs	r7, #0
 800b526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b52a:	f1b9 0901 	subs.w	r9, r9, #1
 800b52e:	d505      	bpl.n	800b53c <_fwalk_reent+0x24>
 800b530:	6824      	ldr	r4, [r4, #0]
 800b532:	2c00      	cmp	r4, #0
 800b534:	d1f7      	bne.n	800b526 <_fwalk_reent+0xe>
 800b536:	4638      	mov	r0, r7
 800b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53c:	89ab      	ldrh	r3, [r5, #12]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d907      	bls.n	800b552 <_fwalk_reent+0x3a>
 800b542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b546:	3301      	adds	r3, #1
 800b548:	d003      	beq.n	800b552 <_fwalk_reent+0x3a>
 800b54a:	4629      	mov	r1, r5
 800b54c:	4630      	mov	r0, r6
 800b54e:	47c0      	blx	r8
 800b550:	4307      	orrs	r7, r0
 800b552:	3568      	adds	r5, #104	; 0x68
 800b554:	e7e9      	b.n	800b52a <_fwalk_reent+0x12>

0800b556 <__retarget_lock_init_recursive>:
 800b556:	4770      	bx	lr

0800b558 <__retarget_lock_acquire_recursive>:
 800b558:	4770      	bx	lr

0800b55a <__retarget_lock_release_recursive>:
 800b55a:	4770      	bx	lr

0800b55c <__swhatbuf_r>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	460e      	mov	r6, r1
 800b560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b564:	2900      	cmp	r1, #0
 800b566:	b096      	sub	sp, #88	; 0x58
 800b568:	4614      	mov	r4, r2
 800b56a:	461d      	mov	r5, r3
 800b56c:	da07      	bge.n	800b57e <__swhatbuf_r+0x22>
 800b56e:	2300      	movs	r3, #0
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	89b3      	ldrh	r3, [r6, #12]
 800b574:	061a      	lsls	r2, r3, #24
 800b576:	d410      	bmi.n	800b59a <__swhatbuf_r+0x3e>
 800b578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57c:	e00e      	b.n	800b59c <__swhatbuf_r+0x40>
 800b57e:	466a      	mov	r2, sp
 800b580:	f000 f902 	bl	800b788 <_fstat_r>
 800b584:	2800      	cmp	r0, #0
 800b586:	dbf2      	blt.n	800b56e <__swhatbuf_r+0x12>
 800b588:	9a01      	ldr	r2, [sp, #4]
 800b58a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b58e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b592:	425a      	negs	r2, r3
 800b594:	415a      	adcs	r2, r3
 800b596:	602a      	str	r2, [r5, #0]
 800b598:	e7ee      	b.n	800b578 <__swhatbuf_r+0x1c>
 800b59a:	2340      	movs	r3, #64	; 0x40
 800b59c:	2000      	movs	r0, #0
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	b016      	add	sp, #88	; 0x58
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__smakebuf_r>:
 800b5a4:	898b      	ldrh	r3, [r1, #12]
 800b5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5a8:	079d      	lsls	r5, r3, #30
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	d507      	bpl.n	800b5c0 <__smakebuf_r+0x1c>
 800b5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	6163      	str	r3, [r4, #20]
 800b5bc:	b002      	add	sp, #8
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	ab01      	add	r3, sp, #4
 800b5c2:	466a      	mov	r2, sp
 800b5c4:	f7ff ffca 	bl	800b55c <__swhatbuf_r>
 800b5c8:	9900      	ldr	r1, [sp, #0]
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff f987 	bl	800a8e0 <_malloc_r>
 800b5d2:	b948      	cbnz	r0, 800b5e8 <__smakebuf_r+0x44>
 800b5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d8:	059a      	lsls	r2, r3, #22
 800b5da:	d4ef      	bmi.n	800b5bc <__smakebuf_r+0x18>
 800b5dc:	f023 0303 	bic.w	r3, r3, #3
 800b5e0:	f043 0302 	orr.w	r3, r3, #2
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	e7e3      	b.n	800b5b0 <__smakebuf_r+0xc>
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <__smakebuf_r+0x7c>)
 800b5ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	6020      	str	r0, [r4, #0]
 800b5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	6163      	str	r3, [r4, #20]
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	6120      	str	r0, [r4, #16]
 800b5fe:	b15b      	cbz	r3, 800b618 <__smakebuf_r+0x74>
 800b600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b604:	4630      	mov	r0, r6
 800b606:	f000 f8d1 	bl	800b7ac <_isatty_r>
 800b60a:	b128      	cbz	r0, 800b618 <__smakebuf_r+0x74>
 800b60c:	89a3      	ldrh	r3, [r4, #12]
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	f043 0301 	orr.w	r3, r3, #1
 800b616:	81a3      	strh	r3, [r4, #12]
 800b618:	89a0      	ldrh	r0, [r4, #12]
 800b61a:	4305      	orrs	r5, r0
 800b61c:	81a5      	strh	r5, [r4, #12]
 800b61e:	e7cd      	b.n	800b5bc <__smakebuf_r+0x18>
 800b620:	0800b3b5 	.word	0x0800b3b5

0800b624 <_malloc_usable_size_r>:
 800b624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b628:	1f18      	subs	r0, r3, #4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bfbc      	itt	lt
 800b62e:	580b      	ldrlt	r3, [r1, r0]
 800b630:	18c0      	addlt	r0, r0, r3
 800b632:	4770      	bx	lr

0800b634 <_raise_r>:
 800b634:	291f      	cmp	r1, #31
 800b636:	b538      	push	{r3, r4, r5, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	460d      	mov	r5, r1
 800b63c:	d904      	bls.n	800b648 <_raise_r+0x14>
 800b63e:	2316      	movs	r3, #22
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	f04f 30ff 	mov.w	r0, #4294967295
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b64a:	b112      	cbz	r2, 800b652 <_raise_r+0x1e>
 800b64c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b650:	b94b      	cbnz	r3, 800b666 <_raise_r+0x32>
 800b652:	4620      	mov	r0, r4
 800b654:	f000 f830 	bl	800b6b8 <_getpid_r>
 800b658:	462a      	mov	r2, r5
 800b65a:	4601      	mov	r1, r0
 800b65c:	4620      	mov	r0, r4
 800b65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b662:	f000 b817 	b.w	800b694 <_kill_r>
 800b666:	2b01      	cmp	r3, #1
 800b668:	d00a      	beq.n	800b680 <_raise_r+0x4c>
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	d103      	bne.n	800b676 <_raise_r+0x42>
 800b66e:	2316      	movs	r3, #22
 800b670:	6003      	str	r3, [r0, #0]
 800b672:	2001      	movs	r0, #1
 800b674:	e7e7      	b.n	800b646 <_raise_r+0x12>
 800b676:	2400      	movs	r4, #0
 800b678:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b67c:	4628      	mov	r0, r5
 800b67e:	4798      	blx	r3
 800b680:	2000      	movs	r0, #0
 800b682:	e7e0      	b.n	800b646 <_raise_r+0x12>

0800b684 <raise>:
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <raise+0xc>)
 800b686:	4601      	mov	r1, r0
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	f7ff bfd3 	b.w	800b634 <_raise_r>
 800b68e:	bf00      	nop
 800b690:	20000180 	.word	0x20000180

0800b694 <_kill_r>:
 800b694:	b538      	push	{r3, r4, r5, lr}
 800b696:	4d07      	ldr	r5, [pc, #28]	; (800b6b4 <_kill_r+0x20>)
 800b698:	2300      	movs	r3, #0
 800b69a:	4604      	mov	r4, r0
 800b69c:	4608      	mov	r0, r1
 800b69e:	4611      	mov	r1, r2
 800b6a0:	602b      	str	r3, [r5, #0]
 800b6a2:	f7f6 fadb 	bl	8001c5c <_kill>
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	d102      	bne.n	800b6b0 <_kill_r+0x1c>
 800b6aa:	682b      	ldr	r3, [r5, #0]
 800b6ac:	b103      	cbz	r3, 800b6b0 <_kill_r+0x1c>
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	bd38      	pop	{r3, r4, r5, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001f18 	.word	0x20001f18

0800b6b8 <_getpid_r>:
 800b6b8:	f7f6 bac8 	b.w	8001c4c <_getpid>

0800b6bc <__sread>:
 800b6bc:	b510      	push	{r4, lr}
 800b6be:	460c      	mov	r4, r1
 800b6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c4:	f000 f894 	bl	800b7f0 <_read_r>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	bfab      	itete	ge
 800b6cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6ce:	89a3      	ldrhlt	r3, [r4, #12]
 800b6d0:	181b      	addge	r3, r3, r0
 800b6d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6d6:	bfac      	ite	ge
 800b6d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6da:	81a3      	strhlt	r3, [r4, #12]
 800b6dc:	bd10      	pop	{r4, pc}

0800b6de <__swrite>:
 800b6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	461f      	mov	r7, r3
 800b6e4:	898b      	ldrh	r3, [r1, #12]
 800b6e6:	05db      	lsls	r3, r3, #23
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	d505      	bpl.n	800b6fc <__swrite+0x1e>
 800b6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f000 f868 	bl	800b7cc <_lseek_r>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	4632      	mov	r2, r6
 800b70a:	463b      	mov	r3, r7
 800b70c:	4628      	mov	r0, r5
 800b70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b712:	f000 b817 	b.w	800b744 <_write_r>

0800b716 <__sseek>:
 800b716:	b510      	push	{r4, lr}
 800b718:	460c      	mov	r4, r1
 800b71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71e:	f000 f855 	bl	800b7cc <_lseek_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	bf15      	itete	ne
 800b728:	6560      	strne	r0, [r4, #84]	; 0x54
 800b72a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b72e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b732:	81a3      	strheq	r3, [r4, #12]
 800b734:	bf18      	it	ne
 800b736:	81a3      	strhne	r3, [r4, #12]
 800b738:	bd10      	pop	{r4, pc}

0800b73a <__sclose>:
 800b73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73e:	f000 b813 	b.w	800b768 <_close_r>
	...

0800b744 <_write_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d07      	ldr	r5, [pc, #28]	; (800b764 <_write_r+0x20>)
 800b748:	4604      	mov	r4, r0
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	2200      	movs	r2, #0
 800b750:	602a      	str	r2, [r5, #0]
 800b752:	461a      	mov	r2, r3
 800b754:	f7f6 fab9 	bl	8001cca <_write>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_write_r+0x1e>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_write_r+0x1e>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	20001f18 	.word	0x20001f18

0800b768 <_close_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d06      	ldr	r5, [pc, #24]	; (800b784 <_close_r+0x1c>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	f7f6 fac5 	bl	8001d02 <_close>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_close_r+0x1a>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_close_r+0x1a>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20001f18 	.word	0x20001f18

0800b788 <_fstat_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	; (800b7a8 <_fstat_r+0x20>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f7f6 fac0 	bl	8001d1a <_fstat>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d102      	bne.n	800b7a4 <_fstat_r+0x1c>
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	b103      	cbz	r3, 800b7a4 <_fstat_r+0x1c>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20001f18 	.word	0x20001f18

0800b7ac <_isatty_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	; (800b7c8 <_isatty_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f6 fabf 	bl	8001d3a <_isatty>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_isatty_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_isatty_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20001f18 	.word	0x20001f18

0800b7cc <_lseek_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	; (800b7ec <_lseek_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f6 fab8 	bl	8001d50 <_lseek>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_lseek_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_lseek_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20001f18 	.word	0x20001f18

0800b7f0 <_read_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	; (800b810 <_read_r+0x20>)
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f6 fa46 	bl	8001c90 <_read>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_read_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_read_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20001f18 	.word	0x20001f18

0800b814 <_init>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	bf00      	nop
 800b818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81a:	bc08      	pop	{r3}
 800b81c:	469e      	mov	lr, r3
 800b81e:	4770      	bx	lr

0800b820 <_fini>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr
