
HybridRocketFC_Firmware_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008348  08008348  00018348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e8  080083e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f0  080083f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080083f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  200001e4  080085dc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d88  080085dc  00021d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017026  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003440  00000000  00000000  0003723a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0003a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931f  00000000  00000000  0003c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013624  00000000  00000000  000554bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9f9  00000000  00000000  00068ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f34dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  000f3530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008330 	.word	0x08008330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008330 	.word	0x08008330

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MPU9250_ReadRegister>:
#include "MPU9250.h"

/*
 * Low-Level Functions
 */
HAL_StatusTypeDef MPU9250_ReadRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af04      	add	r7, sp, #16
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	460b      	mov	r3, r1
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	b29a      	uxth	r2, r3
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	2301      	movs	r3, #1
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	21d0      	movs	r1, #208	; 0xd0
 80005a0:	f001 fa00 	bl	80019a4 <HAL_I2C_Mem_Read>
 80005a4:	4603      	mov	r3, r0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <MPU9250_ReadRegisters>:

HAL_StatusTypeDef MPU9250_ReadRegisters (MPU9250 *dev, uint8_t reg, uint8_t *data, uint8_t length) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b088      	sub	sp, #32
 80005b2:	af04      	add	r7, sp, #16
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	607a      	str	r2, [r7, #4]
 80005b8:	461a      	mov	r2, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	72fb      	strb	r3, [r7, #11]
 80005be:	4613      	mov	r3, r2
 80005c0:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	7afb      	ldrb	r3, [r7, #11]
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	f04f 31ff 	mov.w	r1, #4294967295
 80005d2:	9102      	str	r1, [sp, #8]
 80005d4:	9301      	str	r3, [sp, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	21d0      	movs	r1, #208	; 0xd0
 80005de:	f001 f9e1 	bl	80019a4 <HAL_I2C_Mem_Read>
 80005e2:	4603      	mov	r3, r0
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <MPU9250_WriteRegister>:

HAL_StatusTypeDef MPU9250_WriteRegister (MPU9250 *dev, uint8_t reg, uint8_t *data) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	460b      	mov	r3, r1
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write( dev-> i2cHandle, MPU9250_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	7afb      	ldrb	r3, [r7, #11]
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2301      	movs	r3, #1
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	21d0      	movs	r1, #208	; 0xd0
 8000614:	f001 f8cc 	bl	80017b0 <HAL_I2C_Mem_Write>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <MPU9250_Init>:

uint8_t MPU9250_Init (MPU9250 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = i2cHandle;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	601a      	str	r2, [r3, #0]

	dev->acc_mps2[0] = 0.0f;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f04f 0200 	mov.w	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
	dev->acc_mps2[1] = 0.0f;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
	dev->acc_mps2[2] = 0.0f;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f04f 0200 	mov.w	r2, #0
 8000648:	60da      	str	r2, [r3, #12]

	dev->temp_C = 0.0f;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

	uint8_t errNum = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	uint8_t regData;
	status = MPU9250_ReadRegister( dev, MPU9250_WHO_AM_I, &regData);
 8000656:	f107 030d 	add.w	r3, r7, #13
 800065a:	461a      	mov	r2, r3
 800065c:	2175      	movs	r1, #117	; 0x75
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff8a 	bl	8000578 <MPU9250_ReadRegister>
 8000664:	4603      	mov	r3, r0
 8000666:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf14      	ite	ne
 800066e:	2301      	movne	r3, #1
 8000670:	2300      	moveq	r3, #0
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	4413      	add	r3, r2
 800067a:	73fb      	strb	r3, [r7, #15]
	if (regData != MPU9250_DEVICE_ID) {
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	2b71      	cmp	r3, #113	; 0x71
 8000680:	d001      	beq.n	8000686 <MPU9250_Init+0x64>
		return 255; // Device has unexpected ID
 8000682:	23ff      	movs	r3, #255	; 0xff
 8000684:	e0f3      	b.n	800086e <MPU9250_Init+0x24c>
	}

	/* Reset chip */
	regData = 0x80; // SLEEP = 1 (p. 40)
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_PWR_MGMT_1, &regData);
 800068a:	f107 030d 	add.w	r3, r7, #13
 800068e:	461a      	mov	r2, r3
 8000690:	216b      	movs	r1, #107	; 0x6b
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ffaa 	bl	80005ec <MPU9250_WriteRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	bf14      	ite	ne
 80006a2:	2301      	movne	r3, #1
 80006a4:	2300      	moveq	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4413      	add	r3, r2
 80006ae:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 fc65 	bl	8000f80 <HAL_Delay>
	/* Wake up chip. */
	regData = 0x01; // SLEEP = 0 (p. 40), CLOCK reference is gyro
 80006b6:	2301      	movs	r3, #1
 80006b8:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_PWR_MGMT_1, &regData);
 80006ba:	f107 030d 	add.w	r3, r7, #13
 80006be:	461a      	mov	r2, r3
 80006c0:	216b      	movs	r1, #107	; 0x6b
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff92 	bl	80005ec <MPU9250_WriteRegister>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	4413      	add	r3, r2
 80006de:	73fb      	strb	r3, [r7, #15]
	/* Config. Gyro. */
	regData = 0x04; // DLPF_CFG = 4 20Hz(p. 13)
 80006e0:	2304      	movs	r3, #4
 80006e2:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_CONFIG, &regData);
 80006e4:	f107 030d 	add.w	r3, r7, #13
 80006e8:	461a      	mov	r2, r3
 80006ea:	211a      	movs	r1, #26
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff ff7d 	bl	80005ec <MPU9250_WriteRegister>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4413      	add	r3, r2
 8000708:	73fb      	strb	r3, [r7, #15]
	regData = 0x08; // GYRO_FS_SEL = 01 +-500dps (p. 14)
 800070a:	2308      	movs	r3, #8
 800070c:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_GYRO_CONFIG, &regData);
 800070e:	f107 030d 	add.w	r3, r7, #13
 8000712:	461a      	mov	r2, r3
 8000714:	211b      	movs	r1, #27
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ff68 	bl	80005ec <MPU9250_WriteRegister>
 800071c:	4603      	mov	r3, r0
 800071e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000720:	7bbb      	ldrb	r3, [r7, #14]
 8000722:	2b00      	cmp	r3, #0
 8000724:	bf14      	ite	ne
 8000726:	2301      	movne	r3, #1
 8000728:	2300      	moveq	r3, #0
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4413      	add	r3, r2
 8000732:	73fb      	strb	r3, [r7, #15]
	/* Config. Accel. */
	regData = 0x08; // ACCEL_FS_SEL = 01 +-4g (p. 14)
 8000734:	2308      	movs	r3, #8
 8000736:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_ACCEL_CONFIG, &regData);
 8000738:	f107 030d 	add.w	r3, r7, #13
 800073c:	461a      	mov	r2, r3
 800073e:	211c      	movs	r1, #28
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff53 	bl	80005ec <MPU9250_WriteRegister>
 8000746:	4603      	mov	r3, r0
 8000748:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	461a      	mov	r2, r3
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	4413      	add	r3, r2
 800075c:	73fb      	strb	r3, [r7, #15]
	regData = 0x04; // A_DLPFCFG = 4 21Hz(p. 15)
 800075e:	2304      	movs	r3, #4
 8000760:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_ACCEL_CONFIG_2, &regData);
 8000762:	f107 030d 	add.w	r3, r7, #13
 8000766:	461a      	mov	r2, r3
 8000768:	211d      	movs	r1, #29
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ff3e 	bl	80005ec <MPU9250_WriteRegister>
 8000770:	4603      	mov	r3, r0
 8000772:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000774:	7bbb      	ldrb	r3, [r7, #14]
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	4413      	add	r3, r2
 8000786:	73fb      	strb	r3, [r7, #15]
	/* Config. Mag. */
	regData = 0x22; // BYPASS_EN, LATCH_INT_EN
 8000788:	2322      	movs	r3, #34	; 0x22
 800078a:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_INT_PIN_CFG, &regData);
 800078c:	f107 030d 	add.w	r3, r7, #13
 8000790:	461a      	mov	r2, r3
 8000792:	2137      	movs	r1, #55	; 0x37
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff29 	bl	80005ec <MPU9250_WriteRegister>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	bf14      	ite	ne
 80007a4:	2301      	movne	r3, #1
 80007a6:	2300      	moveq	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	4413      	add	r3, r2
 80007b0:	73fb      	strb	r3, [r7, #15]
	regData = 0x1F; // Fuse ROM access mode
 80007b2:	231f      	movs	r3, #31
 80007b4:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, 0x0A, &regData); //CNTL1_AD
 80007b6:	f107 030d 	add.w	r3, r7, #13
 80007ba:	461a      	mov	r2, r3
 80007bc:	210a      	movs	r1, #10
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ff14 	bl	80005ec <MPU9250_WriteRegister>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80007c8:	7bbb      	ldrb	r3, [r7, #14]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	4413      	add	r3, r2
 80007da:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 80007dc:	2064      	movs	r0, #100	; 0x64
 80007de:	f000 fbcf 	bl	8000f80 <HAL_Delay>
	//READ FROM MAG FOR SENSITIVITY ADJ.
	//asax = (readBuffer()-128)*0.5/128+1;
	//asay = (readBuffer()-128)*0.5/128+1;
	//asaz = (readBuffer()-128)*0.5/128+1;
	regData = 0x00; // Power down mode
 80007e2:	2300      	movs	r3, #0
 80007e4:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, 0x0A, &regData); //CNTL1_AD
 80007e6:	f107 030d 	add.w	r3, r7, #13
 80007ea:	461a      	mov	r2, r3
 80007ec:	210a      	movs	r1, #10
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fefc 	bl	80005ec <MPU9250_WriteRegister>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	4413      	add	r3, r2
 800080a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f000 fbb7 	bl	8000f80 <HAL_Delay>
	regData = 0x16; // Continuous mode
 8000812:	2316      	movs	r3, #22
 8000814:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, 0x0A, &regData); //CNTL1_AD
 8000816:	f107 030d 	add.w	r3, r7, #13
 800081a:	461a      	mov	r2, r3
 800081c:	210a      	movs	r1, #10
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fee4 	bl	80005ec <MPU9250_WriteRegister>
 8000824:	4603      	mov	r3, r0
 8000826:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	4413      	add	r3, r2
 800083a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait for mode change
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	f000 fb9f 	bl	8000f80 <HAL_Delay>
	/* Enable the Int pin */
	regData = 0x01; // RAW_RDY_EN = 1 (p. 30)
 8000842:	2301      	movs	r3, #1
 8000844:	737b      	strb	r3, [r7, #13]
	status = MPU9250_WriteRegister (dev, MPU9250_INT_ENABLE, &regData);
 8000846:	f107 030d 	add.w	r3, r7, #13
 800084a:	461a      	mov	r2, r3
 800084c:	2138      	movs	r1, #56	; 0x38
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fecc 	bl	80005ec <MPU9250_WriteRegister>
 8000854:	4603      	mov	r3, r0
 8000856:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000858:	7bbb      	ldrb	r3, [r7, #14]
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf14      	ite	ne
 800085e:	2301      	movne	r3, #1
 8000860:	2300      	moveq	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4413      	add	r3, r2
 800086a:	73fb      	strb	r3, [r7, #15]

	return errNum;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <MPU9250_ClearInt>:

HAL_StatusTypeDef MPU9250_ClearInt ( MPU9250 *dev ) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	uint8_t regData;
	regData = 0x00;
 800087e:	2300      	movs	r3, #0
 8000880:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = MPU9250_WriteRegister (dev, MPU9250_INT_STATUS, &regData);
 8000882:	f107 030e 	add.w	r3, r7, #14
 8000886:	461a      	mov	r2, r3
 8000888:	213a      	movs	r1, #58	; 0x3a
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff feae 	bl	80005ec <MPU9250_WriteRegister>
 8000890:	4603      	mov	r3, r0
 8000892:	73fb      	strb	r3, [r7, #15]
	return status;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <MPU9250_ReadTemp>:

HAL_StatusTypeDef MPU9250_ReadTemp ( MPU9250 *dev ) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint8_t regData[2];
	HAL_StatusTypeDef status = MPU9250_ReadRegisters(dev, MPU9250_TEMP_OUT_H, regData, 2);
 80008a8:	f107 0208 	add.w	r2, r7, #8
 80008ac:	2302      	movs	r3, #2
 80008ae:	2141      	movs	r1, #65	; 0x41
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe7c 	bl	80005ae <MPU9250_ReadRegisters>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]
	int16_t tempRaw = (((regData[0] & 0x0F) << 4) | regData[1]);
 80008ba:	7a3b      	ldrb	r3, [r7, #8]
 80008bc:	011b      	lsls	r3, r3, #4
 80008be:	b21b      	sxth	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	7a7b      	ldrb	r3, [r7, #9]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	81bb      	strh	r3, [r7, #12]
	dev->temp_C = ((float)tempRaw - 0.0f)/321.0f + 21.0f;
 80008cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008d0:	ee07 3a90 	vmov	s15, r3
 80008d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008d8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80008f8 <MPU9250_ReadTemp+0x58>
 80008dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e0:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80008e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	edc3 7a04 	vstr	s15, [r3, #16]
	return status;
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	43a08000 	.word	0x43a08000

080008fc <MPU9250_ReadAccel>:

HAL_StatusTypeDef MPU9250_ReadAccel ( MPU9250 *dev ) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint8_t regData[6];
	HAL_StatusTypeDef status = MPU9250_ReadRegisters(dev, MPU9250_ACCEL_XOUT_H, regData, 6);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	2306      	movs	r3, #6
 800090a:	213b      	movs	r1, #59	; 0x3b
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe4e 	bl	80005ae <MPU9250_ReadRegisters>
 8000912:	4603      	mov	r3, r0
 8000914:	75fb      	strb	r3, [r7, #23]
	int16_t accelRawSigned[3];
	accelRawSigned[0] = (regData[0] << 8) | regData[1];
 8000916:	7c3b      	ldrb	r3, [r7, #16]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	7c7b      	ldrb	r3, [r7, #17]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21b      	sxth	r3, r3
 8000924:	813b      	strh	r3, [r7, #8]
	accelRawSigned[1] = (regData[2] << 8) | regData[3];
 8000926:	7cbb      	ldrb	r3, [r7, #18]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	7cfb      	ldrb	r3, [r7, #19]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21b      	sxth	r3, r3
 8000934:	817b      	strh	r3, [r7, #10]
	accelRawSigned[2] = (regData[4] << 8) | regData[5];
 8000936:	7d3b      	ldrb	r3, [r7, #20]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	b21b      	sxth	r3, r3
 8000940:	4313      	orrs	r3, r2
 8000942:	b21b      	sxth	r3, r3
 8000944:	81bb      	strh	r3, [r7, #12]
	// Range +- 4G
	dev->acc_mps2[0] = 9.81f * 0.000122070f * accelRawSigned[0];
 8000946:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000952:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80009a0 <MPU9250_ReadAccel+0xa4>
 8000956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc_mps2[1] = 9.81f * 0.000122070f * accelRawSigned[1];
 8000960:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000964:	ee07 3a90 	vmov	s15, r3
 8000968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800096c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80009a0 <MPU9250_ReadAccel+0xa4>
 8000970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc_mps2[2] = 9.81f * 0.000122070f * accelRawSigned[2];
 800097a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000986:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009a0 <MPU9250_ReadAccel+0xa4>
 800098a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	edc3 7a03 	vstr	s15, [r3, #12]
	return status;
 8000994:	7dfb      	ldrb	r3, [r7, #23]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	3a9cf5a9 	.word	0x3a9cf5a9

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b092      	sub	sp, #72	; 0x48
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fa77 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f845 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 f8d9 	bl	8000b68 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009b6:	f000 f8a9 	bl	8000b0c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80009ba:	f006 fb35 	bl	8007028 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_Init(&mpu, &hi2c1);
 80009be:	491b      	ldr	r1, [pc, #108]	; (8000a2c <main+0x88>)
 80009c0:	481b      	ldr	r0, [pc, #108]	; (8000a30 <main+0x8c>)
 80009c2:	f7ff fe2e 	bl	8000622 <MPU9250_Init>
  uint32_t timerLog;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mpuDataReady = 1;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <main+0x90>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if ( mpuDataReady ) {
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0x90>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00e      	beq.n	80009f2 <main+0x4e>
	  MPU9250_ReadTemp( &mpu );
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <main+0x8c>)
 80009d6:	f7ff ff63 	bl	80008a0 <MPU9250_ReadTemp>
	  MPU9250_ReadAccel( &mpu );
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <main+0x8c>)
 80009dc:	f7ff ff8e 	bl	80008fc <MPU9250_ReadAccel>
	  HAL_Delay(10);
 80009e0:	200a      	movs	r0, #10
 80009e2:	f000 facd 	bl	8000f80 <HAL_Delay>
	  mpuDataReady = 0;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <main+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	  MPU9250_ClearInt( &mpu );
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <main+0x8c>)
 80009ee:	f7ff ff42 	bl	8000876 <MPU9250_ClearInt>
	}
    if ( (HAL_GetTick() - timerLog) >= LOG_DELAY ) {
 80009f2:	f000 fab9 	bl	8000f68 <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	2bc7      	cmp	r3, #199	; 0xc7
 80009fe:	d9e5      	bls.n	80009cc <main+0x28>
	  uint8_t usbBufLen = snprintf( usbBuf, 64, "Testing!\r\n" );
 8000a00:	463b      	mov	r3, r7
 8000a02:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <main+0x94>)
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4618      	mov	r0, r3
 8000a08:	f007 f850 	bl	8007aac <sniprintf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  CDC_Transmit_FS( (uint8_t*) usbBuf, usbBufLen );
 8000a12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 fbc1 	bl	80071a4 <CDC_Transmit_FS>
	  timerLog += LOG_DELAY;
 8000a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a24:	33c8      	adds	r3, #200	; 0xc8
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
    if ( mpuDataReady ) {
 8000a28:	e7d0      	b.n	80009cc <main+0x28>
 8000a2a:	bf00      	nop
 8000a2c:	20000430 	.word	0x20000430
 8000a30:	20000484 	.word	0x20000484
 8000a34:	20000498 	.word	0x20000498
 8000a38:	08008348 	.word	0x08008348

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	; 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f007 f826 	bl	8007a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000aac:	230f      	movs	r3, #15
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ab0:	2390      	movs	r3, #144	; 0x90
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ab8:	2305      	movs	r3, #5
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fe73 	bl	80037ac <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000acc:	f000 f8ca 	bl	8000c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f8d5 	bl	8003c9c <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000af8:	f000 f8b4 	bl	8000c64 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	; 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_I2C1_Init+0x54>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MX_I2C1_Init+0x58>)
 8000b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_I2C1_Init+0x50>)
 8000b4a:	f000 fced 	bl	8001528 <HAL_I2C_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b54:	f000 f886 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000430 	.word	0x20000430
 8000b60:	40005400 	.word	0x40005400
 8000b64:	00061a80 	.word	0x00061a80

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a33      	ldr	r2, [pc, #204]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_GPIO_Init+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_GPIO_Init+0xf0>)
 8000bf6:	f000 fc7d 	bl	80014f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_GPIO_Init+0xf0>)
 8000c14:	f000 faea 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_GPIO_Init+0xf4>)
 8000c2c:	f000 fade 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_INT_Pin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_GPIO_Init+0xf8>)
 8000c48:	f000 fad0 	bl	80011ec <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <Error_Handler+0x8>
	...

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_I2C_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d02:	2312      	movs	r3, #18
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <HAL_I2C_MspInit+0x8c>)
 8000d1a:	f000 fa67 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_I2C_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40005400 	.word	0x40005400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8d0 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <OTG_FS_IRQHandler+0x10>)
 8000daa:	f001 fccc 	bl	8002746 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20001970 	.word	0x20001970

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f006 fe2e 	bl	8007a48 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20020000 	.word	0x20020000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000200 	.word	0x20000200
 8000e20:	20001d88 	.word	0x20001d88

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f006 fded 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fd93 	bl	80009a4 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000e8c:	080083f8 	.word	0x080083f8
  ldr r2, =_sbss
 8000e90:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000e94:	20001d88 	.word	0x20001d88

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f94f 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fece 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f967 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f92f 	bl	800117e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	2000049c 	.word	0x2000049c

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000049c 	.word	0x2000049c

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff29 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff3e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff8e 	bl	80010bc <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5d 	bl	8001068 <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff31 	bl	800102c <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa2 	bl	8001124 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e159      	b.n	80014bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 8148 	bne.w	80014b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80a2 	beq.w	80014b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a56      	ldr	r2, [pc, #344]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a52      	ldr	r2, [pc, #328]	; (80014d8 <HAL_GPIO_Init+0x2ec>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_GPIO_Init+0x2f0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x202>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <HAL_GPIO_Init+0x2f4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x1fe>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a47      	ldr	r2, [pc, #284]	; (80014e4 <HAL_GPIO_Init+0x2f8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a46      	ldr	r2, [pc, #280]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x1f6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <HAL_GPIO_Init+0x300>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x1f2>
 80013da:	2304      	movs	r3, #4
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x204>
 80013de:	2307      	movs	r3, #7
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x204>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x204>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x204>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x204>
 80013ee:	2300      	movs	r3, #0
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	f002 0203 	and.w	r2, r2, #3
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	; (80014d8 <HAL_GPIO_Init+0x2ec>)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <HAL_GPIO_Init+0x304>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001432:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <HAL_GPIO_Init+0x304>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_GPIO_Init+0x304>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145c:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_GPIO_Init+0x304>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_GPIO_Init+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <HAL_GPIO_Init+0x304>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_GPIO_Init+0x304>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_GPIO_Init+0x304>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	f67f aea2 	bls.w	8001208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
 8001500:	4613      	mov	r3, r2
 8001502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	041a      	lsls	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e12b      	b.n	8001792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fbb6 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2224      	movs	r2, #36	; 0x24
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800158c:	f002 fd2e 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 8001590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a81      	ldr	r2, [pc, #516]	; (800179c <HAL_I2C_Init+0x274>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d807      	bhi.n	80015ac <HAL_I2C_Init+0x84>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a80      	ldr	r2, [pc, #512]	; (80017a0 <HAL_I2C_Init+0x278>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e006      	b.n	80015ba <HAL_I2C_Init+0x92>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a7d      	ldr	r2, [pc, #500]	; (80017a4 <HAL_I2C_Init+0x27c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0e7      	b.n	8001792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4a78      	ldr	r2, [pc, #480]	; (80017a8 <HAL_I2C_Init+0x280>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_I2C_Init+0x274>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d802      	bhi.n	80015fc <HAL_I2C_Init+0xd4>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3301      	adds	r3, #1
 80015fa:	e009      	b.n	8001610 <HAL_I2C_Init+0xe8>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_I2C_Init+0x284>)
 8001608:	fba2 2303 	umull	r2, r3, r2, r3
 800160c:	099b      	lsrs	r3, r3, #6
 800160e:	3301      	adds	r3, #1
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	430b      	orrs	r3, r1
 8001616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	495c      	ldr	r1, [pc, #368]	; (800179c <HAL_I2C_Init+0x274>)
 800162c:	428b      	cmp	r3, r1
 800162e:	d819      	bhi.n	8001664 <HAL_I2C_Init+0x13c>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e59      	subs	r1, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fbb1 f3f3 	udiv	r3, r1, r3
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001644:	400b      	ands	r3, r1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_I2C_Init+0x138>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1e59      	subs	r1, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fbb1 f3f3 	udiv	r3, r1, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	e051      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001660:	2304      	movs	r3, #4
 8001662:	e04f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_I2C_Init+0x168>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	e012      	b.n	80016b6 <HAL_I2C_Init+0x18e>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1e58      	subs	r0, r3, #1
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	0099      	lsls	r1, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a6:	3301      	adds	r3, #1
 80016a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_Init+0x196>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e022      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10e      	bne.n	80016e4 <HAL_I2C_Init+0x1bc>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1e58      	subs	r0, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	440b      	add	r3, r1
 80016d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e2:	e00f      	b.n	8001704 <HAL_I2C_Init+0x1dc>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	0099      	lsls	r1, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fa:	3301      	adds	r3, #1
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	6809      	ldr	r1, [r1, #0]
 8001708:	4313      	orrs	r3, r2
 800170a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6911      	ldr	r1, [r2, #16]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68d2      	ldr	r2, [r2, #12]
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	430b      	orrs	r3, r1
 8001746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	000186a0 	.word	0x000186a0
 80017a0:	001e847f 	.word	0x001e847f
 80017a4:	003d08ff 	.word	0x003d08ff
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	10624dd3 	.word	0x10624dd3

080017b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	817b      	strh	r3, [r7, #10]
 80017c2:	460b      	mov	r3, r1
 80017c4:	813b      	strh	r3, [r7, #8]
 80017c6:	4613      	mov	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017ca:	f7ff fbcd 	bl	8000f68 <HAL_GetTick>
 80017ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b20      	cmp	r3, #32
 80017da:	f040 80d9 	bne.w	8001990 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2319      	movs	r3, #25
 80017e4:	2201      	movs	r2, #1
 80017e6:	496d      	ldr	r1, [pc, #436]	; (800199c <HAL_I2C_Mem_Write+0x1ec>)
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fc7f 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
 80017f6:	e0cc      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_I2C_Mem_Write+0x56>
 8001802:	2302      	movs	r3, #2
 8001804:	e0c5      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d007      	beq.n	800182c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2221      	movs	r2, #33	; 0x21
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800185c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a4d      	ldr	r2, [pc, #308]	; (80019a0 <HAL_I2C_Mem_Write+0x1f0>)
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800186e:	88f8      	ldrh	r0, [r7, #6]
 8001870:	893a      	ldrh	r2, [r7, #8]
 8001872:	8979      	ldrh	r1, [r7, #10]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	9301      	str	r3, [sp, #4]
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4603      	mov	r3, r0
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fab6 	bl	8001df0 <I2C_RequestMemoryWrite>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d052      	beq.n	8001930 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e081      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 fd00 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00d      	beq.n	80018ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d107      	bne.n	80018b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	781a      	ldrb	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b01      	subs	r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11b      	bne.n	8001930 <HAL_I2C_Mem_Write+0x180>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d017      	beq.n	8001930 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	781a      	ldrb	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1aa      	bne.n	800188e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fcec 	bl	800231a <I2C_WaitOnBTFFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00d      	beq.n	8001964 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2b04      	cmp	r3, #4
 800194e:	d107      	bne.n	8001960 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e016      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	00100002 	.word	0x00100002
 80019a0:	ffff0000 	.word	0xffff0000

080019a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019be:	f7ff fad3 	bl	8000f68 <HAL_GetTick>
 80019c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	f040 8208 	bne.w	8001de2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2319      	movs	r3, #25
 80019d8:	2201      	movs	r2, #1
 80019da:	497b      	ldr	r1, [pc, #492]	; (8001bc8 <HAL_I2C_Mem_Read+0x224>)
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 fb85 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	e1fb      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Mem_Read+0x56>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e1f4      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d007      	beq.n	8001a20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2222      	movs	r2, #34	; 0x22
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	; (8001bcc <HAL_I2C_Mem_Read+0x228>)
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a62:	88f8      	ldrh	r0, [r7, #6]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	8979      	ldrh	r1, [r7, #10]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4603      	mov	r3, r0
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 fa52 	bl	8001f1c <I2C_RequestMemoryRead>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1b0      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d113      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	623b      	str	r3, [r7, #32]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e184      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d11b      	bne.n	8001af2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e164      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d11b      	bne.n	8001b32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	e144      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b48:	e138      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	f200 80f1 	bhi.w	8001d36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d123      	bne.n	8001ba4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fc1b 	bl	800239c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e139      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba2:	e10b      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d14e      	bne.n	8001c4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4906      	ldr	r1, [pc, #24]	; (8001bd0 <HAL_I2C_Mem_Read+0x22c>)
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fa98 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e10e      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
 8001bc6:	bf00      	nop
 8001bc8:	00100002 	.word	0x00100002
 8001bcc:	ffff0000 	.word	0xffff0000
 8001bd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c48:	e0b8      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	2200      	movs	r2, #0
 8001c52:	4966      	ldr	r1, [pc, #408]	; (8001dec <HAL_I2C_Mem_Read+0x448>)
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 fa49 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0bf      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	2200      	movs	r2, #0
 8001cae:	494f      	ldr	r1, [pc, #316]	; (8001dec <HAL_I2C_Mem_Read+0x448>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fa1b 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e091      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d34:	e042      	b.n	8001dbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 fb2e 	bl	800239c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e04c      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d118      	bne.n	8001dbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f47f aec2 	bne.w	8001b4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	00010004 	.word	0x00010004

08001df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	460b      	mov	r3, r1
 8001e04:	813b      	strh	r3, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f960 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00d      	beq.n	8001e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e40:	d103      	bne.n	8001e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e05f      	b.n	8001f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	492d      	ldr	r1, [pc, #180]	; (8001f18 <I2C_RequestMemoryWrite+0x128>)
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f998 	bl	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e04c      	b.n	8001f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fa02 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d107      	bne.n	8001eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e02b      	b.n	8001f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ebc:	893b      	ldrh	r3, [r7, #8]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	611a      	str	r2, [r3, #16]
 8001ec6:	e021      	b.n	8001f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ec8:	893b      	ldrh	r3, [r7, #8]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9dc 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e005      	b.n	8001f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f02:	893b      	ldrh	r3, [r7, #8]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	00010002 	.word	0x00010002

08001f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	817b      	strh	r3, [r7, #10]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	813b      	strh	r3, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f8c2 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f7c:	d103      	bne.n	8001f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0aa      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	6a3a      	ldr	r2, [r7, #32]
 8001f9e:	4952      	ldr	r1, [pc, #328]	; (80020e8 <I2C_RequestMemoryRead+0x1cc>)
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f8fa 	bl	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e097      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc8:	6a39      	ldr	r1, [r7, #32]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f964 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d107      	bne.n	8001fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e076      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ff8:	893b      	ldrh	r3, [r7, #8]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	e021      	b.n	8002048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002004:	893b      	ldrh	r3, [r7, #8]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	b29b      	uxth	r3, r3
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f93e 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b04      	cmp	r3, #4
 8002028:	d107      	bne.n	800203a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e050      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f923 	bl	8002298 <I2C_WaitOnTXEFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e035      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	2200      	movs	r2, #0
 800208c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f82b 	bl	80020ec <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020aa:	d103      	bne.n	80020b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e013      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020b8:	897b      	ldrh	r3, [r7, #10]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	6a3a      	ldr	r2, [r7, #32]
 80020cc:	4906      	ldr	r1, [pc, #24]	; (80020e8 <I2C_RequestMemoryRead+0x1cc>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f863 	bl	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00010002 	.word	0x00010002

080020ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020fc:	e025      	b.n	800214a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d021      	beq.n	800214a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002106:	f7fe ff2f 	bl	8000f68 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d302      	bcc.n	800211c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d116      	bne.n	800214a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f043 0220 	orr.w	r2, r3, #32
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e023      	b.n	8002192 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10d      	bne.n	8002170 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4013      	ands	r3, r2
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	bf0c      	ite	eq
 8002166:	2301      	moveq	r3, #1
 8002168:	2300      	movne	r3, #0
 800216a:	b2db      	uxtb	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	e00c      	b.n	800218a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4013      	ands	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	429a      	cmp	r2, r3
 800218e:	d0b6      	beq.n	80020fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021a8:	e051      	b.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d123      	bne.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e046      	b.n	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d021      	beq.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7fe fead 	bl	8000f68 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d116      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0220 	orr.w	r2, r3, #32
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e020      	b.n	8002290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10c      	bne.n	8002272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	e00b      	b.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	43da      	mvns	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4013      	ands	r3, r2
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf14      	ite	ne
 8002284:	2301      	movne	r3, #1
 8002286:	2300      	moveq	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d18d      	bne.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022a4:	e02d      	b.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8ce 	bl	8002448 <I2C_IsAcknowledgeFailed>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e02d      	b.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d021      	beq.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022be:	f7fe fe53 	bl	8000f68 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d116      	bne.n	8002302 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0220 	orr.w	r2, r3, #32
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d1ca      	bne.n	80022a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002326:	e02d      	b.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f88d 	bl	8002448 <I2C_IsAcknowledgeFailed>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e02d      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d021      	beq.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002340:	f7fe fe12 	bl	8000f68 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d302      	bcc.n	8002356 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f043 0220 	orr.w	r2, r3, #32
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1ca      	bne.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023a8:	e042      	b.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d119      	bne.n	80023ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0210 	mvn.w	r2, #16
 80023c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e029      	b.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ec:	f7fe fdbc 	bl	8000f68 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d302      	bcc.n	8002402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d116      	bne.n	8002430 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e007      	b.n	8002440 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d1b5      	bne.n	80023aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d11b      	bne.n	8002498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a8:	b08f      	sub	sp, #60	; 0x3c
 80024aa:	af0a      	add	r7, sp, #40	; 0x28
 80024ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e10f      	b.n	80026d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f004 ffae 	bl	8007434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 fea1 	bl	800423e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	687e      	ldr	r6, [r7, #4]
 8002504:	466d      	mov	r5, sp
 8002506:	f106 0410 	add.w	r4, r6, #16
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002516:	e885 0003 	stmia.w	r5, {r0, r1}
 800251a:	1d33      	adds	r3, r6, #4
 800251c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f001 fd78 	bl	8004014 <USB_CoreInit>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0d0      	b.n	80026d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fe8f 	bl	8004260 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e04a      	b.n	80025de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	333d      	adds	r3, #61	; 0x3d
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	333c      	adds	r3, #60	; 0x3c
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	b298      	uxth	r0, r3
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3342      	adds	r3, #66	; 0x42
 8002584:	4602      	mov	r2, r0
 8002586:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	333f      	adds	r3, #63	; 0x3f
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3344      	adds	r3, #68	; 0x44
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3348      	adds	r3, #72	; 0x48
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3350      	adds	r3, #80	; 0x50
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	3301      	adds	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3af      	bcc.n	8002548 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e044      	b.n	8002678 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002646:	7bfa      	ldrb	r2, [r7, #15]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3301      	adds	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3b5      	bcc.n	80025ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	687e      	ldr	r6, [r7, #4]
 800268a:	466d      	mov	r5, sp
 800268c:	f106 0410 	add.w	r4, r6, #16
 8002690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269c:	e885 0003 	stmia.w	r5, {r0, r1}
 80026a0:	1d33      	adds	r3, r6, #4
 80026a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f001 fe27 	bl	80042f8 <USB_DevInit>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00d      	b.n	80026d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 fea3 	bl	800541c <USB_DevDisconnect>

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_PCD_Start+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e020      	b.n	800273e <HAL_PCD_Start+0x5e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	2b01      	cmp	r3, #1
 800270a:	d109      	bne.n	8002720 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002710:	2b01      	cmp	r3, #1
 8002712:	d005      	beq.n	8002720 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fd79 	bl	800421c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fe53 	bl	80053da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002746:	b590      	push	{r4, r7, lr}
 8002748:	b08d      	sub	sp, #52	; 0x34
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f002 ff11 	bl	8005584 <USB_GetMode>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 839d 	bne.w	8002ea4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f002 fe75 	bl	800545e <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8393 	beq.w	8002ea2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f002 fe6c 	bl	800545e <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f002 0202 	and.w	r2, r2, #2
 800279e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f002 fe5a 	bl	800545e <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d161      	bne.n	8002878 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0210 	bic.w	r2, r2, #16
 80027c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 020f 	and.w	r2, r3, #15
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	0c5b      	lsrs	r3, r3, #17
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d124      	bne.n	800283a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d035      	beq.n	8002868 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	6a38      	ldr	r0, [r7, #32]
 8002810:	f002 fc91 	bl	8005136 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002820:	441a      	add	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	441a      	add	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	619a      	str	r2, [r3, #24]
 8002838:	e016      	b.n	8002868 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	0c5b      	lsrs	r3, r3, #17
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	2b06      	cmp	r3, #6
 8002844:	d110      	bne.n	8002868 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800284c:	2208      	movs	r2, #8
 800284e:	4619      	mov	r1, r3
 8002850:	6a38      	ldr	r0, [r7, #32]
 8002852:	f002 fc70 	bl	8005136 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002862:	441a      	add	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0210 	orr.w	r2, r2, #16
 8002876:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fdee 	bl	800545e <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002888:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800288c:	d16e      	bne.n	800296c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 fdf4 	bl	8005484 <USB_ReadDevAllOutEpInterrupt>
 800289c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800289e:	e062      	b.n	8002966 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d057      	beq.n	800295a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 fe19 	bl	80054ec <USB_ReadDevOutEPInterrupt>
 80028ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	461a      	mov	r2, r3
 80028d4:	2301      	movs	r3, #1
 80028d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fdb0 	bl	8003440 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00c      	beq.n	8002904 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	2308      	movs	r3, #8
 80028fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 feaa 	bl	8003658 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	461a      	mov	r2, r3
 800291c:	2310      	movs	r3, #16
 800291e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	4413      	add	r3, r2
 8002932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002936:	461a      	mov	r2, r3
 8002938:	2320      	movs	r3, #32
 800293a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002952:	461a      	mov	r2, r3
 8002954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002958:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	3301      	adds	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d199      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 fd74 	bl	800545e <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002980:	f040 80c0 	bne.w	8002b04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fd95 	bl	80054b8 <USB_ReadDevAllInEpInterrupt>
 800298e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002994:	e0b2      	b.n	8002afc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a7 	beq.w	8002af0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fdbb 	bl	8005528 <USB_ReadDevInEPInterrupt>
 80029b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d057      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2201      	movs	r2, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69f9      	ldr	r1, [r7, #28]
 80029da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029de:	4013      	ands	r3, r2
 80029e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ee:	461a      	mov	r2, r3
 80029f0:	2301      	movs	r3, #1
 80029f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d132      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3348      	adds	r3, #72	; 0x48
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4403      	add	r3, r0
 8002a1c:	3344      	adds	r3, #68	; 0x44
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4419      	add	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4403      	add	r3, r0
 8002a30:	3348      	adds	r3, #72	; 0x48
 8002a32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x31c>
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3350      	adds	r3, #80	; 0x50
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d108      	bne.n	8002a62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	f002 fdc3 	bl	80055e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f004 fd64 	bl	8007536 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a84:	461a      	mov	r2, r3
 8002a86:	2308      	movs	r3, #8
 8002a88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2340      	movs	r3, #64	; 0x40
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2302      	movs	r3, #2
 8002adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fc1b 	bl	8003326 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f47f af49 	bne.w	8002996 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fca8 	bl	800545e <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b18:	d122      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d108      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fe26 	bl	8003794 <HAL_PCDEx_LPM_Callback>
 8002b48:	e002      	b.n	8002b50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f004 fd60 	bl	8007610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fc7a 	bl	800545e <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b74:	d112      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d102      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 fd1c 	bl	80075c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f002 fc5c 	bl	800545e <USB_ReadInterrupts>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	f040 80c7 	bne.w	8002d42 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2110      	movs	r1, #16
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fcf6 	bl	80045c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bd8:	e056      	b.n	8002c88 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be6:	461a      	mov	r2, r3
 8002be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c0c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c52:	0151      	lsls	r1, r2, #5
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	440a      	add	r2, r1
 8002c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c72:	0151      	lsls	r1, r2, #5
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	440a      	add	r2, r1
 8002c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	3301      	adds	r3, #1
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3a3      	bcc.n	8002bda <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ca4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbe:	f043 030b 	orr.w	r3, r3, #11
 8002cc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd4:	f043 030b 	orr.w	r3, r3, #11
 8002cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cda:	e015      	b.n	8002d08 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cf2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d02:	f043 030b 	orr.w	r3, r3, #11
 8002d06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f002 fc5b 	bl	80055e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fb89 	bl	800545e <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d124      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 fc1f 	bl	80055a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fc87 	bl	800467a <USB_GetDevSpeed>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681c      	ldr	r4, [r3, #0]
 8002d78:	f001 f92c 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8002d7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4620      	mov	r0, r4
 8002d88:	f001 f9a6 	bl	80040d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f004 fbfa 	bl	8007586 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fb59 	bl	800545e <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d10a      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f004 fbd7 	bl	800756a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f002 0208 	and.w	r2, r2, #8
 8002dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fb44 	bl	800545e <USB_ReadInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de0:	d10f      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f004 fc2f 	bl	8007650 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fb29 	bl	800545e <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e16:	d10f      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f004 fc02 	bl	800762c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fb0e 	bl	800545e <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d10a      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f004 fc10 	bl	8007674 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 faf8 	bl	800545e <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d115      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 fc00 	bl	8007690 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	e000      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ea2:	bf00      	nop
    }
  }
}
 8002ea4:	3734      	adds	r7, #52	; 0x34
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}

08002eaa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_PCD_SetAddress+0x1a>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e013      	b.n	8002eec <HAL_PCD_SetAddress+0x42>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fa56 	bl	800538e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	70fb      	strb	r3, [r7, #3]
 8002f06:	460b      	mov	r3, r1
 8002f08:	803b      	strh	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0f      	bge.n	8002f3a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3338      	adds	r3, #56	; 0x38
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00f      	b.n	8002f5a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f66:	883a      	ldrh	r2, [r7, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	78ba      	ldrb	r2, [r7, #2]
 8002f70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f84:	78bb      	ldrb	r3, [r7, #2]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d102      	bne.n	8002f90 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_EP_Open+0xaa>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e00e      	b.n	8002fbc <HAL_PCD_EP_Open+0xc8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 fb89 	bl	80046c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002fba:	7afb      	ldrb	r3, [r7, #11]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	da0f      	bge.n	8002ff8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	3338      	adds	r3, #56	; 0x38
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
 8002ff6:	e00f      	b.n	8003018 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	3304      	adds	r3, #4
 8003010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_PCD_EP_Close+0x6e>
 800302e:	2302      	movs	r3, #2
 8003030:	e00e      	b.n	8003050 <HAL_PCD_EP_Close+0x8c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68f9      	ldr	r1, [r7, #12]
 8003040:	4618      	mov	r0, r3
 8003042:	f001 fbc7 	bl	80047d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 020f 	and.w	r2, r3, #15
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	3304      	adds	r3, #4
 8003080:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309a:	7afb      	ldrb	r3, [r7, #11]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6979      	ldr	r1, [r7, #20]
 80030cc:	f001 fea2 	bl	8004e14 <USB_EP0StartXfer>
 80030d0:	e008      	b.n	80030e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6979      	ldr	r1, [r7, #20]
 80030e0:	f001 fc54 	bl	800498c <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003110:	681b      	ldr	r3, [r3, #0]
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	460b      	mov	r3, r1
 800312c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	7afb      	ldrb	r3, [r7, #11]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2201      	movs	r2, #1
 800315c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	b2da      	uxtb	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003178:	7afb      	ldrb	r3, [r7, #11]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6979      	ldr	r1, [r7, #20]
 8003190:	f001 fe40 	bl	8004e14 <USB_EP0StartXfer>
 8003194:	e008      	b.n	80031a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	6979      	ldr	r1, [r7, #20]
 80031a4:	f001 fbf2 	bl	800498c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d901      	bls.n	80031d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e050      	b.n	8003272 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0f      	bge.n	80031f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3338      	adds	r3, #56	; 0x38
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
 80031f6:	e00d      	b.n	8003214 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_PCD_EP_SetStall+0x82>
 8003230:	2302      	movs	r3, #2
 8003232:	e01e      	b.n	8003272 <HAL_PCD_EP_SetStall+0xc0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f001 ffcf 	bl	80051e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003262:	461a      	mov	r2, r3
 8003264:	f002 f9c0 	bl	80055e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	d901      	bls.n	8003298 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e042      	b.n	800331e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329c:	2b00      	cmp	r3, #0
 800329e:	da0f      	bge.n	80032c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	3338      	adds	r3, #56	; 0x38
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
 80032be:	e00f      	b.n	80032e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_PCD_EP_ClrStall+0x86>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e00e      	b.n	800331e <HAL_PCD_EP_ClrStall+0xa4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f001 ffd7 	bl	80052c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08a      	sub	sp, #40	; 0x28
 800332a:	af02      	add	r7, sp, #8
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	3338      	adds	r3, #56	; 0x38
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d901      	bls.n	800335e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06c      	b.n	8003438 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	d902      	bls.n	800337a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3303      	adds	r3, #3
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003382:	e02b      	b.n	80033dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d902      	bls.n	80033a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3303      	adds	r3, #3
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	4603      	mov	r3, r0
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f001 fe7b 	bl	80050ba <USB_WritePacket>

    ep->xfer_buff  += len;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d809      	bhi.n	8003406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d203      	bcs.n	8003406 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1be      	bne.n	8003384 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	429a      	cmp	r2, r3
 8003410:	d811      	bhi.n	8003436 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	2201      	movs	r2, #1
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	43db      	mvns	r3, r3
 800342c:	6939      	ldr	r1, [r7, #16]
 800342e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003432:	4013      	ands	r3, r2
 8003434:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	333c      	adds	r3, #60	; 0x3c
 8003458:	3304      	adds	r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b01      	cmp	r3, #1
 8003474:	f040 80a0 	bne.w	80035b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a72      	ldr	r2, [pc, #456]	; (8003650 <PCD_EP_OutXfrComplete_int+0x210>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f240 80dd 	bls.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80d7 	beq.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	e0cb      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	2320      	movs	r3, #32
 80034c8:	6093      	str	r3, [r2, #8]
 80034ca:	e0bc      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 80b7 	bne.w	8003646 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <PCD_EP_OutXfrComplete_int+0x210>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d90f      	bls.n	8003500 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f6:	461a      	mov	r2, r3
 80034f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fc:	6093      	str	r3, [r2, #8]
 80034fe:	e0a2      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003512:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	440b      	add	r3, r1
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003526:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4403      	add	r3, r0
 8003536:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800353a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4419      	add	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003578:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d114      	bne.n	80035aa <PCD_EP_OutXfrComplete_int+0x16a>
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d108      	bne.n	80035aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035a2:	461a      	mov	r2, r3
 80035a4:	2101      	movs	r1, #1
 80035a6:	f002 f81f 	bl	80055e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f003 ffa5 	bl	8007500 <HAL_PCD_DataOutStageCallback>
 80035b6:	e046      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a26      	ldr	r2, [pc, #152]	; (8003654 <PCD_EP_OutXfrComplete_int+0x214>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d124      	bne.n	800360a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	e032      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	2320      	movs	r3, #32
 80035fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f003 ff7c 	bl	8007500 <HAL_PCD_DataOutStageCallback>
 8003608:	e01d      	b.n	8003646 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003632:	461a      	mov	r2, r3
 8003634:	2100      	movs	r1, #0
 8003636:	f001 ffd7 	bl	80055e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f003 ff5d 	bl	8007500 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	4f54300a 	.word	0x4f54300a
 8003654:	4f54310a 	.word	0x4f54310a

08003658 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	333c      	adds	r3, #60	; 0x3c
 8003670:	3304      	adds	r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4a15      	ldr	r2, [pc, #84]	; (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d90e      	bls.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a4:	461a      	mov	r2, r3
 80036a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f003 ff15 	bl	80074dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90c      	bls.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036cc:	461a      	mov	r2, r3
 80036ce:	2101      	movs	r1, #1
 80036d0:	f001 ff8a 	bl	80055e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	4f54300a 	.word	0x4f54300a

080036e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	4613      	mov	r3, r2
 80036f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	0419      	lsls	r1, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	430a      	orrs	r2, r1
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e028      	b.n	8003764 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e00d      	b.n	8003742 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	3340      	adds	r3, #64	; 0x40
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	3301      	adds	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	3b01      	subs	r3, #1
 8003748:	429a      	cmp	r2, r3
 800374a:	d3ec      	bcc.n	8003726 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800374c:	883b      	ldrh	r3, [r7, #0]
 800374e:	0418      	lsls	r0, r3, #16
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	3b01      	subs	r3, #1
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4302      	orrs	r2, r0
 800375c:	3340      	adds	r3, #64	; 0x40
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e264      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ca:	4ba3      	ldr	r3, [pc, #652]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4ba0      	ldr	r3, [pc, #640]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d112      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b9d      	ldr	r3, [pc, #628]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b99      	ldr	r3, [pc, #612]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e23f      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x74>
 8003812:	4b91      	ldr	r3, [pc, #580]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a90      	ldr	r2, [pc, #576]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a8a      	ldr	r2, [pc, #552]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a87      	ldr	r2, [pc, #540]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003844:	4b84      	ldr	r3, [pc, #528]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a83      	ldr	r2, [pc, #524]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a80      	ldr	r2, [pc, #512]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd fb80 	bl	8000f68 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd fb7c 	bl	8000f68 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e204      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b76      	ldr	r3, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xc0>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fd fb6c 	bl	8000f68 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd fb68 	bl	8000f68 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1f0      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	4b6c      	ldr	r3, [pc, #432]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d11c      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d116      	bne.n	8003914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e1c4      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fe:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4952      	ldr	r1, [pc, #328]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	e03a      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800391c:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <HAL_RCC_OscConfig+0x2b0>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fd fb21 	bl	8000f68 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fb1d 	bl	8000f68 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1a5      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003948:	4b43      	ldr	r3, [pc, #268]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4940      	ldr	r1, [pc, #256]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]
 800395c:	e015      	b.n	800398a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_OscConfig+0x2b0>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7fd fb00 	bl	8000f68 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396c:	f7fd fafc 	bl	8000f68 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e184      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d030      	beq.n	80039f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399e:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCC_OscConfig+0x2b4>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fae0 	bl	8000f68 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fadc 	bl	8000f68 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e164      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039cc:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_OscConfig+0x2b4>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d2:	f7fd fac9 	bl	8000f68 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd fac5 	bl	8000f68 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e14d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80a0 	beq.w	8003b46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10f      	bne.n	8003a36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d121      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <HAL_RCC_OscConfig+0x2b8>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fa8b 	bl	8000f68 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e011      	b.n	8003a7a <HAL_RCC_OscConfig+0x2ce>
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	42470000 	.word	0x42470000
 8003a60:	42470e80 	.word	0x42470e80
 8003a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fd fa7e 	bl	8000f68 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e106      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b85      	ldr	r3, [pc, #532]	; (8003c90 <HAL_RCC_OscConfig+0x4e4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
 8003a8e:	4b81      	ldr	r3, [pc, #516]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x32a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x312>
 8003aa4:	4b7b      	ldr	r3, [pc, #492]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a7a      	ldr	r2, [pc, #488]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	4b78      	ldr	r3, [pc, #480]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a77      	ldr	r2, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x32a>
 8003abe:	4b75      	ldr	r3, [pc, #468]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a74      	ldr	r2, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	4b72      	ldr	r3, [pc, #456]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a71      	ldr	r2, [pc, #452]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fd fa43 	bl	8000f68 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fd fa3f 	bl	8000f68 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0c5      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	4b65      	ldr	r3, [pc, #404]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ee      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x33a>
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7fd fa2d 	bl	8000f68 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fd fa29 	bl	8000f68 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0af      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ee      	bne.n	8003b12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 809b 	beq.w	8003c86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d05c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d141      	bne.n	8003be8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b4c      	ldr	r3, [pc, #304]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fd f9fd 	bl	8000f68 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd f9f9 	bl	8000f68 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e081      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	4b43      	ldr	r3, [pc, #268]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	019b      	lsls	r3, r3, #6
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	4937      	ldr	r1, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bba:	4b37      	ldr	r3, [pc, #220]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fd f9d2 	bl	8000f68 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd f9ce 	bl	8000f68 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e056      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x41c>
 8003be6:	e04e      	b.n	8003c86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_RCC_OscConfig+0x4ec>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd f9bb 	bl	8000f68 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd f9b7 	bl	8000f68 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e03f      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x44a>
 8003c14:	e037      	b.n	8003c86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e032      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <HAL_RCC_OscConfig+0x4e8>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d028      	beq.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d11a      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40007000 	.word	0x40007000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470060 	.word	0x42470060

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fd f8ec 	bl	8000f68 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fd f8e8 	bl	8000f68 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4602      	mov	r2, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	490a      	ldr	r1, [pc, #40]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5ccb      	ldrb	r3, [r1, r3]
 8003e36:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fd f84c 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	0800839c 	.word	0x0800839c
 8003e60:	20000000 	.word	0x20000000
 8003e64:	20000004 	.word	0x20000004

08003e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6e:	2100      	movs	r1, #0
 8003e70:	6079      	str	r1, [r7, #4]
 8003e72:	2100      	movs	r1, #0
 8003e74:	60f9      	str	r1, [r7, #12]
 8003e76:	2100      	movs	r1, #0
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7e:	4952      	ldr	r1, [pc, #328]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e80:	6889      	ldr	r1, [r1, #8]
 8003e82:	f001 010c 	and.w	r1, r1, #12
 8003e86:	2908      	cmp	r1, #8
 8003e88:	d00d      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e8a:	2908      	cmp	r1, #8
 8003e8c:	f200 8094 	bhi.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x150>
 8003e90:	2900      	cmp	r1, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x32>
 8003e94:	2904      	cmp	r1, #4
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8003e98:	e08e      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e9a:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8003e9c:	60bb      	str	r3, [r7, #8]
       break;
 8003e9e:	e08e      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ea2:	60bb      	str	r3, [r7, #8]
      break;
 8003ea4:	e08b      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea6:	4948      	ldr	r1, [pc, #288]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea8:	6849      	ldr	r1, [r1, #4]
 8003eaa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003eae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb0:	4945      	ldr	r1, [pc, #276]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003eb2:	6849      	ldr	r1, [r1, #4]
 8003eb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d024      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebc:	4942      	ldr	r1, [pc, #264]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ebe:	6849      	ldr	r1, [r1, #4]
 8003ec0:	0989      	lsrs	r1, r1, #6
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ecc:	f04f 0500 	mov.w	r5, #0
 8003ed0:	ea00 0204 	and.w	r2, r0, r4
 8003ed4:	ea01 0305 	and.w	r3, r1, r5
 8003ed8:	493d      	ldr	r1, [pc, #244]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eda:	fb01 f003 	mul.w	r0, r1, r3
 8003ede:	2100      	movs	r1, #0
 8003ee0:	fb01 f102 	mul.w	r1, r1, r2
 8003ee4:	1844      	adds	r4, r0, r1
 8003ee6:	493a      	ldr	r1, [pc, #232]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ee8:	fba2 0101 	umull	r0, r1, r2, r1
 8003eec:	1863      	adds	r3, r4, r1
 8003eee:	4619      	mov	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	f7fc f9c2 	bl	8000280 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e04a      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f06:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	ea02 0400 	and.w	r4, r2, r0
 8003f1e:	ea03 0501 	and.w	r5, r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	014b      	lsls	r3, r1, #5
 8003f30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f34:	0142      	lsls	r2, r0, #5
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	1b00      	subs	r0, r0, r4
 8003f3c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	018b      	lsls	r3, r1, #6
 8003f4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f4e:	0182      	lsls	r2, r0, #6
 8003f50:	1a12      	subs	r2, r2, r0
 8003f52:	eb63 0301 	sbc.w	r3, r3, r1
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	00d9      	lsls	r1, r3, #3
 8003f60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f64:	00d0      	lsls	r0, r2, #3
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	1912      	adds	r2, r2, r4
 8003f6c:	eb45 0303 	adc.w	r3, r5, r3
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	0299      	lsls	r1, r3, #10
 8003f7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f7e:	0290      	lsls	r0, r2, #10
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f7fc f976 	bl	8000280 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x164>)
 8003fba:	60bb      	str	r3, [r7, #8]
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	017d7840 	.word	0x017d7840

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff0:	f7ff fff0 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0a9b      	lsrs	r3, r3, #10
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	080083ac 	.word	0x080083ac

08004014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004014:	b084      	sub	sp, #16
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	f107 001c 	add.w	r0, r7, #28
 8004022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	d122      	bne.n	8004072 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d105      	bne.n	8004066 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f001 fb1c 	bl	80056a4 <USB_CoreReset>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	e01a      	b.n	80040a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f001 fb10 	bl	80056a4 <USB_CoreReset>
 8004084:	4603      	mov	r3, r0
 8004086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
 800409a:	e005      	b.n	80040a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10b      	bne.n	80040c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f043 0206 	orr.w	r2, r3, #6
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040d2:	b004      	add	sp, #16
 80040d4:	4770      	bx	lr
	...

080040d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d165      	bne.n	80041b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4a41      	ldr	r2, [pc, #260]	; (80041f4 <USB_SetTurnaroundTime+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d906      	bls.n	8004102 <USB_SetTurnaroundTime+0x2a>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <USB_SetTurnaroundTime+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d202      	bcs.n	8004102 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040fc:	230f      	movs	r3, #15
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e062      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <USB_SetTurnaroundTime+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d306      	bcc.n	8004118 <USB_SetTurnaroundTime+0x40>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <USB_SetTurnaroundTime+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d202      	bcs.n	8004118 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004112:	230e      	movs	r3, #14
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	e057      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4a38      	ldr	r2, [pc, #224]	; (80041fc <USB_SetTurnaroundTime+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d306      	bcc.n	800412e <USB_SetTurnaroundTime+0x56>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <USB_SetTurnaroundTime+0x128>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d202      	bcs.n	800412e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004128:	230d      	movs	r3, #13
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e04c      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4a33      	ldr	r2, [pc, #204]	; (8004200 <USB_SetTurnaroundTime+0x128>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d306      	bcc.n	8004144 <USB_SetTurnaroundTime+0x6c>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a32      	ldr	r2, [pc, #200]	; (8004204 <USB_SetTurnaroundTime+0x12c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d802      	bhi.n	8004144 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800413e:	230c      	movs	r3, #12
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e041      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4a2f      	ldr	r2, [pc, #188]	; (8004204 <USB_SetTurnaroundTime+0x12c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d906      	bls.n	800415a <USB_SetTurnaroundTime+0x82>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <USB_SetTurnaroundTime+0x130>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d802      	bhi.n	800415a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004154:	230b      	movs	r3, #11
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e036      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <USB_SetTurnaroundTime+0x130>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d906      	bls.n	8004170 <USB_SetTurnaroundTime+0x98>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4a29      	ldr	r2, [pc, #164]	; (800420c <USB_SetTurnaroundTime+0x134>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800416a:	230a      	movs	r3, #10
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e02b      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a26      	ldr	r2, [pc, #152]	; (800420c <USB_SetTurnaroundTime+0x134>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d906      	bls.n	8004186 <USB_SetTurnaroundTime+0xae>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <USB_SetTurnaroundTime+0x138>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d202      	bcs.n	8004186 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004180:	2309      	movs	r3, #9
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e020      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4a21      	ldr	r2, [pc, #132]	; (8004210 <USB_SetTurnaroundTime+0x138>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d306      	bcc.n	800419c <USB_SetTurnaroundTime+0xc4>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <USB_SetTurnaroundTime+0x13c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d802      	bhi.n	800419c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004196:	2308      	movs	r3, #8
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e015      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <USB_SetTurnaroundTime+0x13c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d906      	bls.n	80041b2 <USB_SetTurnaroundTime+0xda>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <USB_SetTurnaroundTime+0x140>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d202      	bcs.n	80041b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041ac:	2307      	movs	r3, #7
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e00a      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041b2:	2306      	movs	r3, #6
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e007      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041be:	2309      	movs	r3, #9
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	e001      	b.n	80041c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041c4:	2309      	movs	r3, #9
 80041c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	029b      	lsls	r3, r3, #10
 80041dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	00d8acbf 	.word	0x00d8acbf
 80041f8:	00e4e1c0 	.word	0x00e4e1c0
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	01067380 	.word	0x01067380
 8004204:	011a499f 	.word	0x011a499f
 8004208:	01312cff 	.word	0x01312cff
 800420c:	014ca43f 	.word	0x014ca43f
 8004210:	016e3600 	.word	0x016e3600
 8004214:	01a6ab1f 	.word	0x01a6ab1f
 8004218:	01e84800 	.word	0x01e84800

0800421c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d115      	bne.n	80042ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800428e:	2001      	movs	r0, #1
 8004290:	f7fc fe76 	bl	8000f80 <HAL_Delay>
      ms++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 f972 	bl	8005584 <USB_GetMode>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d01e      	beq.n	80042e4 <USB_SetCurrentMode+0x84>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b31      	cmp	r3, #49	; 0x31
 80042aa:	d9f0      	bls.n	800428e <USB_SetCurrentMode+0x2e>
 80042ac:	e01a      	b.n	80042e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d115      	bne.n	80042e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042c0:	2001      	movs	r0, #1
 80042c2:	f7fc fe5d 	bl	8000f80 <HAL_Delay>
      ms++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f001 f959 	bl	8005584 <USB_GetMode>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <USB_SetCurrentMode+0x84>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b31      	cmp	r3, #49	; 0x31
 80042dc:	d9f0      	bls.n	80042c0 <USB_SetCurrentMode+0x60>
 80042de:	e001      	b.n	80042e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e005      	b.n	80042f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b32      	cmp	r3, #50	; 0x32
 80042e8:	d101      	bne.n	80042ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042f8:	b084      	sub	sp, #16
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e009      	b.n	800432c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3301      	adds	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0e      	cmp	r3, #14
 8004330:	d9f2      	bls.n	8004318 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11c      	bne.n	8004372 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
 8004370:	e00b      	b.n	800438a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	4619      	mov	r1, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	461a      	mov	r2, r3
 80043a6:	680b      	ldr	r3, [r1, #0]
 80043a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d10c      	bne.n	80043ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d104      	bne.n	80043c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043b6:	2100      	movs	r1, #0
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f945 	bl	8004648 <USB_SetDevSpeed>
 80043be:	e008      	b.n	80043d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043c0:	2101      	movs	r1, #1
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f940 	bl	8004648 <USB_SetDevSpeed>
 80043c8:	e003      	b.n	80043d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043ca:	2103      	movs	r1, #3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f93b 	bl	8004648 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043d2:	2110      	movs	r1, #16
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f8f3 	bl	80045c0 <USB_FlushTxFifo>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f90f 	bl	8004608 <USB_FlushRxFifo>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	461a      	mov	r2, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	e043      	b.n	80044a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004434:	d118      	bne.n	8004468 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	461a      	mov	r2, r3
 800444a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e013      	b.n	800447a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	461a      	mov	r2, r3
 8004460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e008      	b.n	800447a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4413      	add	r3, r2
 8004470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004474:	461a      	mov	r2, r3
 8004476:	2300      	movs	r3, #0
 8004478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	461a      	mov	r2, r3
 8004488:	2300      	movs	r3, #0
 800448a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	461a      	mov	r2, r3
 800449a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800449e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3301      	adds	r3, #1
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d3b7      	bcc.n	800441e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	e043      	b.n	800453c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ca:	d118      	bne.n	80044fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e013      	b.n	8004510 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	e008      	b.n	8004510 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	461a      	mov	r2, r3
 800450c:	2300      	movs	r3, #0
 800450e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3301      	adds	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d3b7      	bcc.n	80044b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f043 0210 	orr.w	r2, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <USB_DevInit+0x2c4>)
 800457e:	4313      	orrs	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f043 0208 	orr.w	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d107      	bne.n	80045ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045b8:	b004      	add	sp, #16
 80045ba:	4770      	bx	lr
 80045bc:	803c3800 	.word	0x803c3800

080045c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <USB_FlushTxFifo+0x44>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e006      	b.n	80045f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d0f1      	beq.n	80045da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	00030d40 	.word	0x00030d40

08004608 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2210      	movs	r2, #16
 8004618:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	4a08      	ldr	r2, [pc, #32]	; (8004644 <USB_FlushRxFifo+0x3c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e006      	b.n	8004638 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b10      	cmp	r3, #16
 8004634:	d0f1      	beq.n	800461a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	00030d40 	.word	0x00030d40

08004648 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004668:	4313      	orrs	r3, r2
 800466a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800467a:	b480      	push	{r7}
 800467c:	b087      	sub	sp, #28
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0306 	and.w	r3, r3, #6
 8004692:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
 800469e:	e00a      	b.n	80046b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d002      	beq.n	80046ac <USB_GetDevSpeed+0x32>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d102      	bne.n	80046b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80046ac:	2302      	movs	r3, #2
 80046ae:	75fb      	strb	r3, [r7, #23]
 80046b0:	e001      	b.n	80046b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80046b2:	230f      	movs	r3, #15
 80046b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d13a      	bne.n	8004756 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	2101      	movs	r1, #1
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	68f9      	ldr	r1, [r7, #12]
 80046fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046fe:	4313      	orrs	r3, r2
 8004700:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d155      	bne.n	80047c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004734:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	059b      	lsls	r3, r3, #22
 800473a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800473c:	4313      	orrs	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e036      	b.n	80047c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	69da      	ldr	r2, [r3, #28]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004774:	4313      	orrs	r3, r2
 8004776:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11a      	bne.n	80047c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	78db      	ldrb	r3, [r3, #3]
 80047a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d161      	bne.n	80048b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004806:	d11f      	bne.n	8004848 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004826:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f303 	lsl.w	r3, r1, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	68f9      	ldr	r1, [r7, #12]
 8004864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004868:	4013      	ands	r3, r2
 800486a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	2101      	movs	r1, #1
 800487e:	fa01 f303 	lsl.w	r3, r1, r3
 8004882:	b29b      	uxth	r3, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488c:	4013      	ands	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0159      	lsls	r1, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	440b      	add	r3, r1
 80048a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048aa:	4619      	mov	r1, r3
 80048ac:	4b35      	ldr	r3, [pc, #212]	; (8004984 <USB_DeactivateEndpoint+0x1b0>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]
 80048b2:	e060      	b.n	8004976 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ca:	d11f      	bne.n	800490c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800490a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	2101      	movs	r1, #1
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	43db      	mvns	r3, r3
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4013      	ands	r3, r2
 800492e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2101      	movs	r1, #1
 8004942:	fa01 f303 	lsl.w	r3, r1, r3
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	43db      	mvns	r3, r3
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004950:	4013      	ands	r3, r2
 8004952:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	0159      	lsls	r1, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	440b      	add	r3, r1
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	4619      	mov	r1, r3
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <USB_DeactivateEndpoint+0x1b4>)
 8004972:	4013      	ands	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	ec337800 	.word	0xec337800
 8004988:	eff37800 	.word	0xeff37800

0800498c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	f040 815c 	bne.w	8004c66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d132      	bne.n	8004a1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	0cdb      	lsrs	r3, r3, #19
 8004a16:	04db      	lsls	r3, r3, #19
 8004a18:	6113      	str	r3, [r2, #16]
 8004a1a:	e074      	b.n	8004b06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	0151      	lsls	r1, r2, #5
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	440a      	add	r2, r1
 8004a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a36:	0cdb      	lsrs	r3, r3, #19
 8004a38:	04db      	lsls	r3, r3, #19
 8004a3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	6959      	ldr	r1, [r3, #20]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	440b      	add	r3, r1
 8004a78:	1e59      	subs	r1, r3, #1
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a84:	4b9d      	ldr	r3, [pc, #628]	; (8004cfc <USB_EPStartXfer+0x370>)
 8004a86:	400b      	ands	r3, r1
 8004a88:	69b9      	ldr	r1, [r7, #24]
 8004a8a:	0148      	lsls	r0, r1, #5
 8004a8c:	69f9      	ldr	r1, [r7, #28]
 8004a8e:	4401      	add	r1, r0
 8004a90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a94:	4313      	orrs	r3, r2
 8004a96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	0148      	lsls	r0, r1, #5
 8004ab2:	69f9      	ldr	r1, [r7, #28]
 8004ab4:	4401      	add	r1, r0
 8004ab6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aba:	4313      	orrs	r3, r2
 8004abc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	78db      	ldrb	r3, [r3, #3]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d11f      	bne.n	8004b06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ae4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	0151      	lsls	r1, r2, #5
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	440a      	add	r2, r1
 8004afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d14b      	bne.n	8004ba4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d009      	beq.n	8004b28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	461a      	mov	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	78db      	ldrb	r3, [r3, #3]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d128      	bne.n	8004b82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d110      	bne.n	8004b62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	0151      	lsls	r1, r2, #5
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	440a      	add	r2, r1
 8004b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e00f      	b.n	8004b82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e12f      	b.n	8004e04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	0151      	lsls	r1, r2, #5
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	440a      	add	r2, r1
 8004bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	78db      	ldrb	r3, [r3, #3]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d015      	beq.n	8004bf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8117 	beq.w	8004e04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	2101      	movs	r1, #1
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	69f9      	ldr	r1, [r7, #28]
 8004bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	634b      	str	r3, [r1, #52]	; 0x34
 8004bf6:	e105      	b.n	8004e04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d110      	bne.n	8004c2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e00f      	b.n	8004c4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	69fa      	ldr	r2, [r7, #28]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	b298      	uxth	r0, r3
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fa2b 	bl	80050ba <USB_WritePacket>
 8004c64:	e0ce      	b.n	8004e04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	04db      	lsls	r3, r3, #19
 8004c84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ca4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d126      	bne.n	8004d00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	0148      	lsls	r0, r1, #5
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	4401      	add	r1, r0
 8004cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf6:	6113      	str	r3, [r2, #16]
 8004cf8:	e036      	b.n	8004d68 <USB_EPStartXfer+0x3dc>
 8004cfa:	bf00      	nop
 8004cfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4413      	add	r3, r2
 8004d0a:	1e5a      	subs	r2, r3, #1
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	04d9      	lsls	r1, r3, #19
 8004d28:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <USB_EPStartXfer+0x484>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	0148      	lsls	r0, r1, #5
 8004d30:	69f9      	ldr	r1, [r7, #28]
 8004d32:	4401      	add	r1, r0
 8004d34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	8af9      	ldrh	r1, [r7, #22]
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	0148      	lsls	r0, r1, #5
 8004d5c:	69f9      	ldr	r1, [r7, #28]
 8004d5e:	4401      	add	r1, r0
 8004d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10d      	bne.n	8004d8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	68d9      	ldr	r1, [r3, #12]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	460a      	mov	r2, r1
 8004d88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	78db      	ldrb	r3, [r3, #3]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d128      	bne.n	8004de4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d110      	bne.n	8004dc4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	0151      	lsls	r1, r2, #5
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	440a      	add	r2, r1
 8004db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e00f      	b.n	8004de4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	69fa      	ldr	r2, [r7, #28]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	1ff80000 	.word	0x1ff80000

08004e14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	f040 80cd 	bne.w	8004fd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d132      	bne.n	8004ea4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9c:	0cdb      	lsrs	r3, r3, #19
 8004e9e:	04db      	lsls	r3, r3, #19
 8004ea0:	6113      	str	r3, [r2, #16]
 8004ea2:	e04e      	b.n	8004f42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebe:	0cdb      	lsrs	r3, r3, #19
 8004ec0:	04db      	lsls	r3, r3, #19
 8004ec2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d903      	bls.n	8004efc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	6939      	ldr	r1, [r7, #16]
 8004f34:	0148      	lsls	r0, r1, #5
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	4401      	add	r1, r0
 8004f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d11e      	bne.n	8004f86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e092      	b.n	80050ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d07e      	beq.n	80050ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	6979      	ldr	r1, [r7, #20]
 8004fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8004fce:	e06d      	b.n	80050ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fea:	0cdb      	lsrs	r3, r3, #19
 8004fec:	04db      	lsls	r3, r3, #19
 8004fee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800500e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005012:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005042:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	0148      	lsls	r0, r1, #5
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	4401      	add	r1, r0
 8005062:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10d      	bne.n	800508c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	68d9      	ldr	r1, [r3, #12]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	460a      	mov	r2, r1
 800508a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b089      	sub	sp, #36	; 0x24
 80050be:	af00      	add	r7, sp, #0
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	4611      	mov	r1, r2
 80050c6:	461a      	mov	r2, r3
 80050c8:	460b      	mov	r3, r1
 80050ca:	71fb      	strb	r3, [r7, #7]
 80050cc:	4613      	mov	r3, r2
 80050ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d123      	bne.n	8005128 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050e0:	88bb      	ldrh	r3, [r7, #4]
 80050e2:	3303      	adds	r3, #3
 80050e4:	089b      	lsrs	r3, r3, #2
 80050e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	e018      	b.n	8005120 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	031a      	lsls	r2, r3, #12
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fa:	461a      	mov	r2, r3
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	3301      	adds	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3301      	adds	r3, #1
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	429a      	cmp	r2, r3
 8005126:	d3e2      	bcc.n	80050ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3724      	adds	r7, #36	; 0x24
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005136:	b480      	push	{r7}
 8005138:	b08b      	sub	sp, #44	; 0x2c
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	b29b      	uxth	r3, r3
 8005152:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800515c:	2300      	movs	r3, #0
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	e014      	b.n	800518c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	601a      	str	r2, [r3, #0]
    pDest++;
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	3301      	adds	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	3301      	adds	r3, #1
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	3301      	adds	r3, #1
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	3301      	adds	r3, #1
 800518a:	623b      	str	r3, [r7, #32]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	429a      	cmp	r2, r3
 8005192:	d3e6      	bcc.n	8005162 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005194:	8bfb      	ldrh	r3, [r7, #30]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d01e      	beq.n	80051d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	461a      	mov	r2, r3
 80051a6:	f107 0310 	add.w	r3, r7, #16
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	701a      	strb	r2, [r3, #0]
      i++;
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	3301      	adds	r3, #1
 80051c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	3301      	adds	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051cc:	8bfb      	ldrh	r3, [r7, #30]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051d2:	8bfb      	ldrh	r3, [r7, #30]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ea      	bne.n	80051ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051da:	4618      	mov	r0, r3
 80051dc:	372c      	adds	r7, #44	; 0x2c
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d12c      	bne.n	800525c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db12      	blt.n	800523a <USB_EPSetStall+0x54>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00f      	beq.n	800523a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	440a      	add	r2, r1
 8005230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005238:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e02b      	b.n	80052b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	db12      	blt.n	8005294 <USB_EPSetStall+0xae>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00f      	beq.n	8005294 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005292:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	0151      	lsls	r1, r2, #5
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	440a      	add	r2, r1
 80052aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d128      	bne.n	8005330 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	78db      	ldrb	r3, [r3, #3]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d003      	beq.n	800530e <USB_EPClearStall+0x4c>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	78db      	ldrb	r3, [r3, #3]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d138      	bne.n	8005380 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e027      	b.n	8005380 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800534e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	78db      	ldrb	r3, [r3, #3]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d003      	beq.n	8005360 <USB_EPClearStall+0x9e>
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	78db      	ldrb	r3, [r3, #3]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d10f      	bne.n	8005380 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c8:	4313      	orrs	r3, r2
 80053ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053f4:	f023 0303 	bic.w	r3, r3, #3
 80053f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005408:	f023 0302 	bic.w	r3, r3, #2
 800540c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4013      	ands	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	0c1b      	lsrs	r3, r3, #16
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	b29b      	uxth	r3, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800551a:	68bb      	ldr	r3, [r7, #8]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	01db      	lsls	r3, r3, #7
 800555a:	b2db      	uxtb	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005576:	68bb      	ldr	r3, [r7, #8]
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0301 	and.w	r3, r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	460b      	mov	r3, r1
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	333c      	adds	r3, #60	; 0x3c
 80055fe:	3304      	adds	r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <USB_EP0_OutStart+0xb8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d90a      	bls.n	8005622 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d101      	bne.n	8005622 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e037      	b.n	8005692 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	f043 0318 	orr.w	r3, r3, #24
 8005654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005664:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005668:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800566a:	7afb      	ldrb	r3, [r7, #11]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10f      	bne.n	8005690 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800568e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	4f54300a 	.word	0x4f54300a

080056a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]
 80056b6:	4a13      	ldr	r2, [pc, #76]	; (8005704 <USB_CoreReset+0x60>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e01a      	b.n	80056f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	daf3      	bge.n	80056b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <USB_CoreReset+0x60>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d901      	bls.n	80056e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e006      	b.n	80056f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d0f1      	beq.n	80056d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	00030d40 	.word	0x00030d40

08005708 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005714:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005718:	f002 f952 	bl	80079c0 <USBD_static_malloc>
 800571c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800572c:	2302      	movs	r3, #2
 800572e:	e066      	b.n	80057fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7c1b      	ldrb	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d119      	bne.n	8005774 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005744:	2202      	movs	r2, #2
 8005746:	2181      	movs	r1, #129	; 0x81
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f002 f816 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005758:	2202      	movs	r2, #2
 800575a:	2101      	movs	r1, #1
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 f80c 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2210      	movs	r2, #16
 800576e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005772:	e016      	b.n	80057a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	2202      	movs	r2, #2
 8005778:	2181      	movs	r1, #129	; 0x81
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fffd 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005786:	2340      	movs	r3, #64	; 0x40
 8005788:	2202      	movs	r2, #2
 800578a:	2101      	movs	r1, #1
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fff4 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2210      	movs	r2, #16
 800579e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057a2:	2308      	movs	r3, #8
 80057a4:	2203      	movs	r2, #3
 80057a6:	2182      	movs	r1, #130	; 0x82
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 ffe6 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	7c1b      	ldrb	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e2:	2101      	movs	r1, #1
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f002 f8b7 	bl	8007958 <USBD_LL_PrepareReceive>
 80057ea:	e007      	b.n	80057fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057f2:	2340      	movs	r3, #64	; 0x40
 80057f4:	2101      	movs	r1, #1
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 f8ae 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005812:	2181      	movs	r1, #129	; 0x81
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 ffd6 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005820:	2101      	movs	r1, #1
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 ffcf 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005830:	2182      	movs	r1, #130	; 0x82
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 ffc7 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005862:	4618      	mov	r0, r3
 8005864:	f002 f8ba 	bl	80079dc <USBD_static_free>
    pdev->pClassData = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800588c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0af      	b.n	8005a04 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d03f      	beq.n	8005930 <USBD_CDC_Setup+0xb4>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	f040 809f 	bne.w	80059f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	88db      	ldrh	r3, [r3, #6]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02e      	beq.n	800591c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da16      	bge.n	80058f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80058d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	88d2      	ldrh	r2, [r2, #6]
 80058da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	88db      	ldrh	r3, [r3, #6]
 80058e0:	2b07      	cmp	r3, #7
 80058e2:	bf28      	it	cs
 80058e4:	2307      	movcs	r3, #7
 80058e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	89fa      	ldrh	r2, [r7, #14]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 fb19 	bl	8006f26 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80058f4:	e085      	b.n	8005a02 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	785a      	ldrb	r2, [r3, #1]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	88db      	ldrh	r3, [r3, #6]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800590c:	6939      	ldr	r1, [r7, #16]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	88db      	ldrh	r3, [r3, #6]
 8005912:	461a      	mov	r2, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fb32 	bl	8006f7e <USBD_CtlPrepareRx>
      break;
 800591a:	e072      	b.n	8005a02 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	7850      	ldrb	r0, [r2, #1]
 8005928:	2200      	movs	r2, #0
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4798      	blx	r3
      break;
 800592e:	e068      	b.n	8005a02 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b0b      	cmp	r3, #11
 8005936:	d852      	bhi.n	80059de <USBD_CDC_Setup+0x162>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <USBD_CDC_Setup+0xc4>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005971 	.word	0x08005971
 8005944:	080059ed 	.word	0x080059ed
 8005948:	080059df 	.word	0x080059df
 800594c:	080059df 	.word	0x080059df
 8005950:	080059df 	.word	0x080059df
 8005954:	080059df 	.word	0x080059df
 8005958:	080059df 	.word	0x080059df
 800595c:	080059df 	.word	0x080059df
 8005960:	080059df 	.word	0x080059df
 8005964:	080059df 	.word	0x080059df
 8005968:	0800599b 	.word	0x0800599b
 800596c:	080059c5 	.word	0x080059c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d107      	bne.n	800598c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800597c:	f107 030a 	add.w	r3, r7, #10
 8005980:	2202      	movs	r2, #2
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 face 	bl	8006f26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800598a:	e032      	b.n	80059f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f001 fa58 	bl	8006e44 <USBD_CtlError>
            ret = USBD_FAIL;
 8005994:	2303      	movs	r3, #3
 8005996:	75fb      	strb	r3, [r7, #23]
          break;
 8005998:	e02b      	b.n	80059f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d107      	bne.n	80059b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80059a6:	f107 030d 	add.w	r3, r7, #13
 80059aa:	2201      	movs	r2, #1
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 fab9 	bl	8006f26 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059b4:	e01d      	b.n	80059f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fa43 	bl	8006e44 <USBD_CtlError>
            ret = USBD_FAIL;
 80059be:	2303      	movs	r3, #3
 80059c0:	75fb      	strb	r3, [r7, #23]
          break;
 80059c2:	e016      	b.n	80059f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d00f      	beq.n	80059f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 fa36 	bl	8006e44 <USBD_CtlError>
            ret = USBD_FAIL;
 80059d8:	2303      	movs	r3, #3
 80059da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059dc:	e008      	b.n	80059f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fa2f 	bl	8006e44 <USBD_CtlError>
          ret = USBD_FAIL;
 80059e6:	2303      	movs	r3, #3
 80059e8:	75fb      	strb	r3, [r7, #23]
          break;
 80059ea:	e002      	b.n	80059f2 <USBD_CDC_Setup+0x176>
          break;
 80059ec:	bf00      	nop
 80059ee:	e008      	b.n	8005a02 <USBD_CDC_Setup+0x186>
          break;
 80059f0:	bf00      	nop
      }
      break;
 80059f2:	e006      	b.n	8005a02 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fa24 	bl	8006e44 <USBD_CtlError>
      ret = USBD_FAIL;
 80059fc:	2303      	movs	r3, #3
 80059fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005a00:	bf00      	nop
  }

  return (uint8_t)ret;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e04f      	b.n	8005ace <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3318      	adds	r3, #24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d029      	beq.n	8005aa0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	78f9      	ldrb	r1, [r7, #3]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	460b      	mov	r3, r1
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	1a5b      	subs	r3, r3, r1
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4403      	add	r3, r0
 8005a6c:	3344      	adds	r3, #68	; 0x44
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a74:	fb03 f301 	mul.w	r3, r3, r1
 8005a78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a92:	78f9      	ldrb	r1, [r7, #3]
 8005a94:	2300      	movs	r3, #0
 8005a96:	2200      	movs	r2, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 ff3c 	bl	8007916 <USBD_LL_Transmit>
 8005a9e:	e015      	b.n	8005acc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e015      	b.n	8005b24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 ff4c 	bl	800799a <USBD_LL_GetRxDataSize>
 8005b02:	4602      	mov	r2, r0
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e01b      	b.n	8005b7e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <USBD_CDC_EP0_RxReady+0x50>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b56:	2bff      	cmp	r3, #255	; 0xff
 8005b58:	d010      	beq.n	8005b7c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005b68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b70:	b292      	uxth	r2, r2
 8005b72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	22ff      	movs	r2, #255	; 0xff
 8005b78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2243      	movs	r2, #67	; 0x43
 8005b94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005b96:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000094 	.word	0x20000094

08005ba8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2243      	movs	r2, #67	; 0x43
 8005bb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005bb6:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000050 	.word	0x20000050

08005bc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2243      	movs	r2, #67	; 0x43
 8005bd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005bd6:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	200000d8 	.word	0x200000d8

08005be8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	220a      	movs	r2, #10
 8005bf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005bf6:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	2000000c 	.word	0x2000000c

08005c08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e004      	b.n	8005c26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c44:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e008      	b.n	8005c62 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e004      	b.n	8005c94 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e01a      	b.n	8005cf8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d114      	bne.n	8005cf6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cea:	2181      	movs	r1, #129	; 0x81
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 fe12 	bl	8007916 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e016      	b.n	8005d4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7c1b      	ldrb	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fe10 	bl	8007958 <USBD_LL_PrepareReceive>
 8005d38:	e007      	b.n	8005d4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d40:	2340      	movs	r3, #64	; 0x40
 8005d42:	2101      	movs	r1, #1
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fe07 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e01f      	b.n	8005dac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	79fa      	ldrb	r2, [r7, #7]
 8005d9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f001 fc83 	bl	80076ac <USBD_LL_Init>
 8005da6:	4603      	mov	r3, r0
 8005da8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e016      	b.n	8005dfa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	f107 020e 	add.w	r2, r7, #14
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	4602      	mov	r2, r0
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fc9a 	bl	8007744 <USBD_LL_Start>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d009      	beq.n	8005e5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	4611      	mov	r1, r2
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	4611      	mov	r1, r2
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
  }

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 ff90 	bl	8006dd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d01a      	beq.n	8005f0a <USBD_LL_SetupStage+0x72>
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d822      	bhi.n	8005f1e <USBD_LL_SetupStage+0x86>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <USBD_LL_SetupStage+0x4a>
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d00a      	beq.n	8005ef6 <USBD_LL_SetupStage+0x5e>
 8005ee0:	e01d      	b.n	8005f1e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa62 	bl	80063b4 <USBD_StdDevReq>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e020      	b.n	8005f38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fac6 	bl	8006490 <USBD_StdItfReq>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e016      	b.n	8005f38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb05 	bl	8006522 <USBD_StdEPReq>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	e00c      	b.n	8005f38 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 fc69 	bl	8007804 <USBD_LL_StallEP>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
      break;
 8005f36:	bf00      	nop
  }

  return ret;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f50:	7afb      	ldrb	r3, [r7, #11]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d138      	bne.n	8005fc8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d14a      	bne.n	8005ffe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d913      	bls.n	8005f9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf28      	it	cs
 8005f8e:	4613      	movcs	r3, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 f80f 	bl	8006fb8 <USBD_CtlContinueRx>
 8005f9a:	e030      	b.n	8005ffe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d10b      	bne.n	8005fc0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f001 f80a 	bl	8006fda <USBD_CtlSendStatus>
 8005fc6:	e01a      	b.n	8005ffe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b03      	cmp	r3, #3
 8005fd2:	d114      	bne.n	8005ffe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00e      	beq.n	8005ffe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	7afa      	ldrb	r2, [r7, #11]
 8005fea:	4611      	mov	r1, r2
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	4798      	blx	r3
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	e000      	b.n	8006000 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d16b      	bne.n	80060f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3314      	adds	r3, #20
 8006020:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006028:	2b02      	cmp	r3, #2
 800602a:	d156      	bne.n	80060da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	d914      	bls.n	8006062 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	1ad2      	subs	r2, r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	461a      	mov	r2, r3
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 ff84 	bl	8006f5c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006054:	2300      	movs	r3, #0
 8006056:	2200      	movs	r2, #0
 8006058:	2100      	movs	r1, #0
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 fc7c 	bl	8007958 <USBD_LL_PrepareReceive>
 8006060:	e03b      	b.n	80060da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d11c      	bne.n	80060a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006076:	429a      	cmp	r2, r3
 8006078:	d316      	bcc.n	80060a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006084:	429a      	cmp	r2, r3
 8006086:	d20f      	bcs.n	80060a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 ff65 	bl	8006f5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800609a:	2300      	movs	r3, #0
 800609c:	2200      	movs	r2, #0
 800609e:	2100      	movs	r1, #0
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f001 fc59 	bl	8007958 <USBD_LL_PrepareReceive>
 80060a6:	e018      	b.n	80060da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d10b      	bne.n	80060cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060cc:	2180      	movs	r1, #128	; 0x80
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f001 fb98 	bl	8007804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 ff93 	bl	8007000 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d122      	bne.n	800612a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fe98 	bl	8005e1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060f2:	e01a      	b.n	800612a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d114      	bne.n	800612a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	7afa      	ldrb	r2, [r7, #11]
 8006116:	4611      	mov	r1, r2
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	e000      	b.n	800612c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	e02f      	b.n	80061c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00f      	beq.n	8006192 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6852      	ldr	r2, [r2, #4]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	4611      	mov	r1, r2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006192:	2340      	movs	r3, #64	; 0x40
 8006194:	2200      	movs	r2, #0
 8006196:	2100      	movs	r1, #0
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 faee 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	2200      	movs	r2, #0
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fae0 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	78fa      	ldrb	r2, [r7, #3]
 80061e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b04      	cmp	r3, #4
 800622e:	d106      	bne.n	800623e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006236:	b2da      	uxtb	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800625e:	2303      	movs	r3, #3
 8006260:	e012      	b.n	8006288 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b03      	cmp	r3, #3
 800626c:	d10b      	bne.n	8006286 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e014      	b.n	80062d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d10d      	bne.n	80062d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	4611      	mov	r1, r2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e014      	b.n	8006320 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d10d      	bne.n	800631e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	4611      	mov	r1, r2
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6852      	ldr	r2, [r2, #4]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	4611      	mov	r1, r2
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	4798      	blx	r3
  }

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006376:	b480      	push	{r7}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3301      	adds	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006394:	8a3b      	ldrh	r3, [r7, #16]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	b21a      	sxth	r2, r3
 800639a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800639e:	4313      	orrs	r3, r2
 80063a0:	b21b      	sxth	r3, r3
 80063a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063a4:	89fb      	ldrh	r3, [r7, #14]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d005      	beq.n	80063da <USBD_StdDevReq+0x26>
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d853      	bhi.n	800647a <USBD_StdDevReq+0xc6>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <USBD_StdDevReq+0x3a>
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d14f      	bne.n	800647a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
      break;
 80063ec:	e04a      	b.n	8006484 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	2b09      	cmp	r3, #9
 80063f4:	d83b      	bhi.n	800646e <USBD_StdDevReq+0xba>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <USBD_StdDevReq+0x48>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	08006451 	.word	0x08006451
 8006400:	08006465 	.word	0x08006465
 8006404:	0800646f 	.word	0x0800646f
 8006408:	0800645b 	.word	0x0800645b
 800640c:	0800646f 	.word	0x0800646f
 8006410:	0800642f 	.word	0x0800642f
 8006414:	08006425 	.word	0x08006425
 8006418:	0800646f 	.word	0x0800646f
 800641c:	08006447 	.word	0x08006447
 8006420:	08006439 	.word	0x08006439
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f9de 	bl	80067e8 <USBD_GetDescriptor>
          break;
 800642c:	e024      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fb43 	bl	8006abc <USBD_SetAddress>
          break;
 8006436:	e01f      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fb82 	bl	8006b44 <USBD_SetConfig>
 8006440:	4603      	mov	r3, r0
 8006442:	73fb      	strb	r3, [r7, #15]
          break;
 8006444:	e018      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fc21 	bl	8006c90 <USBD_GetConfig>
          break;
 800644e:	e013      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc52 	bl	8006cfc <USBD_GetStatus>
          break;
 8006458:	e00e      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fc81 	bl	8006d64 <USBD_SetFeature>
          break;
 8006462:	e009      	b.n	8006478 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fc90 	bl	8006d8c <USBD_ClrFeature>
          break;
 800646c:	e004      	b.n	8006478 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fce7 	bl	8006e44 <USBD_CtlError>
          break;
 8006476:	bf00      	nop
      }
      break;
 8006478:	e004      	b.n	8006484 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fce1 	bl	8006e44 <USBD_CtlError>
      break;
 8006482:	bf00      	nop
  }

  return ret;
 8006484:	7bfb      	ldrb	r3, [r7, #15]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop

08006490 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d005      	beq.n	80064b6 <USBD_StdItfReq+0x26>
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d82f      	bhi.n	800650e <USBD_StdItfReq+0x7e>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <USBD_StdItfReq+0x26>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d12b      	bne.n	800650e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d81d      	bhi.n	8006500 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	889b      	ldrh	r3, [r3, #4]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d813      	bhi.n	80064f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	88db      	ldrh	r3, [r3, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d110      	bne.n	800650a <USBD_StdItfReq+0x7a>
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fd73 	bl	8006fda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064f4:	e009      	b.n	800650a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fca3 	bl	8006e44 <USBD_CtlError>
          break;
 80064fe:	e004      	b.n	800650a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fc9e 	bl	8006e44 <USBD_CtlError>
          break;
 8006508:	e000      	b.n	800650c <USBD_StdItfReq+0x7c>
          break;
 800650a:	bf00      	nop
      }
      break;
 800650c:	e004      	b.n	8006518 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fc97 	bl	8006e44 <USBD_CtlError>
      break;
 8006516:	bf00      	nop
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	889b      	ldrh	r3, [r3, #4]
 8006534:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	d007      	beq.n	8006552 <USBD_StdEPReq+0x30>
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	f200 8145 	bhi.w	80067d2 <USBD_StdEPReq+0x2b0>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00c      	beq.n	8006566 <USBD_StdEPReq+0x44>
 800654c:	2b20      	cmp	r3, #32
 800654e:	f040 8140 	bne.w	80067d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e13a      	b.n	80067dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b03      	cmp	r3, #3
 800656c:	d007      	beq.n	800657e <USBD_StdEPReq+0x5c>
 800656e:	2b03      	cmp	r3, #3
 8006570:	f300 8129 	bgt.w	80067c6 <USBD_StdEPReq+0x2a4>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d07f      	beq.n	8006678 <USBD_StdEPReq+0x156>
 8006578:	2b01      	cmp	r3, #1
 800657a:	d03c      	beq.n	80065f6 <USBD_StdEPReq+0xd4>
 800657c:	e123      	b.n	80067c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d002      	beq.n	8006590 <USBD_StdEPReq+0x6e>
 800658a:	2b03      	cmp	r3, #3
 800658c:	d016      	beq.n	80065bc <USBD_StdEPReq+0x9a>
 800658e:	e02c      	b.n	80065ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00d      	beq.n	80065b2 <USBD_StdEPReq+0x90>
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b80      	cmp	r3, #128	; 0x80
 800659a:	d00a      	beq.n	80065b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 f92f 	bl	8007804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065a6:	2180      	movs	r1, #128	; 0x80
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f001 f92b 	bl	8007804 <USBD_LL_StallEP>
 80065ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065b0:	e020      	b.n	80065f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fc45 	bl	8006e44 <USBD_CtlError>
              break;
 80065ba:	e01b      	b.n	80065f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	885b      	ldrh	r3, [r3, #2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10e      	bne.n	80065e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <USBD_StdEPReq+0xc0>
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d008      	beq.n	80065e2 <USBD_StdEPReq+0xc0>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	88db      	ldrh	r3, [r3, #6]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 f911 	bl	8007804 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fcf9 	bl	8006fda <USBD_CtlSendStatus>

              break;
 80065e8:	e004      	b.n	80065f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fc29 	bl	8006e44 <USBD_CtlError>
              break;
 80065f2:	bf00      	nop
          }
          break;
 80065f4:	e0ec      	b.n	80067d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d002      	beq.n	8006608 <USBD_StdEPReq+0xe6>
 8006602:	2b03      	cmp	r3, #3
 8006604:	d016      	beq.n	8006634 <USBD_StdEPReq+0x112>
 8006606:	e030      	b.n	800666a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <USBD_StdEPReq+0x108>
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	2b80      	cmp	r3, #128	; 0x80
 8006612:	d00a      	beq.n	800662a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f8f3 	bl	8007804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800661e:	2180      	movs	r1, #128	; 0x80
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f8ef 	bl	8007804 <USBD_LL_StallEP>
 8006626:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006628:	e025      	b.n	8006676 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fc09 	bl	8006e44 <USBD_CtlError>
              break;
 8006632:	e020      	b.n	8006676 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	885b      	ldrh	r3, [r3, #2]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11b      	bne.n	8006674 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 f8f9 	bl	8007842 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fcc2 	bl	8006fda <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006668:	e004      	b.n	8006674 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fbe9 	bl	8006e44 <USBD_CtlError>
              break;
 8006672:	e000      	b.n	8006676 <USBD_StdEPReq+0x154>
              break;
 8006674:	bf00      	nop
          }
          break;
 8006676:	e0ab      	b.n	80067d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d002      	beq.n	800668a <USBD_StdEPReq+0x168>
 8006684:	2b03      	cmp	r3, #3
 8006686:	d032      	beq.n	80066ee <USBD_StdEPReq+0x1cc>
 8006688:	e097      	b.n	80067ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <USBD_StdEPReq+0x17e>
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d004      	beq.n	80066a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fbd3 	bl	8006e44 <USBD_CtlError>
                break;
 800669e:	e091      	b.n	80067c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da0b      	bge.n	80066c0 <USBD_StdEPReq+0x19e>
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	3310      	adds	r3, #16
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	4413      	add	r3, r2
 80066bc:	3304      	adds	r3, #4
 80066be:	e00b      	b.n	80066d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	4413      	add	r3, r2
 80066d6:	3304      	adds	r3, #4
 80066d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2202      	movs	r2, #2
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fc1d 	bl	8006f26 <USBD_CtlSendData>
              break;
 80066ec:	e06a      	b.n	80067c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da11      	bge.n	800671a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	f003 020f 	and.w	r2, r3, #15
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3324      	adds	r3, #36	; 0x24
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d117      	bne.n	8006740 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fb96 	bl	8006e44 <USBD_CtlError>
                  break;
 8006718:	e054      	b.n	80067c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb83 	bl	8006e44 <USBD_CtlError>
                  break;
 800673e:	e041      	b.n	80067c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006744:	2b00      	cmp	r3, #0
 8006746:	da0b      	bge.n	8006760 <USBD_StdEPReq+0x23e>
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	3310      	adds	r3, #16
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	3304      	adds	r3, #4
 800675e:	e00b      	b.n	8006778 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006766:	4613      	mov	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	3304      	adds	r3, #4
 8006778:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <USBD_StdEPReq+0x264>
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b80      	cmp	r3, #128	; 0x80
 8006784:	d103      	bne.n	800678e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e00e      	b.n	80067ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 f874 	bl	8007880 <USBD_LL_IsStallEP>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e002      	b.n	80067ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2202      	movs	r2, #2
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fbb7 	bl	8006f26 <USBD_CtlSendData>
              break;
 80067b8:	e004      	b.n	80067c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb41 	bl	8006e44 <USBD_CtlError>
              break;
 80067c2:	bf00      	nop
          }
          break;
 80067c4:	e004      	b.n	80067d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb3b 	bl	8006e44 <USBD_CtlError>
          break;
 80067ce:	bf00      	nop
      }
      break;
 80067d0:	e004      	b.n	80067dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fb35 	bl	8006e44 <USBD_CtlError>
      break;
 80067da:	bf00      	nop
  }

  return ret;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	2b06      	cmp	r3, #6
 800680a:	f200 8128 	bhi.w	8006a5e <USBD_GetDescriptor+0x276>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <USBD_GetDescriptor+0x2c>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006831 	.word	0x08006831
 8006818:	08006849 	.word	0x08006849
 800681c:	08006889 	.word	0x08006889
 8006820:	08006a5f 	.word	0x08006a5f
 8006824:	08006a5f 	.word	0x08006a5f
 8006828:	080069ff 	.word	0x080069ff
 800682c:	08006a2b 	.word	0x08006a2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	7c12      	ldrb	r2, [r2, #16]
 800683c:	f107 0108 	add.w	r1, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
      break;
 8006846:	e112      	b.n	8006a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7c1b      	ldrb	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10d      	bne.n	800686c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	f107 0208 	add.w	r2, r7, #8
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800686a:	e100      	b.n	8006a6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	f107 0208 	add.w	r2, r7, #8
 8006878:	4610      	mov	r0, r2
 800687a:	4798      	blx	r3
 800687c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3301      	adds	r3, #1
 8006882:	2202      	movs	r2, #2
 8006884:	701a      	strb	r2, [r3, #0]
      break;
 8006886:	e0f2      	b.n	8006a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	885b      	ldrh	r3, [r3, #2]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b05      	cmp	r3, #5
 8006890:	f200 80ac 	bhi.w	80069ec <USBD_GetDescriptor+0x204>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <USBD_GetDescriptor+0xb4>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068b5 	.word	0x080068b5
 80068a0:	080068e9 	.word	0x080068e9
 80068a4:	0800691d 	.word	0x0800691d
 80068a8:	08006951 	.word	0x08006951
 80068ac:	08006985 	.word	0x08006985
 80068b0:	080069b9 	.word	0x080069b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	7c12      	ldrb	r2, [r2, #16]
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068d6:	e091      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fab2 	bl	8006e44 <USBD_CtlError>
            err++;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	3301      	adds	r3, #1
 80068e4:	72fb      	strb	r3, [r7, #11]
          break;
 80068e6:	e089      	b.n	80069fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690a:	e077      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa98 	bl	8006e44 <USBD_CtlError>
            err++;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	3301      	adds	r3, #1
 8006918:	72fb      	strb	r3, [r7, #11]
          break;
 800691a:	e06f      	b.n	80069fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00b      	beq.n	8006940 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7c12      	ldrb	r2, [r2, #16]
 8006934:	f107 0108 	add.w	r1, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800693e:	e05d      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa7e 	bl	8006e44 <USBD_CtlError>
            err++;
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	3301      	adds	r3, #1
 800694c:	72fb      	strb	r3, [r7, #11]
          break;
 800694e:	e055      	b.n	80069fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	7c12      	ldrb	r2, [r2, #16]
 8006968:	f107 0108 	add.w	r1, r7, #8
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006972:	e043      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa64 	bl	8006e44 <USBD_CtlError>
            err++;
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	3301      	adds	r3, #1
 8006980:	72fb      	strb	r3, [r7, #11]
          break;
 8006982:	e03b      	b.n	80069fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	7c12      	ldrb	r2, [r2, #16]
 800699c:	f107 0108 	add.w	r1, r7, #8
 80069a0:	4610      	mov	r0, r2
 80069a2:	4798      	blx	r3
 80069a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069a6:	e029      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa4a 	bl	8006e44 <USBD_CtlError>
            err++;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	3301      	adds	r3, #1
 80069b4:	72fb      	strb	r3, [r7, #11]
          break;
 80069b6:	e021      	b.n	80069fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	7c12      	ldrb	r2, [r2, #16]
 80069d0:	f107 0108 	add.w	r1, r7, #8
 80069d4:	4610      	mov	r0, r2
 80069d6:	4798      	blx	r3
 80069d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069da:	e00f      	b.n	80069fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa30 	bl	8006e44 <USBD_CtlError>
            err++;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	3301      	adds	r3, #1
 80069e8:	72fb      	strb	r3, [r7, #11]
          break;
 80069ea:	e007      	b.n	80069fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa28 	bl	8006e44 <USBD_CtlError>
          err++;
 80069f4:	7afb      	ldrb	r3, [r7, #11]
 80069f6:	3301      	adds	r3, #1
 80069f8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80069fa:	bf00      	nop
      }
      break;
 80069fc:	e037      	b.n	8006a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	7c1b      	ldrb	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	f107 0208 	add.w	r2, r7, #8
 8006a12:	4610      	mov	r0, r2
 8006a14:	4798      	blx	r3
 8006a16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a18:	e029      	b.n	8006a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa11 	bl	8006e44 <USBD_CtlError>
        err++;
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	3301      	adds	r3, #1
 8006a26:	72fb      	strb	r3, [r7, #11]
      break;
 8006a28:	e021      	b.n	8006a6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7c1b      	ldrb	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f107 0208 	add.w	r2, r7, #8
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4798      	blx	r3
 8006a42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	2207      	movs	r2, #7
 8006a4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a4c:	e00f      	b.n	8006a6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f9f7 	bl	8006e44 <USBD_CtlError>
        err++;
 8006a56:	7afb      	ldrb	r3, [r7, #11]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a5c:	e007      	b.n	8006a6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9ef 	bl	8006e44 <USBD_CtlError>
      err++;
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a6c:	bf00      	nop
  }

  if (err != 0U)
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11e      	bne.n	8006ab2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	88db      	ldrh	r3, [r3, #6]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a7c:	893b      	ldrh	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	88da      	ldrh	r2, [r3, #6]
 8006a86:	893b      	ldrh	r3, [r7, #8]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	bf28      	it	cs
 8006a8c:	4613      	movcs	r3, r2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a92:	893b      	ldrh	r3, [r7, #8]
 8006a94:	461a      	mov	r2, r3
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa44 	bl	8006f26 <USBD_CtlSendData>
 8006a9e:	e009      	b.n	8006ab4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9ce 	bl	8006e44 <USBD_CtlError>
 8006aa8:	e004      	b.n	8006ab4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa95 	bl	8006fda <USBD_CtlSendStatus>
 8006ab0:	e000      	b.n	8006ab4 <USBD_GetDescriptor+0x2cc>
    return;
 8006ab2:	bf00      	nop
  }
}
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop

08006abc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	889b      	ldrh	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d131      	bne.n	8006b32 <USBD_SetAddress+0x76>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	88db      	ldrh	r3, [r3, #6]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d12d      	bne.n	8006b32 <USBD_SetAddress+0x76>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b7f      	cmp	r3, #127	; 0x7f
 8006adc:	d829      	bhi.n	8006b32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	885b      	ldrh	r3, [r3, #2]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d104      	bne.n	8006b00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9a3 	bl	8006e44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afe:	e01d      	b.n	8006b3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7bfa      	ldrb	r2, [r7, #15]
 8006b04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fee3 	bl	80078d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa61 	bl	8006fda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	e009      	b.n	8006b3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b30:	e004      	b.n	8006b3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f985 	bl	8006e44 <USBD_CtlError>
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	885b      	ldrh	r3, [r3, #2]
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	4b4c      	ldr	r3, [pc, #304]	; (8006c8c <USBD_SetConfig+0x148>)
 8006b5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	; (8006c8c <USBD_SetConfig+0x148>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d905      	bls.n	8006b70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f96c 	bl	8006e44 <USBD_CtlError>
    return USBD_FAIL;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e088      	b.n	8006c82 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d002      	beq.n	8006b82 <USBD_SetConfig+0x3e>
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d025      	beq.n	8006bcc <USBD_SetConfig+0x88>
 8006b80:	e071      	b.n	8006c66 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b82:	4b42      	ldr	r3, [pc, #264]	; (8006c8c <USBD_SetConfig+0x148>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01c      	beq.n	8006bc4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b8a:	4b40      	ldr	r3, [pc, #256]	; (8006c8c <USBD_SetConfig+0x148>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b94:	4b3d      	ldr	r3, [pc, #244]	; (8006c8c <USBD_SetConfig+0x148>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff f948 	bl	8005e30 <USBD_SetClassConfig>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d004      	beq.n	8006bb4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f949 	bl	8006e44 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bb2:	e065      	b.n	8006c80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa10 	bl	8006fda <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bc2:	e05d      	b.n	8006c80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa08 	bl	8006fda <USBD_CtlSendStatus>
      break;
 8006bca:	e059      	b.n	8006c80 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bcc:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <USBD_SetConfig+0x148>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d112      	bne.n	8006bfa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bdc:	4b2b      	ldr	r3, [pc, #172]	; (8006c8c <USBD_SetConfig+0x148>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <USBD_SetConfig+0x148>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff f93b 	bl	8005e68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9f1 	bl	8006fda <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bf8:	e042      	b.n	8006c80 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <USBD_SetConfig+0x148>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d02a      	beq.n	8006c5e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff f929 	bl	8005e68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c16:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <USBD_SetConfig+0x148>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <USBD_SetConfig+0x148>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff f902 	bl	8005e30 <USBD_SetClassConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f903 	bl	8006e44 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff f90e 	bl	8005e68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c54:	e014      	b.n	8006c80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f9bf 	bl	8006fda <USBD_CtlSendStatus>
      break;
 8006c5c:	e010      	b.n	8006c80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9bb 	bl	8006fda <USBD_CtlSendStatus>
      break;
 8006c64:	e00c      	b.n	8006c80 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8eb 	bl	8006e44 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c6e:	4b07      	ldr	r3, [pc, #28]	; (8006c8c <USBD_SetConfig+0x148>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff f8f7 	bl	8005e68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7e:	bf00      	nop
  }

  return ret;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000204 	.word	0x20000204

08006c90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	88db      	ldrh	r3, [r3, #6]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d004      	beq.n	8006cac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8cd 	bl	8006e44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006caa:	e023      	b.n	8006cf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	dc02      	bgt.n	8006cbe <USBD_GetConfig+0x2e>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc03      	bgt.n	8006cc4 <USBD_GetConfig+0x34>
 8006cbc:	e015      	b.n	8006cea <USBD_GetConfig+0x5a>
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d00b      	beq.n	8006cda <USBD_GetConfig+0x4a>
 8006cc2:	e012      	b.n	8006cea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f927 	bl	8006f26 <USBD_CtlSendData>
        break;
 8006cd8:	e00c      	b.n	8006cf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3304      	adds	r3, #4
 8006cde:	2201      	movs	r2, #1
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f91f 	bl	8006f26 <USBD_CtlSendData>
        break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f8a9 	bl	8006e44 <USBD_CtlError>
        break;
 8006cf2:	bf00      	nop
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d81e      	bhi.n	8006d52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	88db      	ldrh	r3, [r3, #6]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d004      	beq.n	8006d26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f890 	bl	8006e44 <USBD_CtlError>
        break;
 8006d24:	e01a      	b.n	8006d5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 0202 	orr.w	r2, r3, #2
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	330c      	adds	r3, #12
 8006d46:	2202      	movs	r2, #2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8eb 	bl	8006f26 <USBD_CtlSendData>
      break;
 8006d50:	e004      	b.n	8006d5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f875 	bl	8006e44 <USBD_CtlError>
      break;
 8006d5a:	bf00      	nop
  }
}
 8006d5c:	bf00      	nop
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	885b      	ldrh	r3, [r3, #2]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d106      	bne.n	8006d84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f92b 	bl	8006fda <USBD_CtlSendStatus>
  }
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d80b      	bhi.n	8006dbc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	885b      	ldrh	r3, [r3, #2]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d10c      	bne.n	8006dc6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f910 	bl	8006fda <USBD_CtlSendStatus>
      }
      break;
 8006dba:	e004      	b.n	8006dc6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f840 	bl	8006e44 <USBD_CtlError>
      break;
 8006dc4:	e000      	b.n	8006dc8 <USBD_ClrFeature+0x3c>
      break;
 8006dc6:	bf00      	nop
  }
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	781a      	ldrb	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff fabb 	bl	8006376 <SWAPBYTE>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff faae 	bl	8006376 <SWAPBYTE>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff faa1 	bl	8006376 <SWAPBYTE>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	80da      	strh	r2, [r3, #6]
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fcd7 	bl	8007804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e56:	2100      	movs	r1, #0
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fcd3 	bl	8007804 <USBD_LL_StallEP>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d036      	beq.n	8006eea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e80:	6938      	ldr	r0, [r7, #16]
 8006e82:	f000 f836 	bl	8006ef2 <USBD_GetLen>
 8006e86:	4603      	mov	r3, r0
 8006e88:	3301      	adds	r3, #1
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	4413      	add	r3, r2
 8006eac:	2203      	movs	r2, #3
 8006eae:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006eb6:	e013      	b.n	8006ee0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	613b      	str	r3, [r7, #16]
    idx++;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	3301      	adds	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e7      	bne.n	8006eb8 <USBD_GetString+0x52>
 8006ee8:	e000      	b.n	8006eec <USBD_GetString+0x86>
    return;
 8006eea:	bf00      	nop
  }
}
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b085      	sub	sp, #20
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f02:	e005      	b.n	8006f10 <USBD_GetLen+0x1e>
  {
    len++;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	3301      	adds	r3, #1
 8006f08:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1f5      	bne.n	8006f04 <USBD_GetLen+0x12>
  }

  return len;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fce2 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fcd1 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fcd5 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fcc4 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fea:	2300      	movs	r3, #0
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fc90 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2205      	movs	r2, #5
 800700c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007010:	2300      	movs	r3, #0
 8007012:	2200      	movs	r2, #0
 8007014:	2100      	movs	r1, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fc9e 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800702c:	2200      	movs	r2, #0
 800702e:	4912      	ldr	r1, [pc, #72]	; (8007078 <MX_USB_DEVICE_Init+0x50>)
 8007030:	4812      	ldr	r0, [pc, #72]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007032:	f7fe fe8f 	bl	8005d54 <USBD_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800703c:	f7f9 fe12 	bl	8000c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007040:	490f      	ldr	r1, [pc, #60]	; (8007080 <MX_USB_DEVICE_Init+0x58>)
 8007042:	480e      	ldr	r0, [pc, #56]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007044:	f7fe feb6 	bl	8005db4 <USBD_RegisterClass>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800704e:	f7f9 fe09 	bl	8000c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007052:	490c      	ldr	r1, [pc, #48]	; (8007084 <MX_USB_DEVICE_Init+0x5c>)
 8007054:	4809      	ldr	r0, [pc, #36]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007056:	f7fe fdd7 	bl	8005c08 <USBD_CDC_RegisterInterface>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007060:	f7f9 fe00 	bl	8000c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007064:	4805      	ldr	r0, [pc, #20]	; (800707c <MX_USB_DEVICE_Init+0x54>)
 8007066:	f7fe fecc 	bl	8005e02 <USBD_Start>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007070:	f7f9 fdf8 	bl	8000c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007074:	bf00      	nop
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000130 	.word	0x20000130
 800707c:	200004a0 	.word	0x200004a0
 8007080:	20000018 	.word	0x20000018
 8007084:	2000011c 	.word	0x2000011c

08007088 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800708c:	2200      	movs	r2, #0
 800708e:	4905      	ldr	r1, [pc, #20]	; (80070a4 <CDC_Init_FS+0x1c>)
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <CDC_Init_FS+0x20>)
 8007092:	f7fe fdce 	bl	8005c32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007096:	4905      	ldr	r1, [pc, #20]	; (80070ac <CDC_Init_FS+0x24>)
 8007098:	4803      	ldr	r0, [pc, #12]	; (80070a8 <CDC_Init_FS+0x20>)
 800709a:	f7fe fde8 	bl	8005c6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800709e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000f70 	.word	0x20000f70
 80070a8:	200004a0 	.word	0x200004a0
 80070ac:	20000770 	.word	0x20000770

080070b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	2b23      	cmp	r3, #35	; 0x23
 80070d4:	d84a      	bhi.n	800716c <CDC_Control_FS+0xac>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <CDC_Control_FS+0x1c>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	0800716d 	.word	0x0800716d
 80070e0:	0800716d 	.word	0x0800716d
 80070e4:	0800716d 	.word	0x0800716d
 80070e8:	0800716d 	.word	0x0800716d
 80070ec:	0800716d 	.word	0x0800716d
 80070f0:	0800716d 	.word	0x0800716d
 80070f4:	0800716d 	.word	0x0800716d
 80070f8:	0800716d 	.word	0x0800716d
 80070fc:	0800716d 	.word	0x0800716d
 8007100:	0800716d 	.word	0x0800716d
 8007104:	0800716d 	.word	0x0800716d
 8007108:	0800716d 	.word	0x0800716d
 800710c:	0800716d 	.word	0x0800716d
 8007110:	0800716d 	.word	0x0800716d
 8007114:	0800716d 	.word	0x0800716d
 8007118:	0800716d 	.word	0x0800716d
 800711c:	0800716d 	.word	0x0800716d
 8007120:	0800716d 	.word	0x0800716d
 8007124:	0800716d 	.word	0x0800716d
 8007128:	0800716d 	.word	0x0800716d
 800712c:	0800716d 	.word	0x0800716d
 8007130:	0800716d 	.word	0x0800716d
 8007134:	0800716d 	.word	0x0800716d
 8007138:	0800716d 	.word	0x0800716d
 800713c:	0800716d 	.word	0x0800716d
 8007140:	0800716d 	.word	0x0800716d
 8007144:	0800716d 	.word	0x0800716d
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800716d 	.word	0x0800716d
 8007150:	0800716d 	.word	0x0800716d
 8007154:	0800716d 	.word	0x0800716d
 8007158:	0800716d 	.word	0x0800716d
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800716d 	.word	0x0800716d
 8007164:	0800716d 	.word	0x0800716d
 8007168:	0800716d 	.word	0x0800716d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800716c:	bf00      	nop
  }

  return (USBD_OK);
 800716e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <CDC_Receive_FS+0x24>)
 800718a:	f7fe fd70 	bl	8005c6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800718e:	4804      	ldr	r0, [pc, #16]	; (80071a0 <CDC_Receive_FS+0x24>)
 8007190:	f7fe fdb6 	bl	8005d00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007194:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	200004a0 	.word	0x200004a0

080071a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <CDC_Transmit_FS+0x48>)
 80071b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e00b      	b.n	80071e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4806      	ldr	r0, [pc, #24]	; (80071ec <CDC_Transmit_FS+0x48>)
 80071d2:	f7fe fd2e 	bl	8005c32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <CDC_Transmit_FS+0x48>)
 80071d8:	f7fe fd62 	bl	8005ca0 <USBD_CDC_TransmitPacket>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200004a0 	.word	0x200004a0

080071f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007202:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2212      	movs	r2, #18
 8007224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007226:	4b03      	ldr	r3, [pc, #12]	; (8007234 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	2000014c 	.word	0x2000014c

08007238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2204      	movs	r2, #4
 8007248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800724a:	4b03      	ldr	r3, [pc, #12]	; (8007258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	20000160 	.word	0x20000160

0800725c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4907      	ldr	r1, [pc, #28]	; (8007290 <USBD_FS_ProductStrDescriptor+0x34>)
 8007272:	4808      	ldr	r0, [pc, #32]	; (8007294 <USBD_FS_ProductStrDescriptor+0x38>)
 8007274:	f7ff fdf7 	bl	8006e66 <USBD_GetString>
 8007278:	e004      	b.n	8007284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	4904      	ldr	r1, [pc, #16]	; (8007290 <USBD_FS_ProductStrDescriptor+0x34>)
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <USBD_FS_ProductStrDescriptor+0x38>)
 8007280:	f7ff fdf1 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20001770 	.word	0x20001770
 8007294:	08008354 	.word	0x08008354

08007298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	4904      	ldr	r1, [pc, #16]	; (80072b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072a8:	4804      	ldr	r0, [pc, #16]	; (80072bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072aa:	f7ff fddc 	bl	8006e66 <USBD_GetString>
  return USBD_StrDesc;
 80072ae:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20001770 	.word	0x20001770
 80072bc:	0800836c 	.word	0x0800836c

080072c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	221a      	movs	r2, #26
 80072d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072d2:	f000 f843 	bl	800735c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072d6:	4b02      	ldr	r3, [pc, #8]	; (80072e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000164 	.word	0x20000164

080072e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d105      	bne.n	8007302 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	4907      	ldr	r1, [pc, #28]	; (8007318 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072fa:	4808      	ldr	r0, [pc, #32]	; (800731c <USBD_FS_ConfigStrDescriptor+0x38>)
 80072fc:	f7ff fdb3 	bl	8006e66 <USBD_GetString>
 8007300:	e004      	b.n	800730c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4904      	ldr	r1, [pc, #16]	; (8007318 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007306:	4805      	ldr	r0, [pc, #20]	; (800731c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007308:	f7ff fdad 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20001770 	.word	0x20001770
 800731c:	08008380 	.word	0x08008380

08007320 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	4603      	mov	r3, r0
 8007328:	6039      	str	r1, [r7, #0]
 800732a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d105      	bne.n	800733e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	4907      	ldr	r1, [pc, #28]	; (8007354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007336:	4808      	ldr	r0, [pc, #32]	; (8007358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007338:	f7ff fd95 	bl	8006e66 <USBD_GetString>
 800733c:	e004      	b.n	8007348 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	4904      	ldr	r1, [pc, #16]	; (8007354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007342:	4805      	ldr	r0, [pc, #20]	; (8007358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007344:	f7ff fd8f 	bl	8006e66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007348:	4b02      	ldr	r3, [pc, #8]	; (8007354 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20001770 	.word	0x20001770
 8007358:	0800838c 	.word	0x0800838c

0800735c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007362:	4b0f      	ldr	r3, [pc, #60]	; (80073a0 <Get_SerialNum+0x44>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007368:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <Get_SerialNum+0x48>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800736e:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <Get_SerialNum+0x4c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007382:	2208      	movs	r2, #8
 8007384:	4909      	ldr	r1, [pc, #36]	; (80073ac <Get_SerialNum+0x50>)
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f814 	bl	80073b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800738c:	2204      	movs	r2, #4
 800738e:	4908      	ldr	r1, [pc, #32]	; (80073b0 <Get_SerialNum+0x54>)
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f000 f80f 	bl	80073b4 <IntToUnicode>
  }
}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	1fff7a10 	.word	0x1fff7a10
 80073a4:	1fff7a14 	.word	0x1fff7a14
 80073a8:	1fff7a18 	.word	0x1fff7a18
 80073ac:	20000166 	.word	0x20000166
 80073b0:	20000176 	.word	0x20000176

080073b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]
 80073ca:	e027      	b.n	800741c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	0f1b      	lsrs	r3, r3, #28
 80073d0:	2b09      	cmp	r3, #9
 80073d2:	d80b      	bhi.n	80073ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	0f1b      	lsrs	r3, r3, #28
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4619      	mov	r1, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	440b      	add	r3, r1
 80073e4:	3230      	adds	r2, #48	; 0x30
 80073e6:	b2d2      	uxtb	r2, r2
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e00a      	b.n	8007402 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	0f1b      	lsrs	r3, r3, #28
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4619      	mov	r1, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	440b      	add	r3, r1
 80073fc:	3237      	adds	r2, #55	; 0x37
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	3301      	adds	r3, #1
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	4413      	add	r3, r2
 8007412:	2200      	movs	r2, #0
 8007414:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	3301      	adds	r3, #1
 800741a:	75fb      	strb	r3, [r7, #23]
 800741c:	7dfa      	ldrb	r2, [r7, #23]
 800741e:	79fb      	ldrb	r3, [r7, #7]
 8007420:	429a      	cmp	r2, r3
 8007422:	d3d3      	bcc.n	80073cc <IntToUnicode+0x18>
  }
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007454:	d13a      	bne.n	80074cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 8007460:	f043 0301 	orr.w	r3, r3, #1
 8007464:	6313      	str	r3, [r2, #48]	; 0x30
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007472:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007478:	2302      	movs	r3, #2
 800747a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	2300      	movs	r3, #0
 800747e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007480:	2303      	movs	r3, #3
 8007482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007484:	230a      	movs	r3, #10
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007488:	f107 0314 	add.w	r3, r7, #20
 800748c:	4619      	mov	r1, r3
 800748e:	4812      	ldr	r0, [pc, #72]	; (80074d8 <HAL_PCD_MspInit+0xa4>)
 8007490:	f7f9 feac 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	4a0e      	ldr	r2, [pc, #56]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	6353      	str	r3, [r2, #52]	; 0x34
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 80074aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ae:	6453      	str	r3, [r2, #68]	; 0x44
 80074b0:	4b08      	ldr	r3, [pc, #32]	; (80074d4 <HAL_PCD_MspInit+0xa0>)
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	2043      	movs	r0, #67	; 0x43
 80074c2:	f7f9 fe5c 	bl	800117e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074c6:	2043      	movs	r0, #67	; 0x43
 80074c8:	f7f9 fe75 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074cc:	bf00      	nop
 80074ce:	3728      	adds	r7, #40	; 0x28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40020000 	.word	0x40020000

080074dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f7fe fcd0 	bl	8005e98 <USBD_LL_SetupStage>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	4619      	mov	r1, r3
 800752a:	f7fe fd0a 	bl	8005f42 <USBD_LL_DataOutStage>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4613      	mov	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	1a9b      	subs	r3, r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	3348      	adds	r3, #72	; 0x48
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	4619      	mov	r1, r3
 800755e:	f7fe fd53 	bl	8006008 <USBD_LL_DataInStage>
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fe67 	bl	800624c <USBD_LL_SOF>
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800758e:	2301      	movs	r3, #1
 8007590:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d001      	beq.n	800759e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800759a:	f7f9 fb63 	bl	8000c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fe11 	bl	80061d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fdbd 	bl	8006134 <USBD_LL_Reset>
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fe0c 	bl	80061f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	4a03      	ldr	r2, [pc, #12]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fe:	f043 0306 	orr.w	r3, r3, #6
 8007602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fdfc 	bl	800621c <USBD_LL_Resume>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fe4a 	bl	80062dc <USBD_LL_IsoOUTIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fe12 	bl	8006290 <USBD_LL_IsoINIncomplete>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fe50 	bl	8006328 <USBD_LL_DevConnected>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fe4d 	bl	800633e <USBD_LL_DevDisconnected>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13c      	bne.n	8007736 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <USBD_LL_Init+0x94>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <USBD_LL_Init+0x94>)
 80076c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076cc:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <USBD_LL_Init+0x94>)
 80076ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <USBD_LL_Init+0x94>)
 80076d6:	2204      	movs	r2, #4
 80076d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <USBD_LL_Init+0x94>)
 80076dc:	2202      	movs	r2, #2
 80076de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <USBD_LL_Init+0x94>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <USBD_LL_Init+0x94>)
 80076e8:	2202      	movs	r2, #2
 80076ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <USBD_LL_Init+0x94>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <USBD_LL_Init+0x94>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <USBD_LL_Init+0x94>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <USBD_LL_Init+0x94>)
 8007700:	2200      	movs	r2, #0
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <USBD_LL_Init+0x94>)
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800770a:	480d      	ldr	r0, [pc, #52]	; (8007740 <USBD_LL_Init+0x94>)
 800770c:	f7fa fecb 	bl	80024a6 <HAL_PCD_Init>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007716:	f7f9 faa5 	bl	8000c64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	4808      	ldr	r0, [pc, #32]	; (8007740 <USBD_LL_Init+0x94>)
 800771e:	f7fc f828 	bl	8003772 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007722:	2240      	movs	r2, #64	; 0x40
 8007724:	2100      	movs	r1, #0
 8007726:	4806      	ldr	r0, [pc, #24]	; (8007740 <USBD_LL_Init+0x94>)
 8007728:	f7fb ffdc 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800772c:	2280      	movs	r2, #128	; 0x80
 800772e:	2101      	movs	r1, #1
 8007730:	4803      	ldr	r0, [pc, #12]	; (8007740 <USBD_LL_Init+0x94>)
 8007732:	f7fb ffd7 	bl	80036e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20001970 	.word	0x20001970

08007744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	4618      	mov	r0, r3
 800775c:	f7fa ffc0 	bl	80026e0 <HAL_PCD_Start>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f942 	bl	80079f0 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077a2:	78bb      	ldrb	r3, [r7, #2]
 80077a4:	883a      	ldrh	r2, [r7, #0]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	f7fb fba4 	bl	8002ef4 <HAL_PCD_EP_Open>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f91c 	bl	80079f0 <USBD_Get_USB_Status>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fb fbed 	bl	8002fc4 <HAL_PCD_EP_Close>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f8fd 	bl	80079f0 <USBD_Get_USB_Status>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fb fcc5 	bl	80031b2 <HAL_PCD_EP_SetStall>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f8de 	bl	80079f0 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	4611      	mov	r1, r2
 8007860:	4618      	mov	r0, r3
 8007862:	f7fb fd0a 	bl	800327a <HAL_PCD_EP_ClrStall>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 f8bf 	bl	80079f0 <USBD_Get_USB_Status>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007876:	7bbb      	ldrb	r3, [r7, #14]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0b      	bge.n	80078b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	333e      	adds	r3, #62	; 0x3e
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	e00b      	b.n	80078cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fb fad7 	bl	8002eaa <HAL_PCD_SetAddress>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f874 	bl	80079f0 <USBD_Get_USB_Status>
 8007908:	4603      	mov	r3, r0
 800790a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	460b      	mov	r3, r1
 8007924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007934:	7af9      	ldrb	r1, [r7, #11]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	f7fb fbf0 	bl	800311e <HAL_PCD_EP_Transmit>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f853 	bl	80079f0 <USBD_Get_USB_Status>
 800794a:	4603      	mov	r3, r0
 800794c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800794e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	460b      	mov	r3, r1
 8007966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007976:	7af9      	ldrb	r1, [r7, #11]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f7fb fb6c 	bl	8003058 <HAL_PCD_EP_Receive>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f832 	bl	80079f0 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007990:	7dbb      	ldrb	r3, [r7, #22]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fb fb9c 	bl	80030ee <HAL_PCD_EP_GetRxCount>
 80079b6:	4603      	mov	r3, r0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <USBD_static_malloc+0x18>)
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000208 	.word	0x20000208

080079dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d817      	bhi.n	8007a34 <USBD_Get_USB_Status+0x44>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBD_Get_USB_Status+0x1c>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a23 	.word	0x08007a23
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a2f 	.word	0x08007a2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a20:	e00b      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a22:	2303      	movs	r3, #3
 8007a24:	73fb      	strb	r3, [r7, #15]
    break;
 8007a26:	e008      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a2c:	e005      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	73fb      	strb	r3, [r7, #15]
    break;
 8007a32:	e002      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	bf00      	nop
  }
  return usb_status;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000180 	.word	0x20000180

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4d0d      	ldr	r5, [pc, #52]	; (8007a8c <__libc_init_array+0x38>)
 8007a58:	4c0d      	ldr	r4, [pc, #52]	; (8007a90 <__libc_init_array+0x3c>)
 8007a5a:	1b64      	subs	r4, r4, r5
 8007a5c:	10a4      	asrs	r4, r4, #2
 8007a5e:	2600      	movs	r6, #0
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	4d0b      	ldr	r5, [pc, #44]	; (8007a94 <__libc_init_array+0x40>)
 8007a66:	4c0c      	ldr	r4, [pc, #48]	; (8007a98 <__libc_init_array+0x44>)
 8007a68:	f000 fc62 	bl	8008330 <_init>
 8007a6c:	1b64      	subs	r4, r4, r5
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	2600      	movs	r6, #0
 8007a72:	42a6      	cmp	r6, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7c:	4798      	blx	r3
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a86:	4798      	blx	r3
 8007a88:	3601      	adds	r6, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	080083f0 	.word	0x080083f0
 8007a90:	080083f0 	.word	0x080083f0
 8007a94:	080083f0 	.word	0x080083f0
 8007a98:	080083f4 	.word	0x080083f4

08007a9c <memset>:
 8007a9c:	4402      	add	r2, r0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <sniprintf>:
 8007aac:	b40c      	push	{r2, r3}
 8007aae:	b530      	push	{r4, r5, lr}
 8007ab0:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <sniprintf+0x64>)
 8007ab2:	1e0c      	subs	r4, r1, #0
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	b09d      	sub	sp, #116	; 0x74
 8007ab8:	da08      	bge.n	8007acc <sniprintf+0x20>
 8007aba:	238b      	movs	r3, #139	; 0x8b
 8007abc:	602b      	str	r3, [r5, #0]
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac2:	b01d      	add	sp, #116	; 0x74
 8007ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ac8:	b002      	add	sp, #8
 8007aca:	4770      	bx	lr
 8007acc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ad4:	bf14      	ite	ne
 8007ad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ada:	4623      	moveq	r3, r4
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ae4:	9002      	str	r0, [sp, #8]
 8007ae6:	9006      	str	r0, [sp, #24]
 8007ae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007aec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007aee:	ab21      	add	r3, sp, #132	; 0x84
 8007af0:	a902      	add	r1, sp, #8
 8007af2:	4628      	mov	r0, r5
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f000 f869 	bl	8007bcc <_svfiprintf_r>
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	bfbc      	itt	lt
 8007afe:	238b      	movlt	r3, #139	; 0x8b
 8007b00:	602b      	strlt	r3, [r5, #0]
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d0dd      	beq.n	8007ac2 <sniprintf+0x16>
 8007b06:	9b02      	ldr	r3, [sp, #8]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	e7d9      	b.n	8007ac2 <sniprintf+0x16>
 8007b0e:	bf00      	nop
 8007b10:	20000180 	.word	0x20000180

08007b14 <__ssputs_r>:
 8007b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	688e      	ldr	r6, [r1, #8]
 8007b1a:	429e      	cmp	r6, r3
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	4690      	mov	r8, r2
 8007b22:	461f      	mov	r7, r3
 8007b24:	d838      	bhi.n	8007b98 <__ssputs_r+0x84>
 8007b26:	898a      	ldrh	r2, [r1, #12]
 8007b28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b2c:	d032      	beq.n	8007b94 <__ssputs_r+0x80>
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	6909      	ldr	r1, [r1, #16]
 8007b32:	eba5 0901 	sub.w	r9, r5, r1
 8007b36:	6965      	ldr	r5, [r4, #20]
 8007b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b40:	3301      	adds	r3, #1
 8007b42:	444b      	add	r3, r9
 8007b44:	106d      	asrs	r5, r5, #1
 8007b46:	429d      	cmp	r5, r3
 8007b48:	bf38      	it	cc
 8007b4a:	461d      	movcc	r5, r3
 8007b4c:	0553      	lsls	r3, r2, #21
 8007b4e:	d531      	bpl.n	8007bb4 <__ssputs_r+0xa0>
 8007b50:	4629      	mov	r1, r5
 8007b52:	f000 fb47 	bl	80081e4 <_malloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	b950      	cbnz	r0, 8007b70 <__ssputs_r+0x5c>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	f8ca 3000 	str.w	r3, [sl]
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	81a3      	strh	r3, [r4, #12]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	6921      	ldr	r1, [r4, #16]
 8007b72:	464a      	mov	r2, r9
 8007b74:	f000 fabe 	bl	80080f4 <memcpy>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	6126      	str	r6, [r4, #16]
 8007b86:	6165      	str	r5, [r4, #20]
 8007b88:	444e      	add	r6, r9
 8007b8a:	eba5 0509 	sub.w	r5, r5, r9
 8007b8e:	6026      	str	r6, [r4, #0]
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	463e      	mov	r6, r7
 8007b94:	42be      	cmp	r6, r7
 8007b96:	d900      	bls.n	8007b9a <__ssputs_r+0x86>
 8007b98:	463e      	mov	r6, r7
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	f000 fab6 	bl	8008110 <memmove>
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	4432      	add	r2, r6
 8007bac:	60a3      	str	r3, [r4, #8]
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e7db      	b.n	8007b6c <__ssputs_r+0x58>
 8007bb4:	462a      	mov	r2, r5
 8007bb6:	f000 fb6f 	bl	8008298 <_realloc_r>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d1e1      	bne.n	8007b84 <__ssputs_r+0x70>
 8007bc0:	6921      	ldr	r1, [r4, #16]
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f000 fabe 	bl	8008144 <_free_r>
 8007bc8:	e7c7      	b.n	8007b5a <__ssputs_r+0x46>
	...

08007bcc <_svfiprintf_r>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	898b      	ldrh	r3, [r1, #12]
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	b09d      	sub	sp, #116	; 0x74
 8007bd8:	4607      	mov	r7, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	d50e      	bpl.n	8007bfe <_svfiprintf_r+0x32>
 8007be0:	690b      	ldr	r3, [r1, #16]
 8007be2:	b963      	cbnz	r3, 8007bfe <_svfiprintf_r+0x32>
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	f000 fafd 	bl	80081e4 <_malloc_r>
 8007bea:	6028      	str	r0, [r5, #0]
 8007bec:	6128      	str	r0, [r5, #16]
 8007bee:	b920      	cbnz	r0, 8007bfa <_svfiprintf_r+0x2e>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	e0d1      	b.n	8007d9e <_svfiprintf_r+0x1d2>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	616b      	str	r3, [r5, #20]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9309      	str	r3, [sp, #36]	; 0x24
 8007c02:	2320      	movs	r3, #32
 8007c04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0c:	2330      	movs	r3, #48	; 0x30
 8007c0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007db8 <_svfiprintf_r+0x1ec>
 8007c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c16:	f04f 0901 	mov.w	r9, #1
 8007c1a:	4623      	mov	r3, r4
 8007c1c:	469a      	mov	sl, r3
 8007c1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c22:	b10a      	cbz	r2, 8007c28 <_svfiprintf_r+0x5c>
 8007c24:	2a25      	cmp	r2, #37	; 0x25
 8007c26:	d1f9      	bne.n	8007c1c <_svfiprintf_r+0x50>
 8007c28:	ebba 0b04 	subs.w	fp, sl, r4
 8007c2c:	d00b      	beq.n	8007c46 <_svfiprintf_r+0x7a>
 8007c2e:	465b      	mov	r3, fp
 8007c30:	4622      	mov	r2, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff ff6d 	bl	8007b14 <__ssputs_r>
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f000 80aa 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c42:	445a      	add	r2, fp
 8007c44:	9209      	str	r2, [sp, #36]	; 0x24
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 80a2 	beq.w	8007d94 <_svfiprintf_r+0x1c8>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f04f 32ff 	mov.w	r2, #4294967295
 8007c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c5a:	f10a 0a01 	add.w	sl, sl, #1
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c66:	931a      	str	r3, [sp, #104]	; 0x68
 8007c68:	4654      	mov	r4, sl
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c70:	4851      	ldr	r0, [pc, #324]	; (8007db8 <_svfiprintf_r+0x1ec>)
 8007c72:	f7f8 fab5 	bl	80001e0 <memchr>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	b9d8      	cbnz	r0, 8007cb2 <_svfiprintf_r+0xe6>
 8007c7a:	06d0      	lsls	r0, r2, #27
 8007c7c:	bf44      	itt	mi
 8007c7e:	2320      	movmi	r3, #32
 8007c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c84:	0711      	lsls	r1, r2, #28
 8007c86:	bf44      	itt	mi
 8007c88:	232b      	movmi	r3, #43	; 0x2b
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c92:	2b2a      	cmp	r3, #42	; 0x2a
 8007c94:	d015      	beq.n	8007cc2 <_svfiprintf_r+0xf6>
 8007c96:	9a07      	ldr	r2, [sp, #28]
 8007c98:	4654      	mov	r4, sl
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f04f 0c0a 	mov.w	ip, #10
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca6:	3b30      	subs	r3, #48	; 0x30
 8007ca8:	2b09      	cmp	r3, #9
 8007caa:	d94e      	bls.n	8007d4a <_svfiprintf_r+0x17e>
 8007cac:	b1b0      	cbz	r0, 8007cdc <_svfiprintf_r+0x110>
 8007cae:	9207      	str	r2, [sp, #28]
 8007cb0:	e014      	b.n	8007cdc <_svfiprintf_r+0x110>
 8007cb2:	eba0 0308 	sub.w	r3, r0, r8
 8007cb6:	fa09 f303 	lsl.w	r3, r9, r3
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	46a2      	mov	sl, r4
 8007cc0:	e7d2      	b.n	8007c68 <_svfiprintf_r+0x9c>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	1d19      	adds	r1, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9103      	str	r1, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbb      	ittet	lt
 8007cce:	425b      	neglt	r3, r3
 8007cd0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cd4:	9307      	strge	r3, [sp, #28]
 8007cd6:	9307      	strlt	r3, [sp, #28]
 8007cd8:	bfb8      	it	lt
 8007cda:	9204      	strlt	r2, [sp, #16]
 8007cdc:	7823      	ldrb	r3, [r4, #0]
 8007cde:	2b2e      	cmp	r3, #46	; 0x2e
 8007ce0:	d10c      	bne.n	8007cfc <_svfiprintf_r+0x130>
 8007ce2:	7863      	ldrb	r3, [r4, #1]
 8007ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce6:	d135      	bne.n	8007d54 <_svfiprintf_r+0x188>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	9203      	str	r2, [sp, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bfb8      	it	lt
 8007cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf8:	3402      	adds	r4, #2
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007dc8 <_svfiprintf_r+0x1fc>
 8007d00:	7821      	ldrb	r1, [r4, #0]
 8007d02:	2203      	movs	r2, #3
 8007d04:	4650      	mov	r0, sl
 8007d06:	f7f8 fa6b 	bl	80001e0 <memchr>
 8007d0a:	b140      	cbz	r0, 8007d1e <_svfiprintf_r+0x152>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	eba0 000a 	sub.w	r0, r0, sl
 8007d12:	fa03 f000 	lsl.w	r0, r3, r0
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	4303      	orrs	r3, r0
 8007d1a:	3401      	adds	r4, #1
 8007d1c:	9304      	str	r3, [sp, #16]
 8007d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d22:	4826      	ldr	r0, [pc, #152]	; (8007dbc <_svfiprintf_r+0x1f0>)
 8007d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d28:	2206      	movs	r2, #6
 8007d2a:	f7f8 fa59 	bl	80001e0 <memchr>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d038      	beq.n	8007da4 <_svfiprintf_r+0x1d8>
 8007d32:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <_svfiprintf_r+0x1f4>)
 8007d34:	bb1b      	cbnz	r3, 8007d7e <_svfiprintf_r+0x1b2>
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	3307      	adds	r3, #7
 8007d3a:	f023 0307 	bic.w	r3, r3, #7
 8007d3e:	3308      	adds	r3, #8
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	4433      	add	r3, r6
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	e767      	b.n	8007c1a <_svfiprintf_r+0x4e>
 8007d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4e:	460c      	mov	r4, r1
 8007d50:	2001      	movs	r0, #1
 8007d52:	e7a5      	b.n	8007ca0 <_svfiprintf_r+0xd4>
 8007d54:	2300      	movs	r3, #0
 8007d56:	3401      	adds	r4, #1
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	4620      	mov	r0, r4
 8007d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d66:	3a30      	subs	r2, #48	; 0x30
 8007d68:	2a09      	cmp	r2, #9
 8007d6a:	d903      	bls.n	8007d74 <_svfiprintf_r+0x1a8>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c5      	beq.n	8007cfc <_svfiprintf_r+0x130>
 8007d70:	9105      	str	r1, [sp, #20]
 8007d72:	e7c3      	b.n	8007cfc <_svfiprintf_r+0x130>
 8007d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d78:	4604      	mov	r4, r0
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e7f0      	b.n	8007d60 <_svfiprintf_r+0x194>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007d86:	a904      	add	r1, sp, #16
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f3af 8000 	nop.w
 8007d8e:	1c42      	adds	r2, r0, #1
 8007d90:	4606      	mov	r6, r0
 8007d92:	d1d6      	bne.n	8007d42 <_svfiprintf_r+0x176>
 8007d94:	89ab      	ldrh	r3, [r5, #12]
 8007d96:	065b      	lsls	r3, r3, #25
 8007d98:	f53f af2c 	bmi.w	8007bf4 <_svfiprintf_r+0x28>
 8007d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d9e:	b01d      	add	sp, #116	; 0x74
 8007da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	ab03      	add	r3, sp, #12
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	462a      	mov	r2, r5
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <_svfiprintf_r+0x1f8>)
 8007dac:	a904      	add	r1, sp, #16
 8007dae:	4638      	mov	r0, r7
 8007db0:	f000 f87a 	bl	8007ea8 <_printf_i>
 8007db4:	e7eb      	b.n	8007d8e <_svfiprintf_r+0x1c2>
 8007db6:	bf00      	nop
 8007db8:	080083b4 	.word	0x080083b4
 8007dbc:	080083be 	.word	0x080083be
 8007dc0:	00000000 	.word	0x00000000
 8007dc4:	08007b15 	.word	0x08007b15
 8007dc8:	080083ba 	.word	0x080083ba

08007dcc <_printf_common>:
 8007dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	688a      	ldr	r2, [r1, #8]
 8007dd6:	690b      	ldr	r3, [r1, #16]
 8007dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	bfb8      	it	lt
 8007de0:	4613      	movlt	r3, r2
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de8:	4607      	mov	r7, r0
 8007dea:	460c      	mov	r4, r1
 8007dec:	b10a      	cbz	r2, 8007df2 <_printf_common+0x26>
 8007dee:	3301      	adds	r3, #1
 8007df0:	6033      	str	r3, [r6, #0]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	0699      	lsls	r1, r3, #26
 8007df6:	bf42      	ittt	mi
 8007df8:	6833      	ldrmi	r3, [r6, #0]
 8007dfa:	3302      	addmi	r3, #2
 8007dfc:	6033      	strmi	r3, [r6, #0]
 8007dfe:	6825      	ldr	r5, [r4, #0]
 8007e00:	f015 0506 	ands.w	r5, r5, #6
 8007e04:	d106      	bne.n	8007e14 <_printf_common+0x48>
 8007e06:	f104 0a19 	add.w	sl, r4, #25
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	6832      	ldr	r2, [r6, #0]
 8007e0e:	1a9b      	subs	r3, r3, r2
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dc26      	bgt.n	8007e62 <_printf_common+0x96>
 8007e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e18:	1e13      	subs	r3, r2, #0
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	bf18      	it	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	0692      	lsls	r2, r2, #26
 8007e22:	d42b      	bmi.n	8007e7c <_printf_common+0xb0>
 8007e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e28:	4649      	mov	r1, r9
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d01e      	beq.n	8007e70 <_printf_common+0xa4>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	68e5      	ldr	r5, [r4, #12]
 8007e36:	6832      	ldr	r2, [r6, #0]
 8007e38:	f003 0306 	and.w	r3, r3, #6
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	bf08      	it	eq
 8007e40:	1aad      	subeq	r5, r5, r2
 8007e42:	68a3      	ldr	r3, [r4, #8]
 8007e44:	6922      	ldr	r2, [r4, #16]
 8007e46:	bf0c      	ite	eq
 8007e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e4c:	2500      	movne	r5, #0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	bfc4      	itt	gt
 8007e52:	1a9b      	subgt	r3, r3, r2
 8007e54:	18ed      	addgt	r5, r5, r3
 8007e56:	2600      	movs	r6, #0
 8007e58:	341a      	adds	r4, #26
 8007e5a:	42b5      	cmp	r5, r6
 8007e5c:	d11a      	bne.n	8007e94 <_printf_common+0xc8>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	e008      	b.n	8007e74 <_printf_common+0xa8>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4652      	mov	r2, sl
 8007e66:	4649      	mov	r1, r9
 8007e68:	4638      	mov	r0, r7
 8007e6a:	47c0      	blx	r8
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d103      	bne.n	8007e78 <_printf_common+0xac>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	3501      	adds	r5, #1
 8007e7a:	e7c6      	b.n	8007e0a <_printf_common+0x3e>
 8007e7c:	18e1      	adds	r1, r4, r3
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	2030      	movs	r0, #48	; 0x30
 8007e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e86:	4422      	add	r2, r4
 8007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e90:	3302      	adds	r3, #2
 8007e92:	e7c7      	b.n	8007e24 <_printf_common+0x58>
 8007e94:	2301      	movs	r3, #1
 8007e96:	4622      	mov	r2, r4
 8007e98:	4649      	mov	r1, r9
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	47c0      	blx	r8
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d0e6      	beq.n	8007e70 <_printf_common+0xa4>
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7d9      	b.n	8007e5a <_printf_common+0x8e>
	...

08007ea8 <_printf_i>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	460c      	mov	r4, r1
 8007eae:	4691      	mov	r9, r2
 8007eb0:	7e27      	ldrb	r7, [r4, #24]
 8007eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eb4:	2f78      	cmp	r7, #120	; 0x78
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	469a      	mov	sl, r3
 8007eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ebe:	d807      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ec0:	2f62      	cmp	r7, #98	; 0x62
 8007ec2:	d80a      	bhi.n	8007eda <_printf_i+0x32>
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	f000 80d8 	beq.w	800807a <_printf_i+0x1d2>
 8007eca:	2f58      	cmp	r7, #88	; 0x58
 8007ecc:	f000 80a3 	beq.w	8008016 <_printf_i+0x16e>
 8007ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed8:	e03a      	b.n	8007f50 <_printf_i+0xa8>
 8007eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ede:	2b15      	cmp	r3, #21
 8007ee0:	d8f6      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ee2:	a001      	add	r0, pc, #4	; (adr r0, 8007ee8 <_printf_i+0x40>)
 8007ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007ed1 	.word	0x08007ed1
 8007ef4:	08007ed1 	.word	0x08007ed1
 8007ef8:	08007ed1 	.word	0x08007ed1
 8007efc:	08007ed1 	.word	0x08007ed1
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007ed1 	.word	0x08007ed1
 8007f08:	08007ed1 	.word	0x08007ed1
 8007f0c:	08007ed1 	.word	0x08007ed1
 8007f10:	08007ed1 	.word	0x08007ed1
 8007f14:	08008061 	.word	0x08008061
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08008043 	.word	0x08008043
 8007f20:	08007ed1 	.word	0x08007ed1
 8007f24:	08007ed1 	.word	0x08007ed1
 8007f28:	08008083 	.word	0x08008083
 8007f2c:	08007ed1 	.word	0x08007ed1
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007ed1 	.word	0x08007ed1
 8007f38:	08007ed1 	.word	0x08007ed1
 8007f3c:	0800804b 	.word	0x0800804b
 8007f40:	680b      	ldr	r3, [r1, #0]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	600a      	str	r2, [r1, #0]
 8007f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f50:	2301      	movs	r3, #1
 8007f52:	e0a3      	b.n	800809c <_printf_i+0x1f4>
 8007f54:	6825      	ldr	r5, [r4, #0]
 8007f56:	6808      	ldr	r0, [r1, #0]
 8007f58:	062e      	lsls	r6, r5, #24
 8007f5a:	f100 0304 	add.w	r3, r0, #4
 8007f5e:	d50a      	bpl.n	8007f76 <_printf_i+0xce>
 8007f60:	6805      	ldr	r5, [r0, #0]
 8007f62:	600b      	str	r3, [r1, #0]
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	da03      	bge.n	8007f70 <_printf_i+0xc8>
 8007f68:	232d      	movs	r3, #45	; 0x2d
 8007f6a:	426d      	negs	r5, r5
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	485e      	ldr	r0, [pc, #376]	; (80080ec <_printf_i+0x244>)
 8007f72:	230a      	movs	r3, #10
 8007f74:	e019      	b.n	8007faa <_printf_i+0x102>
 8007f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007f7a:	6805      	ldr	r5, [r0, #0]
 8007f7c:	600b      	str	r3, [r1, #0]
 8007f7e:	bf18      	it	ne
 8007f80:	b22d      	sxthne	r5, r5
 8007f82:	e7ef      	b.n	8007f64 <_printf_i+0xbc>
 8007f84:	680b      	ldr	r3, [r1, #0]
 8007f86:	6825      	ldr	r5, [r4, #0]
 8007f88:	1d18      	adds	r0, r3, #4
 8007f8a:	6008      	str	r0, [r1, #0]
 8007f8c:	0628      	lsls	r0, r5, #24
 8007f8e:	d501      	bpl.n	8007f94 <_printf_i+0xec>
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	e002      	b.n	8007f9a <_printf_i+0xf2>
 8007f94:	0669      	lsls	r1, r5, #25
 8007f96:	d5fb      	bpl.n	8007f90 <_printf_i+0xe8>
 8007f98:	881d      	ldrh	r5, [r3, #0]
 8007f9a:	4854      	ldr	r0, [pc, #336]	; (80080ec <_printf_i+0x244>)
 8007f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2308      	moveq	r3, #8
 8007fa2:	230a      	movne	r3, #10
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007faa:	6866      	ldr	r6, [r4, #4]
 8007fac:	60a6      	str	r6, [r4, #8]
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	bfa2      	ittt	ge
 8007fb2:	6821      	ldrge	r1, [r4, #0]
 8007fb4:	f021 0104 	bicge.w	r1, r1, #4
 8007fb8:	6021      	strge	r1, [r4, #0]
 8007fba:	b90d      	cbnz	r5, 8007fc0 <_printf_i+0x118>
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d04d      	beq.n	800805c <_printf_i+0x1b4>
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007fca:	5dc7      	ldrb	r7, [r0, r7]
 8007fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fd0:	462f      	mov	r7, r5
 8007fd2:	42bb      	cmp	r3, r7
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	d9f4      	bls.n	8007fc2 <_printf_i+0x11a>
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d10b      	bne.n	8007ff4 <_printf_i+0x14c>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	07df      	lsls	r7, r3, #31
 8007fe0:	d508      	bpl.n	8007ff4 <_printf_i+0x14c>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	6861      	ldr	r1, [r4, #4]
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	bfde      	ittt	le
 8007fea:	2330      	movle	r3, #48	; 0x30
 8007fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ff4:	1b92      	subs	r2, r2, r6
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	f8cd a000 	str.w	sl, [sp]
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	aa03      	add	r2, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	4640      	mov	r0, r8
 8008004:	f7ff fee2 	bl	8007dcc <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	d14c      	bne.n	80080a6 <_printf_i+0x1fe>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	b004      	add	sp, #16
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	4835      	ldr	r0, [pc, #212]	; (80080ec <_printf_i+0x244>)
 8008018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	680e      	ldr	r6, [r1, #0]
 8008020:	061f      	lsls	r7, r3, #24
 8008022:	f856 5b04 	ldr.w	r5, [r6], #4
 8008026:	600e      	str	r6, [r1, #0]
 8008028:	d514      	bpl.n	8008054 <_printf_i+0x1ac>
 800802a:	07d9      	lsls	r1, r3, #31
 800802c:	bf44      	itt	mi
 800802e:	f043 0320 	orrmi.w	r3, r3, #32
 8008032:	6023      	strmi	r3, [r4, #0]
 8008034:	b91d      	cbnz	r5, 800803e <_printf_i+0x196>
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	f023 0320 	bic.w	r3, r3, #32
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	2310      	movs	r3, #16
 8008040:	e7b0      	b.n	8007fa4 <_printf_i+0xfc>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f043 0320 	orr.w	r3, r3, #32
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	2378      	movs	r3, #120	; 0x78
 800804c:	4828      	ldr	r0, [pc, #160]	; (80080f0 <_printf_i+0x248>)
 800804e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008052:	e7e3      	b.n	800801c <_printf_i+0x174>
 8008054:	065e      	lsls	r6, r3, #25
 8008056:	bf48      	it	mi
 8008058:	b2ad      	uxthmi	r5, r5
 800805a:	e7e6      	b.n	800802a <_printf_i+0x182>
 800805c:	4616      	mov	r6, r2
 800805e:	e7bb      	b.n	8007fd8 <_printf_i+0x130>
 8008060:	680b      	ldr	r3, [r1, #0]
 8008062:	6826      	ldr	r6, [r4, #0]
 8008064:	6960      	ldr	r0, [r4, #20]
 8008066:	1d1d      	adds	r5, r3, #4
 8008068:	600d      	str	r5, [r1, #0]
 800806a:	0635      	lsls	r5, r6, #24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	d501      	bpl.n	8008074 <_printf_i+0x1cc>
 8008070:	6018      	str	r0, [r3, #0]
 8008072:	e002      	b.n	800807a <_printf_i+0x1d2>
 8008074:	0671      	lsls	r1, r6, #25
 8008076:	d5fb      	bpl.n	8008070 <_printf_i+0x1c8>
 8008078:	8018      	strh	r0, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	4616      	mov	r6, r2
 8008080:	e7ba      	b.n	8007ff8 <_printf_i+0x150>
 8008082:	680b      	ldr	r3, [r1, #0]
 8008084:	1d1a      	adds	r2, r3, #4
 8008086:	600a      	str	r2, [r1, #0]
 8008088:	681e      	ldr	r6, [r3, #0]
 800808a:	6862      	ldr	r2, [r4, #4]
 800808c:	2100      	movs	r1, #0
 800808e:	4630      	mov	r0, r6
 8008090:	f7f8 f8a6 	bl	80001e0 <memchr>
 8008094:	b108      	cbz	r0, 800809a <_printf_i+0x1f2>
 8008096:	1b80      	subs	r0, r0, r6
 8008098:	6060      	str	r0, [r4, #4]
 800809a:	6863      	ldr	r3, [r4, #4]
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	2300      	movs	r3, #0
 80080a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a4:	e7a8      	b.n	8007ff8 <_printf_i+0x150>
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	4632      	mov	r2, r6
 80080aa:	4649      	mov	r1, r9
 80080ac:	4640      	mov	r0, r8
 80080ae:	47d0      	blx	sl
 80080b0:	3001      	adds	r0, #1
 80080b2:	d0ab      	beq.n	800800c <_printf_i+0x164>
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	079b      	lsls	r3, r3, #30
 80080b8:	d413      	bmi.n	80080e2 <_printf_i+0x23a>
 80080ba:	68e0      	ldr	r0, [r4, #12]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	4298      	cmp	r0, r3
 80080c0:	bfb8      	it	lt
 80080c2:	4618      	movlt	r0, r3
 80080c4:	e7a4      	b.n	8008010 <_printf_i+0x168>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4632      	mov	r2, r6
 80080ca:	4649      	mov	r1, r9
 80080cc:	4640      	mov	r0, r8
 80080ce:	47d0      	blx	sl
 80080d0:	3001      	adds	r0, #1
 80080d2:	d09b      	beq.n	800800c <_printf_i+0x164>
 80080d4:	3501      	adds	r5, #1
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	9903      	ldr	r1, [sp, #12]
 80080da:	1a5b      	subs	r3, r3, r1
 80080dc:	42ab      	cmp	r3, r5
 80080de:	dcf2      	bgt.n	80080c6 <_printf_i+0x21e>
 80080e0:	e7eb      	b.n	80080ba <_printf_i+0x212>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f104 0619 	add.w	r6, r4, #25
 80080e8:	e7f5      	b.n	80080d6 <_printf_i+0x22e>
 80080ea:	bf00      	nop
 80080ec:	080083c5 	.word	0x080083c5
 80080f0:	080083d6 	.word	0x080083d6

080080f4 <memcpy>:
 80080f4:	440a      	add	r2, r1
 80080f6:	4291      	cmp	r1, r2
 80080f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80080fc:	d100      	bne.n	8008100 <memcpy+0xc>
 80080fe:	4770      	bx	lr
 8008100:	b510      	push	{r4, lr}
 8008102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008106:	f803 4f01 	strb.w	r4, [r3, #1]!
 800810a:	4291      	cmp	r1, r2
 800810c:	d1f9      	bne.n	8008102 <memcpy+0xe>
 800810e:	bd10      	pop	{r4, pc}

08008110 <memmove>:
 8008110:	4288      	cmp	r0, r1
 8008112:	b510      	push	{r4, lr}
 8008114:	eb01 0402 	add.w	r4, r1, r2
 8008118:	d902      	bls.n	8008120 <memmove+0x10>
 800811a:	4284      	cmp	r4, r0
 800811c:	4623      	mov	r3, r4
 800811e:	d807      	bhi.n	8008130 <memmove+0x20>
 8008120:	1e43      	subs	r3, r0, #1
 8008122:	42a1      	cmp	r1, r4
 8008124:	d008      	beq.n	8008138 <memmove+0x28>
 8008126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800812a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800812e:	e7f8      	b.n	8008122 <memmove+0x12>
 8008130:	4402      	add	r2, r0
 8008132:	4601      	mov	r1, r0
 8008134:	428a      	cmp	r2, r1
 8008136:	d100      	bne.n	800813a <memmove+0x2a>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008142:	e7f7      	b.n	8008134 <memmove+0x24>

08008144 <_free_r>:
 8008144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008146:	2900      	cmp	r1, #0
 8008148:	d048      	beq.n	80081dc <_free_r+0x98>
 800814a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814e:	9001      	str	r0, [sp, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f1a1 0404 	sub.w	r4, r1, #4
 8008156:	bfb8      	it	lt
 8008158:	18e4      	addlt	r4, r4, r3
 800815a:	f000 f8d3 	bl	8008304 <__malloc_lock>
 800815e:	4a20      	ldr	r2, [pc, #128]	; (80081e0 <_free_r+0x9c>)
 8008160:	9801      	ldr	r0, [sp, #4]
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	4615      	mov	r5, r2
 8008166:	b933      	cbnz	r3, 8008176 <_free_r+0x32>
 8008168:	6063      	str	r3, [r4, #4]
 800816a:	6014      	str	r4, [r2, #0]
 800816c:	b003      	add	sp, #12
 800816e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008172:	f000 b8cd 	b.w	8008310 <__malloc_unlock>
 8008176:	42a3      	cmp	r3, r4
 8008178:	d90b      	bls.n	8008192 <_free_r+0x4e>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	1862      	adds	r2, r4, r1
 800817e:	4293      	cmp	r3, r2
 8008180:	bf04      	itt	eq
 8008182:	681a      	ldreq	r2, [r3, #0]
 8008184:	685b      	ldreq	r3, [r3, #4]
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	bf04      	itt	eq
 800818a:	1852      	addeq	r2, r2, r1
 800818c:	6022      	streq	r2, [r4, #0]
 800818e:	602c      	str	r4, [r5, #0]
 8008190:	e7ec      	b.n	800816c <_free_r+0x28>
 8008192:	461a      	mov	r2, r3
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	b10b      	cbz	r3, 800819c <_free_r+0x58>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d9fa      	bls.n	8008192 <_free_r+0x4e>
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	1855      	adds	r5, r2, r1
 80081a0:	42a5      	cmp	r5, r4
 80081a2:	d10b      	bne.n	80081bc <_free_r+0x78>
 80081a4:	6824      	ldr	r4, [r4, #0]
 80081a6:	4421      	add	r1, r4
 80081a8:	1854      	adds	r4, r2, r1
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	d1dd      	bne.n	800816c <_free_r+0x28>
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	6053      	str	r3, [r2, #4]
 80081b6:	4421      	add	r1, r4
 80081b8:	6011      	str	r1, [r2, #0]
 80081ba:	e7d7      	b.n	800816c <_free_r+0x28>
 80081bc:	d902      	bls.n	80081c4 <_free_r+0x80>
 80081be:	230c      	movs	r3, #12
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	e7d3      	b.n	800816c <_free_r+0x28>
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	1961      	adds	r1, r4, r5
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf04      	itt	eq
 80081cc:	6819      	ldreq	r1, [r3, #0]
 80081ce:	685b      	ldreq	r3, [r3, #4]
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	bf04      	itt	eq
 80081d4:	1949      	addeq	r1, r1, r5
 80081d6:	6021      	streq	r1, [r4, #0]
 80081d8:	6054      	str	r4, [r2, #4]
 80081da:	e7c7      	b.n	800816c <_free_r+0x28>
 80081dc:	b003      	add	sp, #12
 80081de:	bd30      	pop	{r4, r5, pc}
 80081e0:	20000428 	.word	0x20000428

080081e4 <_malloc_r>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	1ccd      	adds	r5, r1, #3
 80081e8:	f025 0503 	bic.w	r5, r5, #3
 80081ec:	3508      	adds	r5, #8
 80081ee:	2d0c      	cmp	r5, #12
 80081f0:	bf38      	it	cc
 80081f2:	250c      	movcc	r5, #12
 80081f4:	2d00      	cmp	r5, #0
 80081f6:	4606      	mov	r6, r0
 80081f8:	db01      	blt.n	80081fe <_malloc_r+0x1a>
 80081fa:	42a9      	cmp	r1, r5
 80081fc:	d903      	bls.n	8008206 <_malloc_r+0x22>
 80081fe:	230c      	movs	r3, #12
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	2000      	movs	r0, #0
 8008204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008206:	f000 f87d 	bl	8008304 <__malloc_lock>
 800820a:	4921      	ldr	r1, [pc, #132]	; (8008290 <_malloc_r+0xac>)
 800820c:	680a      	ldr	r2, [r1, #0]
 800820e:	4614      	mov	r4, r2
 8008210:	b99c      	cbnz	r4, 800823a <_malloc_r+0x56>
 8008212:	4f20      	ldr	r7, [pc, #128]	; (8008294 <_malloc_r+0xb0>)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	b923      	cbnz	r3, 8008222 <_malloc_r+0x3e>
 8008218:	4621      	mov	r1, r4
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f862 	bl	80082e4 <_sbrk_r>
 8008220:	6038      	str	r0, [r7, #0]
 8008222:	4629      	mov	r1, r5
 8008224:	4630      	mov	r0, r6
 8008226:	f000 f85d 	bl	80082e4 <_sbrk_r>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d123      	bne.n	8008276 <_malloc_r+0x92>
 800822e:	230c      	movs	r3, #12
 8008230:	6033      	str	r3, [r6, #0]
 8008232:	4630      	mov	r0, r6
 8008234:	f000 f86c 	bl	8008310 <__malloc_unlock>
 8008238:	e7e3      	b.n	8008202 <_malloc_r+0x1e>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	1b5b      	subs	r3, r3, r5
 800823e:	d417      	bmi.n	8008270 <_malloc_r+0x8c>
 8008240:	2b0b      	cmp	r3, #11
 8008242:	d903      	bls.n	800824c <_malloc_r+0x68>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	441c      	add	r4, r3
 8008248:	6025      	str	r5, [r4, #0]
 800824a:	e004      	b.n	8008256 <_malloc_r+0x72>
 800824c:	6863      	ldr	r3, [r4, #4]
 800824e:	42a2      	cmp	r2, r4
 8008250:	bf0c      	ite	eq
 8008252:	600b      	streq	r3, [r1, #0]
 8008254:	6053      	strne	r3, [r2, #4]
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f85a 	bl	8008310 <__malloc_unlock>
 800825c:	f104 000b 	add.w	r0, r4, #11
 8008260:	1d23      	adds	r3, r4, #4
 8008262:	f020 0007 	bic.w	r0, r0, #7
 8008266:	1ac2      	subs	r2, r0, r3
 8008268:	d0cc      	beq.n	8008204 <_malloc_r+0x20>
 800826a:	1a1b      	subs	r3, r3, r0
 800826c:	50a3      	str	r3, [r4, r2]
 800826e:	e7c9      	b.n	8008204 <_malloc_r+0x20>
 8008270:	4622      	mov	r2, r4
 8008272:	6864      	ldr	r4, [r4, #4]
 8008274:	e7cc      	b.n	8008210 <_malloc_r+0x2c>
 8008276:	1cc4      	adds	r4, r0, #3
 8008278:	f024 0403 	bic.w	r4, r4, #3
 800827c:	42a0      	cmp	r0, r4
 800827e:	d0e3      	beq.n	8008248 <_malloc_r+0x64>
 8008280:	1a21      	subs	r1, r4, r0
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f82e 	bl	80082e4 <_sbrk_r>
 8008288:	3001      	adds	r0, #1
 800828a:	d1dd      	bne.n	8008248 <_malloc_r+0x64>
 800828c:	e7cf      	b.n	800822e <_malloc_r+0x4a>
 800828e:	bf00      	nop
 8008290:	20000428 	.word	0x20000428
 8008294:	2000042c 	.word	0x2000042c

08008298 <_realloc_r>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	4607      	mov	r7, r0
 800829c:	4614      	mov	r4, r2
 800829e:	460e      	mov	r6, r1
 80082a0:	b921      	cbnz	r1, 80082ac <_realloc_r+0x14>
 80082a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082a6:	4611      	mov	r1, r2
 80082a8:	f7ff bf9c 	b.w	80081e4 <_malloc_r>
 80082ac:	b922      	cbnz	r2, 80082b8 <_realloc_r+0x20>
 80082ae:	f7ff ff49 	bl	8008144 <_free_r>
 80082b2:	4625      	mov	r5, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	f000 f830 	bl	800831c <_malloc_usable_size_r>
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d20f      	bcs.n	80082e0 <_realloc_r+0x48>
 80082c0:	4621      	mov	r1, r4
 80082c2:	4638      	mov	r0, r7
 80082c4:	f7ff ff8e 	bl	80081e4 <_malloc_r>
 80082c8:	4605      	mov	r5, r0
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d0f2      	beq.n	80082b4 <_realloc_r+0x1c>
 80082ce:	4631      	mov	r1, r6
 80082d0:	4622      	mov	r2, r4
 80082d2:	f7ff ff0f 	bl	80080f4 <memcpy>
 80082d6:	4631      	mov	r1, r6
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff ff33 	bl	8008144 <_free_r>
 80082de:	e7e9      	b.n	80082b4 <_realloc_r+0x1c>
 80082e0:	4635      	mov	r5, r6
 80082e2:	e7e7      	b.n	80082b4 <_realloc_r+0x1c>

080082e4 <_sbrk_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	; (8008300 <_sbrk_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7f8 fd62 	bl	8000db8 <_sbrk>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_sbrk_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_sbrk_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20001d78 	.word	0x20001d78

08008304 <__malloc_lock>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__malloc_lock+0x8>)
 8008306:	f000 b811 	b.w	800832c <__retarget_lock_acquire_recursive>
 800830a:	bf00      	nop
 800830c:	20001d80 	.word	0x20001d80

08008310 <__malloc_unlock>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__malloc_unlock+0x8>)
 8008312:	f000 b80c 	b.w	800832e <__retarget_lock_release_recursive>
 8008316:	bf00      	nop
 8008318:	20001d80 	.word	0x20001d80

0800831c <_malloc_usable_size_r>:
 800831c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008320:	1f18      	subs	r0, r3, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	bfbc      	itt	lt
 8008326:	580b      	ldrlt	r3, [r1, r0]
 8008328:	18c0      	addlt	r0, r0, r3
 800832a:	4770      	bx	lr

0800832c <__retarget_lock_acquire_recursive>:
 800832c:	4770      	bx	lr

0800832e <__retarget_lock_release_recursive>:
 800832e:	4770      	bx	lr

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr
