
HybridRocketFC_Firmware_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007238  08007238  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007240  08007240  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  200001e4  0800742c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  0800742c  00021d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001646e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003253  00000000  00000000  00036682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bb7  00000000  00000000  0003b358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d00  00000000  00000000  00053f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089daa  00000000  00000000  00066c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f09b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  000f0a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007180 	.word	0x08007180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007180 	.word	0x08007180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fa1d 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f825 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8b9 	bl	80006fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800058a:	f000 f889 	bl	80006a0 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800058e:	f005 fc73 	bl	8005e78 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if ( (HAL_GetTick() - timerLog) >= LOG_DELAY ) {
 8000592:	f000 fa79 	bl	8000a88 <HAL_GetTick>
 8000596:	4602      	mov	r2, r0
 8000598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	2bc7      	cmp	r3, #199	; 0xc7
 800059e:	d9f8      	bls.n	8000592 <main+0x1a>
	  uint8_t usbBufLen = snprintf( usbBuf, 64, "Testing!\r\n" );
 80005a0:	463b      	mov	r3, r7
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0x54>)
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 f9a8 	bl	80068fc <sniprintf>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  CDC_Transmit_FS( (uint8_t*) usbBuf, usbBufLen );
 80005b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	463b      	mov	r3, r7
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f005 fd19 	bl	8005ff4 <CDC_Transmit_FS>
	  timerLog += LOG_DELAY;
 80005c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005c4:	33c8      	adds	r3, #200	; 0xc8
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
    if ( (HAL_GetTick() - timerLog) >= LOG_DELAY ) {
 80005c8:	e7e3      	b.n	8000592 <main+0x1a>
 80005ca:	bf00      	nop
 80005cc:	08007198 	.word	0x08007198

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 f984 	bl	80068ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a26      	ldr	r2, [pc, #152]	; (8000698 <SystemClock_Config+0xc8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <SystemClock_Config+0xcc>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000644:	2348      	movs	r3, #72	; 0x48
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800064c:	2303      	movs	r3, #3
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ffa5 	bl	80025a4 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f890 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fa07 	bl	8002a94 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800068c:	f000 f87a 	bl	8000784 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f000 fc99 	bl	8001014 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f84c 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000430 	.word	0x20000430
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_GPIO_Init+0x84>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <MX_GPIO_Init+0x84>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_GPIO_Init+0x84>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a16      	ldr	r2, [pc, #88]	; (8000780 <MX_GPIO_Init+0x84>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_GPIO_Init+0x84>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <MX_GPIO_Init+0x84>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_GPIO_Init+0x84>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <MX_GPIO_Init+0x84>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_I2C_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12b      	bne.n	800085a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_I2C_MspInit+0x88>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800081e:	23c0      	movs	r3, #192	; 0xc0
 8000820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000822:	2312      	movs	r3, #18
 8000824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082a:	2303      	movs	r3, #3
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082e:	2304      	movs	r3, #4
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <HAL_I2C_MspInit+0x8c>)
 800083a:	f000 fa67 	bl	8000d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_I2C_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40005400 	.word	0x40005400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020400 	.word	0x40020400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f8d0 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <OTG_FS_IRQHandler+0x10>)
 80008ca:	f000 fe37 	bl	800153c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20001958 	.word	0x20001958

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f005 ffc6 	bl	8006898 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20020000 	.word	0x20020000
 8000938:	00000400 	.word	0x00000400
 800093c:	20000200 	.word	0x20000200
 8000940:	20001d70 	.word	0x20001d70

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000984:	4c0b      	ldr	r4, [pc, #44]	; (80009b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000992:	f7ff ffd7 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f005 ff85 	bl	80068a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fded 	bl	8000578 <main>
  bx  lr    
 800099e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80009ac:	08007248 	.word	0x08007248
  ldr r2, =_sbss
 80009b0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80009b4:	20001d70 	.word	0x20001d70

080009b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <HAL_Init+0x40>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_Init+0x40>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x40>)
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f94f 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fece 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f967 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f92f 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000484 	.word	0x20000484

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000484 	.word	0x20000484

08000aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff ffee 	bl	8000a88 <HAL_GetTick>
 8000aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d005      	beq.n	8000ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_Delay+0x44>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac6:	bf00      	nop
 8000ac8:	f7ff ffde 	bl	8000a88 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d8f7      	bhi.n	8000ac8 <HAL_Delay+0x28>
  {
  }
}
 8000ad8:	bf00      	nop
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4907      	ldr	r1, [pc, #28]	; (8000b84 <__NVIC_EnableIRQ+0x38>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	; (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	; 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff8e 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff29 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff3e 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff8e 	bl	8000bdc <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff31 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	e159      	b.n	8000fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	f040 8148 	bne.w	8000fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d130      	bne.n	8000dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	091b      	lsrs	r3, r3, #4
 8000daa:	f003 0201 	and.w	r2, r3, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d017      	beq.n	8000dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d123      	bne.n	8000e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0203 	and.w	r2, r3, #3
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80a2 	beq.w	8000fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b57      	ldr	r3, [pc, #348]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <HAL_GPIO_Init+0x2e8>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a49      	ldr	r2, [pc, #292]	; (8000ffc <HAL_GPIO_Init+0x2f0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x202>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <HAL_GPIO_Init+0x2f4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1fe>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a47      	ldr	r2, [pc, #284]	; (8001004 <HAL_GPIO_Init+0x2f8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1fa>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <HAL_GPIO_Init+0x2fc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1f6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a45      	ldr	r2, [pc, #276]	; (800100c <HAL_GPIO_Init+0x300>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1f2>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e008      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000efe:	2307      	movs	r3, #7
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f02:	2303      	movs	r3, #3
 8000f04:	e004      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e002      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <HAL_GPIO_Init+0x204>
 8000f0e:	2300      	movs	r3, #0
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	f002 0203 	and.w	r2, r2, #3
 8000f16:	0092      	lsls	r2, r2, #2
 8000f18:	4093      	lsls	r3, r2
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2ec>)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	089b      	lsrs	r3, r3, #2
 8000f26:	3302      	adds	r3, #2
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f7c:	4a24      	ldr	r2, [pc, #144]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a1a      	ldr	r2, [pc, #104]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f67f aea2 	bls.w	8000d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e12b      	b.n	800127e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fbd0 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2224      	movs	r2, #36	; 0x24
 8001044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001078:	f001 fee0 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a81      	ldr	r2, [pc, #516]	; (8001288 <HAL_I2C_Init+0x274>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d807      	bhi.n	8001098 <HAL_I2C_Init+0x84>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a80      	ldr	r2, [pc, #512]	; (800128c <HAL_I2C_Init+0x278>)
 800108c:	4293      	cmp	r3, r2
 800108e:	bf94      	ite	ls
 8001090:	2301      	movls	r3, #1
 8001092:	2300      	movhi	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	e006      	b.n	80010a6 <HAL_I2C_Init+0x92>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a7d      	ldr	r2, [pc, #500]	; (8001290 <HAL_I2C_Init+0x27c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	bf94      	ite	ls
 80010a0:	2301      	movls	r3, #1
 80010a2:	2300      	movhi	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0e7      	b.n	800127e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4a78      	ldr	r2, [pc, #480]	; (8001294 <HAL_I2C_Init+0x280>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a6a      	ldr	r2, [pc, #424]	; (8001288 <HAL_I2C_Init+0x274>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d802      	bhi.n	80010e8 <HAL_I2C_Init+0xd4>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	e009      	b.n	80010fc <HAL_I2C_Init+0xe8>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	4a69      	ldr	r2, [pc, #420]	; (8001298 <HAL_I2C_Init+0x284>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	3301      	adds	r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	430b      	orrs	r3, r1
 8001102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800110e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	495c      	ldr	r1, [pc, #368]	; (8001288 <HAL_I2C_Init+0x274>)
 8001118:	428b      	cmp	r3, r1
 800111a:	d819      	bhi.n	8001150 <HAL_I2C_Init+0x13c>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fbb1 f3f3 	udiv	r3, r1, r3
 800112a:	1c59      	adds	r1, r3, #1
 800112c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001130:	400b      	ands	r3, r1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <HAL_I2C_Init+0x138>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1e59      	subs	r1, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fbb1 f3f3 	udiv	r3, r1, r3
 8001144:	3301      	adds	r3, #1
 8001146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114a:	e051      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 800114c:	2304      	movs	r3, #4
 800114e:	e04f      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <HAL_I2C_Init+0x168>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e58      	subs	r0, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e012      	b.n	80011a2 <HAL_I2C_Init+0x18e>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	0099      	lsls	r1, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Init+0x196>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e022      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <HAL_I2C_Init+0x1bc>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1e58      	subs	r0, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6859      	ldr	r1, [r3, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	440b      	add	r3, r1
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ce:	e00f      	b.n	80011f0 <HAL_I2C_Init+0x1dc>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	0099      	lsls	r1, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	6809      	ldr	r1, [r1, #0]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800121e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6911      	ldr	r1, [r2, #16]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68d2      	ldr	r2, [r2, #12]
 800122a:	4311      	orrs	r1, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	000186a0 	.word	0x000186a0
 800128c:	001e847f 	.word	0x001e847f
 8001290:	003d08ff 	.word	0x003d08ff
 8001294:	431bde83 	.word	0x431bde83
 8001298:	10624dd3 	.word	0x10624dd3

0800129c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b08f      	sub	sp, #60	; 0x3c
 80012a0:	af0a      	add	r7, sp, #40	; 0x28
 80012a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e10f      	b.n	80014ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f004 ffdb 	bl	8006284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fece 	bl	800308e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	687e      	ldr	r6, [r7, #4]
 80012fa:	466d      	mov	r5, sp
 80012fc:	f106 0410 	add.w	r4, r6, #16
 8001300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001308:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001310:	1d33      	adds	r3, r6, #4
 8001312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f001 fda5 	bl	8002e64 <USB_CoreInit>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0d0      	b.n	80014ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 febc 	bl	80030b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e04a      	b.n	80013d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	333d      	adds	r3, #61	; 0x3d
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	333c      	adds	r3, #60	; 0x3c
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	b298      	uxth	r0, r3
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	3342      	adds	r3, #66	; 0x42
 800137a:	4602      	mov	r2, r0
 800137c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	333f      	adds	r3, #63	; 0x3f
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	3344      	adds	r3, #68	; 0x44
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	3348      	adds	r3, #72	; 0x48
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ba:	7bfa      	ldrb	r2, [r7, #15]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3350      	adds	r3, #80	; 0x50
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	3301      	adds	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3af      	bcc.n	800133e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e044      	b.n	800146e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	3301      	adds	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3b5      	bcc.n	80013e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	687e      	ldr	r6, [r7, #4]
 8001480:	466d      	mov	r5, sp
 8001482:	f106 0410 	add.w	r4, r6, #16
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001492:	e885 0003 	stmia.w	r5, {r0, r1}
 8001496:	1d33      	adds	r3, r6, #4
 8001498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149a:	6838      	ldr	r0, [r7, #0]
 800149c:	f001 fe54 	bl	8003148 <USB_DevInit>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2202      	movs	r2, #2
 80014aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00d      	b.n	80014ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fed0 	bl	800426c <USB_DevDisconnect>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_PCD_Start+0x1c>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e020      	b.n	8001534 <HAL_PCD_Start+0x5e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d109      	bne.n	8001516 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fda6 	bl	800306c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fe80 	bl	800422a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08d      	sub	sp, #52	; 0x34
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f002 ff3e 	bl	80043d4 <USB_GetMode>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	f040 839d 	bne.w	8001c9a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fea2 	bl	80042ae <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8393 	beq.w	8001c98 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f002 fe99 	bl	80042ae <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b02      	cmp	r3, #2
 8001584:	d107      	bne.n	8001596 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f002 0202 	and.w	r2, r2, #2
 8001594:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fe87 	bl	80042ae <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d161      	bne.n	800166e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699a      	ldr	r2, [r3, #24]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0210 	bic.w	r2, r2, #16
 80015b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	f003 020f 	and.w	r2, r3, #15
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	3304      	adds	r3, #4
 80015d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	0c5b      	lsrs	r3, r3, #17
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d124      	bne.n	8001630 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d035      	beq.n	800165e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001600:	b29b      	uxth	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f002 fcbe 	bl	8003f86 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001616:	441a      	add	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001628:	441a      	add	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	619a      	str	r2, [r3, #24]
 800162e:	e016      	b.n	800165e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	0c5b      	lsrs	r3, r3, #17
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	2b06      	cmp	r3, #6
 800163a:	d110      	bne.n	800165e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001642:	2208      	movs	r2, #8
 8001644:	4619      	mov	r1, r3
 8001646:	6a38      	ldr	r0, [r7, #32]
 8001648:	f002 fc9d 	bl	8003f86 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001658:	441a      	add	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0210 	orr.w	r2, r2, #16
 800166c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fe1b 	bl	80042ae <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001682:	d16e      	bne.n	8001762 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fe21 	bl	80042d4 <USB_ReadDevAllOutEpInterrupt>
 8001692:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001694:	e062      	b.n	800175c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d057      	beq.n	8001750 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fe46 	bl	800433c <USB_ReadDevOutEPInterrupt>
 80016b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	015a      	lsls	r2, r3, #5
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	4413      	add	r3, r2
 80016c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c8:	461a      	mov	r2, r3
 80016ca:	2301      	movs	r3, #1
 80016cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fdb1 	bl	8002238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00c      	beq.n	80016fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ec:	461a      	mov	r2, r3
 80016ee:	2308      	movs	r3, #8
 80016f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 feab 	bl	8002450 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001710:	461a      	mov	r2, r3
 8001712:	2310      	movs	r3, #16
 8001714:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172c:	461a      	mov	r2, r3
 800172e:	2320      	movs	r3, #32
 8001730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d009      	beq.n	8001750 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001748:	461a      	mov	r2, r3
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	3301      	adds	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	2b00      	cmp	r3, #0
 8001760:	d199      	bne.n	8001696 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fda1 	bl	80042ae <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001776:	f040 80c0 	bne.w	80018fa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f002 fdc2 	bl	8004308 <USB_ReadDevAllInEpInterrupt>
 8001784:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800178a:	e0b2      	b.n	80018f2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a7 	beq.w	80018e6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fde8 	bl	8004378 <USB_ReadDevInEPInterrupt>
 80017a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d057      	beq.n	8001864 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	2201      	movs	r2, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69f9      	ldr	r1, [r7, #28]
 80017d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017d4:	4013      	ands	r3, r2
 80017d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e4:	461a      	mov	r2, r3
 80017e6:	2301      	movs	r3, #1
 80017e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d132      	bne.n	8001858 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3348      	adds	r3, #72	; 0x48
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4403      	add	r3, r0
 8001812:	3344      	adds	r3, #68	; 0x44
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4419      	add	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4403      	add	r3, r0
 8001826:	3348      	adds	r3, #72	; 0x48
 8001828:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	2b00      	cmp	r3, #0
 800182e:	d113      	bne.n	8001858 <HAL_PCD_IRQHandler+0x31c>
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3350      	adds	r3, #80	; 0x50
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d108      	bne.n	8001858 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001850:	461a      	mov	r2, r3
 8001852:	2101      	movs	r1, #1
 8001854:	f002 fdf0 	bl	8004438 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f004 fd91 	bl	8006386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800187a:	461a      	mov	r2, r3
 800187c:	2308      	movs	r3, #8
 800187e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001896:	461a      	mov	r2, r3
 8001898:	2310      	movs	r3, #16
 800189a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b2:	461a      	mov	r2, r3
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d008      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	461a      	mov	r2, r3
 80018d0:	2302      	movs	r3, #2
 80018d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fc1b 	bl	800211c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f47f af49 	bne.w	800178c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fcd5 	bl	80042ae <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800190a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800190e:	d122      	bne.n	8001956 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001936:	2100      	movs	r1, #0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fe27 	bl	800258c <HAL_PCDEx_LPM_Callback>
 800193e:	e002      	b.n	8001946 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f004 fd8d 	bl	8006460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fca7 	bl	80042ae <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800196a:	d112      	bne.n	8001992 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f004 fd49 	bl	8006414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001990:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fc89 	bl	80042ae <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a6:	f040 80c7 	bne.w	8001b38 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2110      	movs	r1, #16
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fd23 	bl	8003410 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ce:	e056      	b.n	8001a7e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	015a      	lsls	r2, r3, #5
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019dc:	461a      	mov	r2, r3
 80019de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f4:	0151      	lsls	r1, r2, #5
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	440a      	add	r2, r1
 80019fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a02:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a14:	0151      	lsls	r1, r2, #5
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	440a      	add	r2, r1
 8001a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a30:	461a      	mov	r2, r3
 8001a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a48:	0151      	lsls	r1, r2, #5
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	440a      	add	r2, r1
 8001a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5a:	015a      	lsls	r2, r3, #5
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a68:	0151      	lsls	r1, r2, #5
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	440a      	add	r2, r1
 8001a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3a3      	bcc.n	80019d0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d016      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab4:	f043 030b 	orr.w	r3, r3, #11
 8001ab8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aca:	f043 030b 	orr.w	r3, r3, #11
 8001ace:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad0:	e015      	b.n	8001afe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ae8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af8:	f043 030b 	orr.w	r3, r3, #11
 8001afc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b22:	461a      	mov	r2, r3
 8001b24:	f002 fc88 	bl	8004438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fbb6 	bl	80042ae <USB_ReadInterrupts>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b4c:	d124      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 fc4c 	bl	80043f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 fcb4 	bl	80034ca <USB_GetDevSpeed>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681c      	ldr	r4, [r3, #0]
 8001b6e:	f001 f959 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8001b72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f001 f9d3 	bl	8002f28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f004 fc27 	bl	80063d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fb86 	bl	80042ae <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d10a      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f004 fc04 	bl	80063ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f002 0208 	and.w	r2, r2, #8
 8001bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f002 fb71 	bl	80042ae <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f004 fc5c 	bl	80064a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fb56 	bl	80042ae <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c0c:	d10f      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4619      	mov	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f004 fc2f 	bl	800647c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fb3b 	bl	80042ae <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c42:	d10a      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f004 fc3d 	bl	80064c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fb25 	bl	80042ae <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d115      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f004 fc2d 	bl	80064e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	e000      	b.n	8001c9a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001c98:	bf00      	nop
    }
  }
}
 8001c9a:	3734      	adds	r7, #52	; 0x34
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}

08001ca0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_SetAddress+0x1a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_PCD_SetAddress+0x42>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fa83 	bl	80041de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	70fb      	strb	r3, [r7, #3]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	803b      	strh	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0f      	bge.n	8001d30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00f      	b.n	8001d50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 020f 	and.w	r2, r3, #15
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d5c:	883a      	ldrh	r2, [r7, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	78ba      	ldrb	r2, [r7, #2]
 8001d66:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d7a:	78bb      	ldrb	r3, [r7, #2]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d102      	bne.n	8001d86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_EP_Open+0xaa>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e00e      	b.n	8001db2 <HAL_PCD_EP_Open+0xc8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fbb6 	bl	8003514 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da0f      	bge.n	8001dee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	3338      	adds	r3, #56	; 0x38
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	705a      	strb	r2, [r3, #1]
 8001dec:	e00f      	b.n	8001e0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_EP_Close+0x6e>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e00e      	b.n	8001e46 <HAL_PCD_EP_Close+0x8c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fbf4 	bl	8003624 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	f001 fecf 	bl	8003c64 <USB_EP0StartXfer>
 8001ec6:	e008      	b.n	8001eda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	f001 fc81 	bl	80037dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3338      	adds	r3, #56	; 0x38
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2201      	movs	r2, #1
 8001f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	7afb      	ldrb	r3, [r7, #11]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	f001 fe6d 	bl	8003c64 <USB_EP0StartXfer>
 8001f8a:	e008      	b.n	8001f9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	f001 fc1f 	bl	80037dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e050      	b.n	8002068 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0f      	bge.n	8001fee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3338      	adds	r3, #56	; 0x38
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	705a      	strb	r2, [r3, #1]
 8001fec:	e00d      	b.n	800200a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b2da      	uxtb	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_EP_SetStall+0x82>
 8002026:	2302      	movs	r3, #2
 8002028:	e01e      	b.n	8002068 <HAL_PCD_EP_SetStall+0xc0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f001 fffc 	bl	8004036 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	b2d9      	uxtb	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002058:	461a      	mov	r2, r3
 800205a:	f002 f9ed 	bl	8004438 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d901      	bls.n	800208e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e042      	b.n	8002114 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da0f      	bge.n	80020b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3338      	adds	r3, #56	; 0x38
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	705a      	strb	r2, [r3, #1]
 80020b4:	e00f      	b.n	80020d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_PCD_EP_ClrStall+0x86>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e00e      	b.n	8002114 <HAL_PCD_EP_ClrStall+0xa4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68f9      	ldr	r1, [r7, #12]
 8002104:	4618      	mov	r0, r3
 8002106:	f002 f804 	bl	8004112 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	3338      	adds	r3, #56	; 0x38
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	d901      	bls.n	8002154 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e06c      	b.n	800222e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	429a      	cmp	r2, r3
 8002168:	d902      	bls.n	8002170 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3303      	adds	r3, #3
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002178:	e02b      	b.n	80021d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d902      	bls.n	8002196 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3303      	adds	r3, #3
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4603      	mov	r3, r0
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f001 fea8 	bl	8003f0a <USB_WritePacket>

    ep->xfer_buff  += len;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	441a      	add	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	441a      	add	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d809      	bhi.n	80021fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d203      	bcs.n	80021fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1be      	bne.n	800217a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	429a      	cmp	r2, r3
 8002206:	d811      	bhi.n	800222c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	43db      	mvns	r3, r3
 8002222:	6939      	ldr	r1, [r7, #16]
 8002224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002228:	4013      	ands	r3, r2
 800222a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	333c      	adds	r3, #60	; 0x3c
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 80a0 	bne.w	80023b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a72      	ldr	r2, [pc, #456]	; (8002448 <PCD_EP_OutXfrComplete_int+0x210>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f240 80dd 	bls.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80d7 	beq.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	6093      	str	r3, [r2, #8]
 80022a4:	e0cb      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022bc:	461a      	mov	r2, r3
 80022be:	2320      	movs	r3, #32
 80022c0:	6093      	str	r3, [r2, #8]
 80022c2:	e0bc      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80b7 	bne.w	800243e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <PCD_EP_OutXfrComplete_int+0x210>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d90f      	bls.n	80022f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f4:	6093      	str	r3, [r2, #8]
 80022f6:	e0a2      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800230a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	0159      	lsls	r1, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	440b      	add	r3, r1
 8002314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800231e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4403      	add	r3, r0
 800232e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002332:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002346:	6819      	ldr	r1, [r3, #0]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4403      	add	r3, r0
 8002356:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4419      	add	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4403      	add	r3, r0
 800236c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002370:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d114      	bne.n	80023a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d108      	bne.n	80023a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800239a:	461a      	mov	r2, r3
 800239c:	2101      	movs	r1, #1
 800239e:	f002 f84b 	bl	8004438 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f003 ffd1 	bl	8006350 <HAL_PCD_DataOutStageCallback>
 80023ae:	e046      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a26      	ldr	r2, [pc, #152]	; (800244c <PCD_EP_OutXfrComplete_int+0x214>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d124      	bne.n	8002402 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d4:	6093      	str	r3, [r2, #8]
 80023d6:	e032      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2320      	movs	r3, #32
 80023f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f003 ffa8 	bl	8006350 <HAL_PCD_DataOutStageCallback>
 8002400:	e01d      	b.n	800243e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d114      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800242a:	461a      	mov	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f002 f803 	bl	8004438 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f003 ff89 	bl	8006350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	4f54300a 	.word	0x4f54300a
 800244c:	4f54310a 	.word	0x4f54310a

08002450 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	333c      	adds	r3, #60	; 0x3c
 8002468:	3304      	adds	r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d90e      	bls.n	80024a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f003 ff41 	bl	800632c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d90c      	bls.n	80024cc <PCD_EP_OutSetupPacket_int+0x7c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	2101      	movs	r1, #1
 80024c8:	f001 ffb6 	bl	8004438 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	4f54300a 	.word	0x4f54300a

080024dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024fa:	883b      	ldrh	r3, [r7, #0]
 80024fc:	0419      	lsls	r1, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	430a      	orrs	r2, r1
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
 8002508:	e028      	b.n	800255c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e00d      	b.n	800253a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	3340      	adds	r3, #64	; 0x40
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	3301      	adds	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	3b01      	subs	r3, #1
 8002540:	429a      	cmp	r2, r3
 8002542:	d3ec      	bcc.n	800251e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002544:	883b      	ldrh	r3, [r7, #0]
 8002546:	0418      	lsls	r0, r3, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	3b01      	subs	r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4302      	orrs	r2, r0
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e264      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025c2:	4ba3      	ldr	r3, [pc, #652]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4ba0      	ldr	r3, [pc, #640]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b9d      	ldr	r3, [pc, #628]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b99      	ldr	r3, [pc, #612]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e23f      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x74>
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a90      	ldr	r2, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x98>
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a8a      	ldr	r2, [pc, #552]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xb0>
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a83      	ldr	r2, [pc, #524]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a80      	ldr	r2, [pc, #512]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fa14 	bl	8000a88 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fa10 	bl	8000a88 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e204      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xc0>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fa00 	bl	8000a88 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe f9fc 	bl	8000a88 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1f0      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d063      	beq.n	8002782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d11c      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d116      	bne.n	800270c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e1c4      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	4b56      	ldr	r3, [pc, #344]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4952      	ldr	r1, [pc, #328]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270a:	e03a      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d020      	beq.n	8002756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe f9b5 	bl	8000a88 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe f9b1 	bl	8000a88 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1a5      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4940      	ldr	r1, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b3f      	ldr	r3, [pc, #252]	; (8002854 <HAL_RCC_OscConfig+0x2b0>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe f994 	bl	8000a88 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe f990 	bl	8000a88 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e184      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d030      	beq.n	80027f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_RCC_OscConfig+0x2b4>)
 8002798:	2201      	movs	r2, #1
 800279a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe f974 	bl	8000a88 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe f970 	bl	8000a88 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e164      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x200>
 80027c2:	e015      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_OscConfig+0x2b4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe f95d 	bl	8000a88 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe f959 	bl	8000a88 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e14d      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a0 	beq.w	800293e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <HAL_RCC_OscConfig+0x2b8>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe f91f 	bl	8000a88 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e011      	b.n	8002872 <HAL_RCC_OscConfig+0x2ce>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
 800285c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe f912 	bl	8000a88 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e106      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b85      	ldr	r3, [pc, #532]	; (8002a88 <HAL_RCC_OscConfig+0x4e4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a80      	ldr	r2, [pc, #512]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	e01c      	b.n	80028ce <HAL_RCC_OscConfig+0x32a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x312>
 800289c:	4b7b      	ldr	r3, [pc, #492]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a0:	4a7a      	ldr	r2, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028a2:	f043 0304 	orr.w	r3, r3, #4
 80028a6:	6713      	str	r3, [r2, #112]	; 0x70
 80028a8:	4b78      	ldr	r3, [pc, #480]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a77      	ldr	r2, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x32a>
 80028b6:	4b75      	ldr	r3, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	4a74      	ldr	r2, [pc, #464]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6713      	str	r3, [r2, #112]	; 0x70
 80028c2:	4b72      	ldr	r3, [pc, #456]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a71      	ldr	r2, [pc, #452]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d015      	beq.n	8002902 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe f8d7 	bl	8000a88 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe f8d3 	bl	8000a88 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0c5      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f4:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ee      	beq.n	80028de <HAL_RCC_OscConfig+0x33a>
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe f8c1 	bl	8000a88 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7fe f8bd 	bl	8000a88 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0af      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d105      	bne.n	800293e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4b56      	ldr	r3, [pc, #344]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 809b 	beq.w	8002a7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b08      	cmp	r3, #8
 8002952:	d05c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d141      	bne.n	80029e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe f891 	bl	8000a88 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe f88d 	bl	8000a88 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e081      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297c:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f0      	bne.n	800296a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	019b      	lsls	r3, r3, #6
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	4937      	ldr	r1, [pc, #220]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe f866 	bl	8000a88 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe f862 	bl	8000a88 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e056      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x41c>
 80029de:	e04e      	b.n	8002a7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x4ec>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe f84f 	bl	8000a88 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe f84b 	bl	8000a88 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e03f      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x44a>
 8002a0c:	e037      	b.n	8002a7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e032      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <HAL_RCC_OscConfig+0x4e8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d028      	beq.n	8002a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d121      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d11a      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d111      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470060 	.word	0x42470060

08002a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cc      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d90c      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b63      	ldr	r3, [pc, #396]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0b8      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae8:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b00:	4b53      	ldr	r3, [pc, #332]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	4a52      	ldr	r2, [pc, #328]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b0c:	4b50      	ldr	r3, [pc, #320]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	494d      	ldr	r1, [pc, #308]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d119      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d003      	beq.n	8002b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e067      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4934      	ldr	r1, [pc, #208]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b84:	f7fd ff80 	bl	8000a88 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fd ff7c 	bl	8000a88 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04f      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d20c      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e032      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4916      	ldr	r1, [pc, #88]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	490e      	ldr	r1, [pc, #56]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c1a:	f000 f821 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	490a      	ldr	r1, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	5ccb      	ldrb	r3, [r1, r3]
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd fee0 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00
 8002c50:	40023800 	.word	0x40023800
 8002c54:	080071ec 	.word	0x080071ec
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	2300      	movs	r3, #0
 8002c72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d00d      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 80bd 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x34>
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c92:	e0b7      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c96:	60bb      	str	r3, [r7, #8]
       break;
 8002c98:	e0b7      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c9c:	60bb      	str	r3, [r7, #8]
      break;
 8002c9e:	e0b4      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca0:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04d      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	ea02 0800 	and.w	r8, r2, r0
 8002cce:	ea03 0901 	and.w	r9, r3, r1
 8002cd2:	4640      	mov	r0, r8
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	014b      	lsls	r3, r1, #5
 8002ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ce4:	0142      	lsls	r2, r0, #5
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	ebb0 0008 	subs.w	r0, r0, r8
 8002cee:	eb61 0109 	sbc.w	r1, r1, r9
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d00:	0182      	lsls	r2, r0, #6
 8002d02:	1a12      	subs	r2, r2, r0
 8002d04:	eb63 0301 	sbc.w	r3, r3, r1
 8002d08:	f04f 0000 	mov.w	r0, #0
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	00d9      	lsls	r1, r3, #3
 8002d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d16:	00d0      	lsls	r0, r2, #3
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	eb12 0208 	adds.w	r2, r2, r8
 8002d20:	eb43 0309 	adc.w	r3, r3, r9
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0259      	lsls	r1, r3, #9
 8002d2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d32:	0250      	lsls	r0, r2, #9
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	f7fd fa9c 	bl	8000280 <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e04a      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	ea02 0400 	and.w	r4, r2, r0
 8002d6a:	ea03 0501 	and.w	r5, r3, r1
 8002d6e:	4620      	mov	r0, r4
 8002d70:	4629      	mov	r1, r5
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	014b      	lsls	r3, r1, #5
 8002d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d80:	0142      	lsls	r2, r0, #5
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	1b00      	subs	r0, r0, r4
 8002d88:	eb61 0105 	sbc.w	r1, r1, r5
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	018b      	lsls	r3, r1, #6
 8002d96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d9a:	0182      	lsls	r2, r0, #6
 8002d9c:	1a12      	subs	r2, r2, r0
 8002d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	00d9      	lsls	r1, r3, #3
 8002dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db0:	00d0      	lsls	r0, r2, #3
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	1912      	adds	r2, r2, r4
 8002db8:	eb45 0303 	adc.w	r3, r5, r3
 8002dbc:	f04f 0000 	mov.w	r0, #0
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	0299      	lsls	r1, r3, #10
 8002dc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dca:	0290      	lsls	r0, r2, #10
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	f7fd fa50 	bl	8000280 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	60bb      	str	r3, [r7, #8]
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e06:	60bb      	str	r3, [r7, #8]
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000000 	.word	0x20000000

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	080071fc 	.word	0x080071fc

08002e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e64:	b084      	sub	sp, #16
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	f107 001c 	add.w	r0, r7, #28
 8002e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d122      	bne.n	8002ec2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d105      	bne.n	8002eb6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f001 fb1c 	bl	80044f4 <USB_CoreReset>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e01a      	b.n	8002ef8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f001 fb10 	bl	80044f4 <USB_CoreReset>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eea:	e005      	b.n	8002ef8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10b      	bne.n	8002f16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f043 0206 	orr.w	r2, r3, #6
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f22:	b004      	add	sp, #16
 8002f24:	4770      	bx	lr
	...

08002f28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d165      	bne.n	8003008 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a41      	ldr	r2, [pc, #260]	; (8003044 <USB_SetTurnaroundTime+0x11c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d906      	bls.n	8002f52 <USB_SetTurnaroundTime+0x2a>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a40      	ldr	r2, [pc, #256]	; (8003048 <USB_SetTurnaroundTime+0x120>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d202      	bcs.n	8002f52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	e062      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <USB_SetTurnaroundTime+0x120>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d306      	bcc.n	8002f68 <USB_SetTurnaroundTime+0x40>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4a3b      	ldr	r2, [pc, #236]	; (800304c <USB_SetTurnaroundTime+0x124>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d202      	bcs.n	8002f68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f62:	230e      	movs	r3, #14
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e057      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4a38      	ldr	r2, [pc, #224]	; (800304c <USB_SetTurnaroundTime+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d306      	bcc.n	8002f7e <USB_SetTurnaroundTime+0x56>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4a37      	ldr	r2, [pc, #220]	; (8003050 <USB_SetTurnaroundTime+0x128>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d202      	bcs.n	8002f7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f78:	230d      	movs	r3, #13
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e04c      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4a33      	ldr	r2, [pc, #204]	; (8003050 <USB_SetTurnaroundTime+0x128>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d306      	bcc.n	8002f94 <USB_SetTurnaroundTime+0x6c>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4a32      	ldr	r2, [pc, #200]	; (8003054 <USB_SetTurnaroundTime+0x12c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d802      	bhi.n	8002f94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f8e:	230c      	movs	r3, #12
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e041      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <USB_SetTurnaroundTime+0x12c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d906      	bls.n	8002faa <USB_SetTurnaroundTime+0x82>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <USB_SetTurnaroundTime+0x130>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d802      	bhi.n	8002faa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fa4:	230b      	movs	r3, #11
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e036      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <USB_SetTurnaroundTime+0x130>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d906      	bls.n	8002fc0 <USB_SetTurnaroundTime+0x98>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	; (800305c <USB_SetTurnaroundTime+0x134>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d802      	bhi.n	8002fc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fba:	230a      	movs	r3, #10
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e02b      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4a26      	ldr	r2, [pc, #152]	; (800305c <USB_SetTurnaroundTime+0x134>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d906      	bls.n	8002fd6 <USB_SetTurnaroundTime+0xae>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a25      	ldr	r2, [pc, #148]	; (8003060 <USB_SetTurnaroundTime+0x138>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d202      	bcs.n	8002fd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002fd0:	2309      	movs	r3, #9
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e020      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4a21      	ldr	r2, [pc, #132]	; (8003060 <USB_SetTurnaroundTime+0x138>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d306      	bcc.n	8002fec <USB_SetTurnaroundTime+0xc4>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <USB_SetTurnaroundTime+0x13c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d802      	bhi.n	8002fec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e015      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <USB_SetTurnaroundTime+0x13c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d906      	bls.n	8003002 <USB_SetTurnaroundTime+0xda>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <USB_SetTurnaroundTime+0x140>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d202      	bcs.n	8003002 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	e00a      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003002:	2306      	movs	r3, #6
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e007      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800300e:	2309      	movs	r3, #9
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	e001      	b.n	8003018 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003014:	2309      	movs	r3, #9
 8003016:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	00d8acbf 	.word	0x00d8acbf
 8003048:	00e4e1c0 	.word	0x00e4e1c0
 800304c:	00f42400 	.word	0x00f42400
 8003050:	01067380 	.word	0x01067380
 8003054:	011a499f 	.word	0x011a499f
 8003058:	01312cff 	.word	0x01312cff
 800305c:	014ca43f 	.word	0x014ca43f
 8003060:	016e3600 	.word	0x016e3600
 8003064:	01a6ab1f 	.word	0x01a6ab1f
 8003068:	01e84800 	.word	0x01e84800

0800306c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d115      	bne.n	80030fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030de:	2001      	movs	r0, #1
 80030e0:	f7fd fcde 	bl	8000aa0 <HAL_Delay>
      ms++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 f972 	bl	80043d4 <USB_GetMode>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d01e      	beq.n	8003134 <USB_SetCurrentMode+0x84>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b31      	cmp	r3, #49	; 0x31
 80030fa:	d9f0      	bls.n	80030de <USB_SetCurrentMode+0x2e>
 80030fc:	e01a      	b.n	8003134 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d115      	bne.n	8003130 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003110:	2001      	movs	r0, #1
 8003112:	f7fd fcc5 	bl	8000aa0 <HAL_Delay>
      ms++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3301      	adds	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f001 f959 	bl	80043d4 <USB_GetMode>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <USB_SetCurrentMode+0x84>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b31      	cmp	r3, #49	; 0x31
 800312c:	d9f0      	bls.n	8003110 <USB_SetCurrentMode+0x60>
 800312e:	e001      	b.n	8003134 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e005      	b.n	8003140 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b32      	cmp	r3, #50	; 0x32
 8003138:	d101      	bne.n	800313e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003148:	b084      	sub	sp, #16
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e009      	b.n	800317c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3340      	adds	r3, #64	; 0x40
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b0e      	cmp	r3, #14
 8003180:	d9f2      	bls.n	8003168 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11c      	bne.n	80031c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003196:	f043 0302 	orr.w	r3, r3, #2
 800319a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
 80031c0:	e00b      	b.n	80031da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	4619      	mov	r1, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f4:	461a      	mov	r2, r3
 80031f6:	680b      	ldr	r3, [r1, #0]
 80031f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10c      	bne.n	800321a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003206:	2100      	movs	r1, #0
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f945 	bl	8003498 <USB_SetDevSpeed>
 800320e:	e008      	b.n	8003222 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003210:	2101      	movs	r1, #1
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f940 	bl	8003498 <USB_SetDevSpeed>
 8003218:	e003      	b.n	8003222 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800321a:	2103      	movs	r1, #3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f93b 	bl	8003498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003222:	2110      	movs	r1, #16
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8f3 	bl	8003410 <USB_FlushTxFifo>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f90f 	bl	8003458 <USB_FlushRxFifo>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	461a      	mov	r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003256:	461a      	mov	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	461a      	mov	r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e043      	b.n	80032f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003284:	d118      	bne.n	80032b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	e013      	b.n	80032ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e008      	b.n	80032ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c4:	461a      	mov	r2, r3
 80032c6:	2300      	movs	r3, #0
 80032c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	461a      	mov	r2, r3
 80032d8:	2300      	movs	r3, #0
 80032da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e8:	461a      	mov	r2, r3
 80032ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3301      	adds	r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3b7      	bcc.n	800326e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e043      	b.n	800338c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800331a:	d118      	bne.n	800334e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e013      	b.n	8003360 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e008      	b.n	8003360 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	461a      	mov	r2, r3
 800335c:	2300      	movs	r3, #0
 800335e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	2300      	movs	r3, #0
 8003370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337e:	461a      	mov	r2, r3
 8003380:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3301      	adds	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3b7      	bcc.n	8003304 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699a      	ldr	r2, [r3, #24]
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <USB_DevInit+0x2c4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f043 0208 	orr.w	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d107      	bne.n	80033fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003408:	b004      	add	sp, #16
 800340a:	4770      	bx	lr
 800340c:	803c3800 	.word	0x803c3800

08003410 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3301      	adds	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <USB_FlushTxFifo+0x44>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e006      	b.n	8003448 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d0f1      	beq.n	800342a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	00030d40 	.word	0x00030d40

08003458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2210      	movs	r2, #16
 8003468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <USB_FlushRxFifo+0x3c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e006      	b.n	8003488 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d0f1      	beq.n	800346a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	00030d40 	.word	0x00030d40

08003498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b087      	sub	sp, #28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]
 80034ee:	e00a      	b.n	8003506 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d002      	beq.n	80034fc <USB_GetDevSpeed+0x32>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d102      	bne.n	8003502 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80034fc:	2302      	movs	r3, #2
 80034fe:	75fb      	strb	r3, [r7, #23]
 8003500:	e001      	b.n	8003506 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003502:	230f      	movs	r3, #15
 8003504:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	785b      	ldrb	r3, [r3, #1]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d13a      	bne.n	80035a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	b29b      	uxth	r3, r3
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800354e:	4313      	orrs	r3, r2
 8003550:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d155      	bne.n	8003614 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	78db      	ldrb	r3, [r3, #3]
 8003582:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003584:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	059b      	lsls	r3, r3, #22
 800358a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800358c:	4313      	orrs	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e036      	b.n	8003614 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11a      	bne.n	8003614 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	78db      	ldrb	r3, [r3, #3]
 80035f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035fa:	430b      	orrs	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800360a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d161      	bne.n	8003704 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003656:	d11f      	bne.n	8003698 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003676:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	440a      	add	r2, r1
 800368e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003696:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	2101      	movs	r1, #1
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b8:	4013      	ands	r3, r2
 80036ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036dc:	4013      	ands	r3, r2
 80036de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0159      	lsls	r1, r3, #5
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	440b      	add	r3, r1
 80036f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fa:	4619      	mov	r1, r3
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <USB_DeactivateEndpoint+0x1b0>)
 80036fe:	4013      	ands	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
 8003702:	e060      	b.n	80037c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800371a:	d11f      	bne.n	800375c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800373a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003756:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800375a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	43db      	mvns	r3, r3
 8003776:	68f9      	ldr	r1, [r7, #12]
 8003778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800377c:	4013      	ands	r3, r2
 800377e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	43db      	mvns	r3, r3
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a0:	4013      	ands	r3, r2
 80037a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	4619      	mov	r1, r3
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <USB_DeactivateEndpoint+0x1b4>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	ec337800 	.word	0xec337800
 80037d8:	eff37800 	.word	0xeff37800

080037dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 815c 	bne.w	8003ab6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d132      	bne.n	800386c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003820:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003824:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003848:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	0cdb      	lsrs	r3, r3, #19
 8003866:	04db      	lsls	r3, r3, #19
 8003868:	6113      	str	r3, [r2, #16]
 800386a:	e074      	b.n	8003956 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003886:	0cdb      	lsrs	r3, r3, #19
 8003888:	04db      	lsls	r3, r3, #19
 800388a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	0151      	lsls	r1, r2, #5
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	440a      	add	r2, r1
 80038a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	6959      	ldr	r1, [r3, #20]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	440b      	add	r3, r1
 80038c8:	1e59      	subs	r1, r3, #1
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038d4:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <USB_EPStartXfer+0x370>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	69b9      	ldr	r1, [r7, #24]
 80038da:	0148      	lsls	r0, r1, #5
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	4401      	add	r1, r0
 80038e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038e4:	4313      	orrs	r3, r2
 80038e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	0148      	lsls	r0, r1, #5
 8003902:	69f9      	ldr	r1, [r7, #28]
 8003904:	4401      	add	r1, r0
 8003906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	78db      	ldrb	r3, [r3, #3]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d11f      	bne.n	8003956 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003930:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003934:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003950:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003954:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d14b      	bne.n	80039f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	461a      	mov	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d128      	bne.n	80039d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d110      	bne.n	80039b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	0151      	lsls	r1, r2, #5
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	440a      	add	r2, r1
 80039a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e00f      	b.n	80039d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	0151      	lsls	r1, r2, #5
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	440a      	add	r2, r1
 80039c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e12f      	b.n	8003c54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	0151      	lsls	r1, r2, #5
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	440a      	add	r2, r1
 8003a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a12:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	78db      	ldrb	r3, [r3, #3]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d015      	beq.n	8003a48 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8117 	beq.w	8003c54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a42:	4313      	orrs	r3, r2
 8003a44:	634b      	str	r3, [r1, #52]	; 0x34
 8003a46:	e105      	b.n	8003c54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d110      	bne.n	8003a7a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	0151      	lsls	r1, r2, #5
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	440a      	add	r2, r1
 8003a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	e00f      	b.n	8003a9a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68d9      	ldr	r1, [r3, #12]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	b298      	uxth	r0, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa2b 	bl	8003f0a <USB_WritePacket>
 8003ab4:	e0ce      	b.n	8003c54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	0151      	lsls	r1, r2, #5
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	440a      	add	r2, r1
 8003acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad0:	0cdb      	lsrs	r3, r3, #19
 8003ad2:	04db      	lsls	r3, r3, #19
 8003ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003af8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d126      	bne.n	8003b50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	0148      	lsls	r0, r1, #5
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	4401      	add	r1, r0
 8003b20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b24:	4313      	orrs	r3, r2
 8003b26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b46:	6113      	str	r3, [r2, #16]
 8003b48:	e036      	b.n	8003bb8 <USB_EPStartXfer+0x3dc>
 8003b4a:	bf00      	nop
 8003b4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	8afb      	ldrh	r3, [r7, #22]
 8003b76:	04d9      	lsls	r1, r3, #19
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <USB_EPStartXfer+0x484>)
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	0148      	lsls	r0, r1, #5
 8003b80:	69f9      	ldr	r1, [r7, #28]
 8003b82:	4401      	add	r1, r0
 8003b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	8af9      	ldrh	r1, [r7, #22]
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	0148      	lsls	r0, r1, #5
 8003bac:	69f9      	ldr	r1, [r7, #28]
 8003bae:	4401      	add	r1, r0
 8003bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d10d      	bne.n	8003bda <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	78db      	ldrb	r3, [r3, #3]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d128      	bne.n	8003c34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d110      	bne.n	8003c14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00f      	b.n	8003c34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	1ff80000 	.word	0x1ff80000

08003c64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 80cd 	bne.w	8003e20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d132      	bne.n	8003cf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	0151      	lsls	r1, r2, #5
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	440a      	add	r2, r1
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	0151      	lsls	r1, r2, #5
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	440a      	add	r2, r1
 8003ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cec:	0cdb      	lsrs	r3, r3, #19
 8003cee:	04db      	lsls	r3, r3, #19
 8003cf0:	6113      	str	r3, [r2, #16]
 8003cf2:	e04e      	b.n	8003d92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0e:	0cdb      	lsrs	r3, r3, #19
 8003d10:	04db      	lsls	r3, r3, #19
 8003d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	6939      	ldr	r1, [r7, #16]
 8003d84:	0148      	lsls	r0, r1, #5
 8003d86:	6979      	ldr	r1, [r7, #20]
 8003d88:	4401      	add	r1, r0
 8003d8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11e      	bne.n	8003dd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e092      	b.n	8003efc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003df4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07e      	beq.n	8003efc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	2101      	movs	r1, #1
 8003e10:	fa01 f303 	lsl.w	r3, r1, r3
 8003e14:	6979      	ldr	r1, [r7, #20]
 8003e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	634b      	str	r3, [r1, #52]	; 0x34
 8003e1e:	e06d      	b.n	8003efc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	0151      	lsls	r1, r2, #5
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	440a      	add	r2, r1
 8003e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e3a:	0cdb      	lsrs	r3, r3, #19
 8003e3c:	04db      	lsls	r3, r3, #19
 8003e3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	6939      	ldr	r1, [r7, #16]
 8003eac:	0148      	lsls	r0, r1, #5
 8003eae:	6979      	ldr	r1, [r7, #20]
 8003eb0:	4401      	add	r1, r0
 8003eb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10d      	bne.n	8003edc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68d9      	ldr	r1, [r3, #12]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	460a      	mov	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003efa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b089      	sub	sp, #36	; 0x24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	4611      	mov	r1, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	460b      	mov	r3, r1
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d123      	bne.n	8003f78 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f30:	88bb      	ldrh	r3, [r7, #4]
 8003f32:	3303      	adds	r3, #3
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e018      	b.n	8003f70 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	031a      	lsls	r2, r3, #12
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d3e2      	bcc.n	8003f3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b08b      	sub	sp, #44	; 0x2c
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	e014      	b.n	8003fdc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	3301      	adds	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3e6      	bcc.n	8003fb2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fe4:	8bfb      	ldrh	r3, [r7, #30]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01e      	beq.n	8004028 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f107 0310 	add.w	r3, r7, #16
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	701a      	strb	r2, [r3, #0]
      i++;
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	3301      	adds	r3, #1
 8004014:	623b      	str	r3, [r7, #32]
      pDest++;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800401c:	8bfb      	ldrh	r3, [r7, #30]
 800401e:	3b01      	subs	r3, #1
 8004020:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004022:	8bfb      	ldrh	r3, [r7, #30]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ea      	bne.n	8003ffe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800402a:	4618      	mov	r0, r3
 800402c:	372c      	adds	r7, #44	; 0x2c
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d12c      	bne.n	80040ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db12      	blt.n	800408a <USB_EPSetStall+0x54>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00f      	beq.n	800408a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	0151      	lsls	r1, r2, #5
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	440a      	add	r2, r1
 8004080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004088:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e02b      	b.n	8004104 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db12      	blt.n	80040e4 <USB_EPSetStall+0xae>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d128      	bne.n	8004180 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800414c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	78db      	ldrb	r3, [r3, #3]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d003      	beq.n	800415e <USB_EPClearStall+0x4c>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	78db      	ldrb	r3, [r3, #3]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d138      	bne.n	80041d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e027      	b.n	80041d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	440a      	add	r2, r1
 8004196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800419e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	78db      	ldrb	r3, [r3, #3]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d003      	beq.n	80041b0 <USB_EPClearStall+0x9e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	78db      	ldrb	r3, [r3, #3]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d10f      	bne.n	80041d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004200:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004244:	f023 0303 	bic.w	r3, r3, #3
 8004248:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004258:	f023 0302 	bic.w	r3, r3, #2
 800425c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4013      	ands	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042c6:	68fb      	ldr	r3, [r7, #12]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0c1b      	lsrs	r3, r3, #16
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	b29b      	uxth	r3, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800436a:	68bb      	ldr	r3, [r7, #8]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	01db      	lsls	r3, r3, #7
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043c6:	68bb      	ldr	r3, [r7, #8]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0301 	and.w	r3, r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800440e:	f023 0307 	bic.w	r3, r3, #7
 8004412:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	460b      	mov	r3, r1
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	333c      	adds	r3, #60	; 0x3c
 800444e:	3304      	adds	r3, #4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <USB_EP0_OutStart+0xb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d90a      	bls.n	8004472 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800446c:	d101      	bne.n	8004472 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e037      	b.n	80044e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	2300      	movs	r3, #0
 800447c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a0:	f043 0318 	orr.w	r3, r3, #24
 80044a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d10f      	bne.n	80044e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	4f54300a 	.word	0x4f54300a

080044f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <USB_CoreReset+0x60>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e01a      	b.n	8004546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	daf3      	bge.n	8004500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <USB_CoreReset+0x60>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e006      	b.n	8004546 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d0f1      	beq.n	8004528 <USB_CoreReset+0x34>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	00030d40 	.word	0x00030d40

08004558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004564:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004568:	f002 f952 	bl	8006810 <USBD_static_malloc>
 800456c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800457c:	2302      	movs	r3, #2
 800457e:	e066      	b.n	800464e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7c1b      	ldrb	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d119      	bne.n	80045c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004594:	2202      	movs	r2, #2
 8004596:	2181      	movs	r1, #129	; 0x81
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f002 f816 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a8:	2202      	movs	r2, #2
 80045aa:	2101      	movs	r1, #1
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f002 f80c 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2210      	movs	r2, #16
 80045be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80045c2:	e016      	b.n	80045f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	2202      	movs	r2, #2
 80045c8:	2181      	movs	r1, #129	; 0x81
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 fffd 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80045d6:	2340      	movs	r3, #64	; 0x40
 80045d8:	2202      	movs	r2, #2
 80045da:	2101      	movs	r1, #1
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fff4 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2210      	movs	r2, #16
 80045ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045f2:	2308      	movs	r3, #8
 80045f4:	2203      	movs	r2, #3
 80045f6:	2182      	movs	r1, #130	; 0x82
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f001 ffe6 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7c1b      	ldrb	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800462e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004632:	2101      	movs	r1, #1
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f002 f8b7 	bl	80067a8 <USBD_LL_PrepareReceive>
 800463a:	e007      	b.n	800464c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	2101      	movs	r1, #1
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f002 f8ae 	bl	80067a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004662:	2181      	movs	r1, #129	; 0x81
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 ffd6 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004670:	2101      	movs	r1, #1
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 ffcf 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004680:	2182      	movs	r1, #130	; 0x82
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 ffc7 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 f8ba 	bl	800682c <USBD_static_free>
    pdev->pClassData = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0af      	b.n	8004854 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d03f      	beq.n	8004780 <USBD_CDC_Setup+0xb4>
 8004700:	2b20      	cmp	r3, #32
 8004702:	f040 809f 	bne.w	8004844 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	88db      	ldrh	r3, [r3, #6]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02e      	beq.n	800476c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b25b      	sxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	da16      	bge.n	8004746 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004724:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	88d2      	ldrh	r2, [r2, #6]
 800472a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	88db      	ldrh	r3, [r3, #6]
 8004730:	2b07      	cmp	r3, #7
 8004732:	bf28      	it	cs
 8004734:	2307      	movcs	r3, #7
 8004736:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	89fa      	ldrh	r2, [r7, #14]
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 fb19 	bl	8005d76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004744:	e085      	b.n	8004852 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	785a      	ldrb	r2, [r3, #1]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	88db      	ldrh	r3, [r3, #6]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800475c:	6939      	ldr	r1, [r7, #16]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	88db      	ldrh	r3, [r3, #6]
 8004762:	461a      	mov	r2, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f001 fb32 	bl	8005dce <USBD_CtlPrepareRx>
      break;
 800476a:	e072      	b.n	8004852 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	7850      	ldrb	r0, [r2, #1]
 8004778:	2200      	movs	r2, #0
 800477a:	6839      	ldr	r1, [r7, #0]
 800477c:	4798      	blx	r3
      break;
 800477e:	e068      	b.n	8004852 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b0b      	cmp	r3, #11
 8004786:	d852      	bhi.n	800482e <USBD_CDC_Setup+0x162>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <USBD_CDC_Setup+0xc4>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047c1 	.word	0x080047c1
 8004794:	0800483d 	.word	0x0800483d
 8004798:	0800482f 	.word	0x0800482f
 800479c:	0800482f 	.word	0x0800482f
 80047a0:	0800482f 	.word	0x0800482f
 80047a4:	0800482f 	.word	0x0800482f
 80047a8:	0800482f 	.word	0x0800482f
 80047ac:	0800482f 	.word	0x0800482f
 80047b0:	0800482f 	.word	0x0800482f
 80047b4:	0800482f 	.word	0x0800482f
 80047b8:	080047eb 	.word	0x080047eb
 80047bc:	08004815 	.word	0x08004815
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d107      	bne.n	80047dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80047cc:	f107 030a 	add.w	r3, r7, #10
 80047d0:	2202      	movs	r2, #2
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 face 	bl	8005d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80047da:	e032      	b.n	8004842 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f001 fa58 	bl	8005c94 <USBD_CtlError>
            ret = USBD_FAIL;
 80047e4:	2303      	movs	r3, #3
 80047e6:	75fb      	strb	r3, [r7, #23]
          break;
 80047e8:	e02b      	b.n	8004842 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d107      	bne.n	8004806 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80047f6:	f107 030d 	add.w	r3, r7, #13
 80047fa:	2201      	movs	r2, #1
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fab9 	bl	8005d76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004804:	e01d      	b.n	8004842 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f001 fa43 	bl	8005c94 <USBD_CtlError>
            ret = USBD_FAIL;
 800480e:	2303      	movs	r3, #3
 8004810:	75fb      	strb	r3, [r7, #23]
          break;
 8004812:	e016      	b.n	8004842 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b03      	cmp	r3, #3
 800481e:	d00f      	beq.n	8004840 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f001 fa36 	bl	8005c94 <USBD_CtlError>
            ret = USBD_FAIL;
 8004828:	2303      	movs	r3, #3
 800482a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800482c:	e008      	b.n	8004840 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 fa2f 	bl	8005c94 <USBD_CtlError>
          ret = USBD_FAIL;
 8004836:	2303      	movs	r3, #3
 8004838:	75fb      	strb	r3, [r7, #23]
          break;
 800483a:	e002      	b.n	8004842 <USBD_CDC_Setup+0x176>
          break;
 800483c:	bf00      	nop
 800483e:	e008      	b.n	8004852 <USBD_CDC_Setup+0x186>
          break;
 8004840:	bf00      	nop
      }
      break;
 8004842:	e006      	b.n	8004852 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fa24 	bl	8005c94 <USBD_CtlError>
      ret = USBD_FAIL;
 800484c:	2303      	movs	r3, #3
 800484e:	75fb      	strb	r3, [r7, #23]
      break;
 8004850:	bf00      	nop
  }

  return (uint8_t)ret;
 8004852:	7dfb      	ldrb	r3, [r7, #23]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800486e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800487a:	2303      	movs	r3, #3
 800487c:	e04f      	b.n	800491e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004884:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3318      	adds	r3, #24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d029      	beq.n	80048f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3318      	adds	r3, #24
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	78f9      	ldrb	r1, [r7, #3]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	460b      	mov	r3, r1
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	1a5b      	subs	r3, r3, r1
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	3344      	adds	r3, #68	; 0x44
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80048c4:	fb03 f301 	mul.w	r3, r3, r1
 80048c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d110      	bne.n	80048f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3318      	adds	r3, #24
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048e2:	78f9      	ldrb	r1, [r7, #3]
 80048e4:	2300      	movs	r3, #0
 80048e6:	2200      	movs	r2, #0
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 ff3c 	bl	8006766 <USBD_LL_Transmit>
 80048ee:	e015      	b.n	800491c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004938:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004944:	2303      	movs	r3, #3
 8004946:	e015      	b.n	8004974 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f001 ff4c 	bl	80067ea <USBD_LL_GetRxDataSize>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800496e:	4611      	mov	r1, r2
 8004970:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800498a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004992:	2303      	movs	r3, #3
 8004994:	e01b      	b.n	80049ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <USBD_CDC_EP0_RxReady+0x50>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80049a6:	2bff      	cmp	r3, #255	; 0xff
 80049a8:	d010      	beq.n	80049cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80049b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049c0:	b292      	uxth	r2, r2
 80049c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2243      	movs	r2, #67	; 0x43
 80049e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80049e6:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20000094 	.word	0x20000094

080049f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2243      	movs	r2, #67	; 0x43
 8004a04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004a06:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	20000050 	.word	0x20000050

08004a18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2243      	movs	r2, #67	; 0x43
 8004a24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004a26:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	200000d8 	.word	0x200000d8

08004a38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	220a      	movs	r2, #10
 8004a44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a46:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e004      	b.n	8004a76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b087      	sub	sp, #28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e008      	b.n	8004ab2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ace:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004afe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e01a      	b.n	8004b48 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d114      	bne.n	8004b46 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b3a:	2181      	movs	r1, #129	; 0x81
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 fe12 	bl	8006766 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e016      	b.n	8004b9c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7c1b      	ldrb	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b80:	2101      	movs	r1, #1
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f001 fe10 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004b88:	e007      	b.n	8004b9a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	2101      	movs	r1, #1
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f001 fe07 	bl	80067a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e01f      	b.n	8004bfc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	79fa      	ldrb	r2, [r7, #7]
 8004bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f001 fc83 	bl	80064fc <USBD_LL_Init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e016      	b.n	8004c4a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	f107 020e 	add.w	r2, r7, #14
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
 8004c40:	4602      	mov	r2, r0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fc9a 	bl	8006594 <USBD_LL_Start>
 8004c60:	4603      	mov	r3, r0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
  }

  return USBD_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 ff90 	bl	8005c20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d01a      	beq.n	8004d5a <USBD_LL_SetupStage+0x72>
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d822      	bhi.n	8004d6e <USBD_LL_SetupStage+0x86>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <USBD_LL_SetupStage+0x4a>
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d00a      	beq.n	8004d46 <USBD_LL_SetupStage+0x5e>
 8004d30:	e01d      	b.n	8004d6e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa62 	bl	8005204 <USBD_StdDevReq>
 8004d40:	4603      	mov	r3, r0
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e020      	b.n	8004d88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fac6 	bl	80052e0 <USBD_StdItfReq>
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e016      	b.n	8004d88 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb05 	bl	8005372 <USBD_StdEPReq>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e00c      	b.n	8004d88 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 fc69 	bl	8006654 <USBD_LL_StallEP>
 8004d82:	4603      	mov	r3, r0
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	bf00      	nop
  }

  return ret;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004da0:	7afb      	ldrb	r3, [r7, #11]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d138      	bne.n	8004e18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004dac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d14a      	bne.n	8004e4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d913      	bls.n	8004dec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	bf28      	it	cs
 8004dde:	4613      	movcs	r3, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 f80f 	bl	8005e08 <USBD_CtlContinueRx>
 8004dea:	e030      	b.n	8004e4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d10b      	bne.n	8004e10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f001 f80a 	bl	8005e2a <USBD_CtlSendStatus>
 8004e16:	e01a      	b.n	8004e4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d114      	bne.n	8004e4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	7afa      	ldrb	r2, [r7, #11]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	4798      	blx	r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	e000      	b.n	8004e50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	460b      	mov	r3, r1
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e66:	7afb      	ldrb	r3, [r7, #11]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d16b      	bne.n	8004f44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d156      	bne.n	8004f2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d914      	bls.n	8004eb2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 ff84 	bl	8005dac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f001 fc7c 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004eb0:	e03b      	b.n	8004f2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d11c      	bne.n	8004ef8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d316      	bcc.n	8004ef8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d20f      	bcs.n	8004ef8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2100      	movs	r1, #0
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 ff65 	bl	8005dac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004eea:	2300      	movs	r3, #0
 8004eec:	2200      	movs	r2, #0
 8004eee:	2100      	movs	r1, #0
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f001 fc59 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004ef6:	e018      	b.n	8004f2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d10b      	bne.n	8004f1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f001 fb98 	bl	8006654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 ff93 	bl	8005e50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d122      	bne.n	8004f7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fe98 	bl	8004c6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004f42:	e01a      	b.n	8004f7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d114      	bne.n	8004f7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	7afa      	ldrb	r2, [r7, #11]
 8004f66:	4611      	mov	r1, r2
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	4798      	blx	r3
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	e000      	b.n	8004f7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e02f      	b.n	8005018 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00f      	beq.n	8004fe2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f001 faee 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2240      	movs	r2, #64	; 0x40
 8004ffa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	2200      	movs	r2, #0
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f001 fae0 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800504e:	b2da      	uxtb	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b04      	cmp	r3, #4
 800507e:	d106      	bne.n	800508e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005086:	b2da      	uxtb	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e012      	b.n	80050d8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d10b      	bne.n	80050d6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e014      	b.n	8005124 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b03      	cmp	r3, #3
 8005104:	d10d      	bne.n	8005122 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	4611      	mov	r1, r2
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005142:	2303      	movs	r3, #3
 8005144:	e014      	b.n	8005170 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b03      	cmp	r3, #3
 8005150:	d10d      	bne.n	800516e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	4611      	mov	r1, r2
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6852      	ldr	r2, [r2, #4]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	4611      	mov	r1, r2
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
  }

  return USBD_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3301      	adds	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80051e4:	8a3b      	ldrh	r3, [r7, #16]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	b21a      	sxth	r2, r3
 80051ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	b21b      	sxth	r3, r3
 80051f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80051f4:	89fb      	ldrh	r3, [r7, #14]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d005      	beq.n	800522a <USBD_StdDevReq+0x26>
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d853      	bhi.n	80052ca <USBD_StdDevReq+0xc6>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <USBD_StdDevReq+0x3a>
 8005226:	2b20      	cmp	r3, #32
 8005228:	d14f      	bne.n	80052ca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	6839      	ldr	r1, [r7, #0]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
      break;
 800523c:	e04a      	b.n	80052d4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b09      	cmp	r3, #9
 8005244:	d83b      	bhi.n	80052be <USBD_StdDevReq+0xba>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <USBD_StdDevReq+0x48>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	080052a1 	.word	0x080052a1
 8005250:	080052b5 	.word	0x080052b5
 8005254:	080052bf 	.word	0x080052bf
 8005258:	080052ab 	.word	0x080052ab
 800525c:	080052bf 	.word	0x080052bf
 8005260:	0800527f 	.word	0x0800527f
 8005264:	08005275 	.word	0x08005275
 8005268:	080052bf 	.word	0x080052bf
 800526c:	08005297 	.word	0x08005297
 8005270:	08005289 	.word	0x08005289
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9de 	bl	8005638 <USBD_GetDescriptor>
          break;
 800527c:	e024      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb43 	bl	800590c <USBD_SetAddress>
          break;
 8005286:	e01f      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb82 	bl	8005994 <USBD_SetConfig>
 8005290:	4603      	mov	r3, r0
 8005292:	73fb      	strb	r3, [r7, #15]
          break;
 8005294:	e018      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fc21 	bl	8005ae0 <USBD_GetConfig>
          break;
 800529e:	e013      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fc52 	bl	8005b4c <USBD_GetStatus>
          break;
 80052a8:	e00e      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fc81 	bl	8005bb4 <USBD_SetFeature>
          break;
 80052b2:	e009      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc90 	bl	8005bdc <USBD_ClrFeature>
          break;
 80052bc:	e004      	b.n	80052c8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80052be:	6839      	ldr	r1, [r7, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fce7 	bl	8005c94 <USBD_CtlError>
          break;
 80052c6:	bf00      	nop
      }
      break;
 80052c8:	e004      	b.n	80052d4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fce1 	bl	8005c94 <USBD_CtlError>
      break;
 80052d2:	bf00      	nop
  }

  return ret;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop

080052e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d005      	beq.n	8005306 <USBD_StdItfReq+0x26>
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d82f      	bhi.n	800535e <USBD_StdItfReq+0x7e>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <USBD_StdItfReq+0x26>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d12b      	bne.n	800535e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800530c:	b2db      	uxtb	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	2b02      	cmp	r3, #2
 8005312:	d81d      	bhi.n	8005350 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	889b      	ldrh	r3, [r3, #4]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d813      	bhi.n	8005346 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	88db      	ldrh	r3, [r3, #6]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d110      	bne.n	800535a <USBD_StdItfReq+0x7a>
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fd73 	bl	8005e2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005344:	e009      	b.n	800535a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fca3 	bl	8005c94 <USBD_CtlError>
          break;
 800534e:	e004      	b.n	800535a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fc9e 	bl	8005c94 <USBD_CtlError>
          break;
 8005358:	e000      	b.n	800535c <USBD_StdItfReq+0x7c>
          break;
 800535a:	bf00      	nop
      }
      break;
 800535c:	e004      	b.n	8005368 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fc97 	bl	8005c94 <USBD_CtlError>
      break;
 8005366:	bf00      	nop
  }

  return ret;
 8005368:	7bfb      	ldrb	r3, [r7, #15]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	889b      	ldrh	r3, [r3, #4]
 8005384:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d007      	beq.n	80053a2 <USBD_StdEPReq+0x30>
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	f200 8145 	bhi.w	8005622 <USBD_StdEPReq+0x2b0>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00c      	beq.n	80053b6 <USBD_StdEPReq+0x44>
 800539c:	2b20      	cmp	r3, #32
 800539e:	f040 8140 	bne.w	8005622 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
      break;
 80053b4:	e13a      	b.n	800562c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d007      	beq.n	80053ce <USBD_StdEPReq+0x5c>
 80053be:	2b03      	cmp	r3, #3
 80053c0:	f300 8129 	bgt.w	8005616 <USBD_StdEPReq+0x2a4>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d07f      	beq.n	80054c8 <USBD_StdEPReq+0x156>
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d03c      	beq.n	8005446 <USBD_StdEPReq+0xd4>
 80053cc:	e123      	b.n	8005616 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d002      	beq.n	80053e0 <USBD_StdEPReq+0x6e>
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d016      	beq.n	800540c <USBD_StdEPReq+0x9a>
 80053de:	e02c      	b.n	800543a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <USBD_StdEPReq+0x90>
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d00a      	beq.n	8005402 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 f92f 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053f6:	2180      	movs	r1, #128	; 0x80
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f001 f92b 	bl	8006654 <USBD_LL_StallEP>
 80053fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005400:	e020      	b.n	8005444 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fc45 	bl	8005c94 <USBD_CtlError>
              break;
 800540a:	e01b      	b.n	8005444 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	885b      	ldrh	r3, [r3, #2]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10e      	bne.n	8005432 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005414:	7bbb      	ldrb	r3, [r7, #14]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <USBD_StdEPReq+0xc0>
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d008      	beq.n	8005432 <USBD_StdEPReq+0xc0>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	88db      	ldrh	r3, [r3, #6]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005428:	7bbb      	ldrb	r3, [r7, #14]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f001 f911 	bl	8006654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fcf9 	bl	8005e2a <USBD_CtlSendStatus>

              break;
 8005438:	e004      	b.n	8005444 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fc29 	bl	8005c94 <USBD_CtlError>
              break;
 8005442:	bf00      	nop
          }
          break;
 8005444:	e0ec      	b.n	8005620 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d002      	beq.n	8005458 <USBD_StdEPReq+0xe6>
 8005452:	2b03      	cmp	r3, #3
 8005454:	d016      	beq.n	8005484 <USBD_StdEPReq+0x112>
 8005456:	e030      	b.n	80054ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00d      	beq.n	800547a <USBD_StdEPReq+0x108>
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d00a      	beq.n	800547a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 f8f3 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 f8ef 	bl	8006654 <USBD_LL_StallEP>
 8005476:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005478:	e025      	b.n	80054c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fc09 	bl	8005c94 <USBD_CtlError>
              break;
 8005482:	e020      	b.n	80054c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	885b      	ldrh	r3, [r3, #2]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11b      	bne.n	80054c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800548c:	7bbb      	ldrb	r3, [r7, #14]
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 f8f9 	bl	8006692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fcc2 	bl	8005e2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80054b8:	e004      	b.n	80054c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fbe9 	bl	8005c94 <USBD_CtlError>
              break;
 80054c2:	e000      	b.n	80054c6 <USBD_StdEPReq+0x154>
              break;
 80054c4:	bf00      	nop
          }
          break;
 80054c6:	e0ab      	b.n	8005620 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d002      	beq.n	80054da <USBD_StdEPReq+0x168>
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d032      	beq.n	800553e <USBD_StdEPReq+0x1cc>
 80054d8:	e097      	b.n	800560a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <USBD_StdEPReq+0x17e>
 80054e0:	7bbb      	ldrb	r3, [r7, #14]
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d004      	beq.n	80054f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fbd3 	bl	8005c94 <USBD_CtlError>
                break;
 80054ee:	e091      	b.n	8005614 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	da0b      	bge.n	8005510 <USBD_StdEPReq+0x19e>
 80054f8:	7bbb      	ldrb	r3, [r7, #14]
 80054fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	3310      	adds	r3, #16
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4413      	add	r3, r2
 800550c:	3304      	adds	r3, #4
 800550e:	e00b      	b.n	8005528 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	3304      	adds	r3, #4
 8005528:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2202      	movs	r2, #2
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fc1d 	bl	8005d76 <USBD_CtlSendData>
              break;
 800553c:	e06a      	b.n	8005614 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800553e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da11      	bge.n	800556a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	f003 020f 	and.w	r2, r3, #15
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d117      	bne.n	8005590 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb96 	bl	8005c94 <USBD_CtlError>
                  break;
 8005568:	e054      	b.n	8005614 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d104      	bne.n	8005590 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fb83 	bl	8005c94 <USBD_CtlError>
                  break;
 800558e:	e041      	b.n	8005614 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da0b      	bge.n	80055b0 <USBD_StdEPReq+0x23e>
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3310      	adds	r3, #16
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	3304      	adds	r3, #4
 80055ae:	e00b      	b.n	80055c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055b0:	7bbb      	ldrb	r3, [r7, #14]
 80055b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	4413      	add	r3, r2
 80055c6:	3304      	adds	r3, #4
 80055c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055ca:	7bbb      	ldrb	r3, [r7, #14]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USBD_StdEPReq+0x264>
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d103      	bne.n	80055de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e00e      	b.n	80055fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 f874 	bl	80066d0 <USBD_LL_IsStallEP>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2201      	movs	r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e002      	b.n	80055fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2202      	movs	r2, #2
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fbb7 	bl	8005d76 <USBD_CtlSendData>
              break;
 8005608:	e004      	b.n	8005614 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb41 	bl	8005c94 <USBD_CtlError>
              break;
 8005612:	bf00      	nop
          }
          break;
 8005614:	e004      	b.n	8005620 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb3b 	bl	8005c94 <USBD_CtlError>
          break;
 800561e:	bf00      	nop
      }
      break;
 8005620:	e004      	b.n	800562c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb35 	bl	8005c94 <USBD_CtlError>
      break;
 800562a:	bf00      	nop
  }

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	885b      	ldrh	r3, [r3, #2]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	2b06      	cmp	r3, #6
 800565a:	f200 8128 	bhi.w	80058ae <USBD_GetDescriptor+0x276>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <USBD_GetDescriptor+0x2c>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005681 	.word	0x08005681
 8005668:	08005699 	.word	0x08005699
 800566c:	080056d9 	.word	0x080056d9
 8005670:	080058af 	.word	0x080058af
 8005674:	080058af 	.word	0x080058af
 8005678:	0800584f 	.word	0x0800584f
 800567c:	0800587b 	.word	0x0800587b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	7c12      	ldrb	r2, [r2, #16]
 800568c:	f107 0108 	add.w	r1, r7, #8
 8005690:	4610      	mov	r0, r2
 8005692:	4798      	blx	r3
 8005694:	60f8      	str	r0, [r7, #12]
      break;
 8005696:	e112      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7c1b      	ldrb	r3, [r3, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f107 0208 	add.w	r2, r7, #8
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
 80056b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	2202      	movs	r2, #2
 80056b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056ba:	e100      	b.n	80058be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	f107 0208 	add.w	r2, r7, #8
 80056c8:	4610      	mov	r0, r2
 80056ca:	4798      	blx	r3
 80056cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	2202      	movs	r2, #2
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	e0f2      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	885b      	ldrh	r3, [r3, #2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b05      	cmp	r3, #5
 80056e0:	f200 80ac 	bhi.w	800583c <USBD_GetDescriptor+0x204>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <USBD_GetDescriptor+0xb4>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005705 	.word	0x08005705
 80056f0:	08005739 	.word	0x08005739
 80056f4:	0800576d 	.word	0x0800576d
 80056f8:	080057a1 	.word	0x080057a1
 80056fc:	080057d5 	.word	0x080057d5
 8005700:	08005809 	.word	0x08005809
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	7c12      	ldrb	r2, [r2, #16]
 800571c:	f107 0108 	add.w	r1, r7, #8
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
 8005724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005726:	e091      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fab2 	bl	8005c94 <USBD_CtlError>
            err++;
 8005730:	7afb      	ldrb	r3, [r7, #11]
 8005732:	3301      	adds	r3, #1
 8005734:	72fb      	strb	r3, [r7, #11]
          break;
 8005736:	e089      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	7c12      	ldrb	r2, [r2, #16]
 8005750:	f107 0108 	add.w	r1, r7, #8
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800575a:	e077      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa98 	bl	8005c94 <USBD_CtlError>
            err++;
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	3301      	adds	r3, #1
 8005768:	72fb      	strb	r3, [r7, #11]
          break;
 800576a:	e06f      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7c12      	ldrb	r2, [r2, #16]
 8005784:	f107 0108 	add.w	r1, r7, #8
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800578e:	e05d      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa7e 	bl	8005c94 <USBD_CtlError>
            err++;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	3301      	adds	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
          break;
 800579e:	e055      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	7c12      	ldrb	r2, [r2, #16]
 80057b8:	f107 0108 	add.w	r1, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057c2:	e043      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa64 	bl	8005c94 <USBD_CtlError>
            err++;
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	3301      	adds	r3, #1
 80057d0:	72fb      	strb	r3, [r7, #11]
          break;
 80057d2:	e03b      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7c12      	ldrb	r2, [r2, #16]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057f6:	e029      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa4a 	bl	8005c94 <USBD_CtlError>
            err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
          break;
 8005806:	e021      	b.n	800584c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7c12      	ldrb	r2, [r2, #16]
 8005820:	f107 0108 	add.w	r1, r7, #8
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800582a:	e00f      	b.n	800584c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa30 	bl	8005c94 <USBD_CtlError>
            err++;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	3301      	adds	r3, #1
 8005838:	72fb      	strb	r3, [r7, #11]
          break;
 800583a:	e007      	b.n	800584c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fa28 	bl	8005c94 <USBD_CtlError>
          err++;
 8005844:	7afb      	ldrb	r3, [r7, #11]
 8005846:	3301      	adds	r3, #1
 8005848:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800584a:	bf00      	nop
      }
      break;
 800584c:	e037      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7c1b      	ldrb	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	f107 0208 	add.w	r2, r7, #8
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005868:	e029      	b.n	80058be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fa11 	bl	8005c94 <USBD_CtlError>
        err++;
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	3301      	adds	r3, #1
 8005876:	72fb      	strb	r3, [r7, #11]
      break;
 8005878:	e021      	b.n	80058be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	7c1b      	ldrb	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10d      	bne.n	800589e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f107 0208 	add.w	r2, r7, #8
 800588e:	4610      	mov	r0, r2
 8005890:	4798      	blx	r3
 8005892:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	2207      	movs	r2, #7
 800589a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800589c:	e00f      	b.n	80058be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f9f7 	bl	8005c94 <USBD_CtlError>
        err++;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	3301      	adds	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]
      break;
 80058ac:	e007      	b.n	80058be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9ef 	bl	8005c94 <USBD_CtlError>
      err++;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	3301      	adds	r3, #1
 80058ba:	72fb      	strb	r3, [r7, #11]
      break;
 80058bc:	bf00      	nop
  }

  if (err != 0U)
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11e      	bne.n	8005902 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	88db      	ldrh	r3, [r3, #6]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d016      	beq.n	80058fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	88da      	ldrh	r2, [r3, #6]
 80058d6:	893b      	ldrh	r3, [r7, #8]
 80058d8:	4293      	cmp	r3, r2
 80058da:	bf28      	it	cs
 80058dc:	4613      	movcs	r3, r2
 80058de:	b29b      	uxth	r3, r3
 80058e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058e2:	893b      	ldrh	r3, [r7, #8]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68f9      	ldr	r1, [r7, #12]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa44 	bl	8005d76 <USBD_CtlSendData>
 80058ee:	e009      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f9ce 	bl	8005c94 <USBD_CtlError>
 80058f8:	e004      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa95 	bl	8005e2a <USBD_CtlSendStatus>
 8005900:	e000      	b.n	8005904 <USBD_GetDescriptor+0x2cc>
    return;
 8005902:	bf00      	nop
  }
}
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	889b      	ldrh	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d131      	bne.n	8005982 <USBD_SetAddress+0x76>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	88db      	ldrh	r3, [r3, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d12d      	bne.n	8005982 <USBD_SetAddress+0x76>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	885b      	ldrh	r3, [r3, #2]
 800592a:	2b7f      	cmp	r3, #127	; 0x7f
 800592c:	d829      	bhi.n	8005982 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	885b      	ldrh	r3, [r3, #2]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005938:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b03      	cmp	r3, #3
 8005944:	d104      	bne.n	8005950 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f9a3 	bl	8005c94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594e:	e01d      	b.n	800598c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7bfa      	ldrb	r2, [r7, #15]
 8005954:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fee3 	bl	8006728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa61 	bl	8005e2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005976:	e009      	b.n	800598c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005980:	e004      	b.n	800598c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f985 	bl	8005c94 <USBD_CtlError>
  }
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	885b      	ldrh	r3, [r3, #2]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <USBD_SetConfig+0x148>)
 80059aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059ac:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <USBD_SetConfig+0x148>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d905      	bls.n	80059c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f96c 	bl	8005c94 <USBD_CtlError>
    return USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	e088      	b.n	8005ad2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <USBD_SetConfig+0x3e>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d025      	beq.n	8005a1c <USBD_SetConfig+0x88>
 80059d0:	e071      	b.n	8005ab6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059d2:	4b42      	ldr	r3, [pc, #264]	; (8005adc <USBD_SetConfig+0x148>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01c      	beq.n	8005a14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80059da:	4b40      	ldr	r3, [pc, #256]	; (8005adc <USBD_SetConfig+0x148>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <USBD_SetConfig+0x148>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff f948 	bl	8004c80 <USBD_SetClassConfig>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f949 	bl	8005c94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a02:	e065      	b.n	8005ad0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fa10 	bl	8005e2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005a12:	e05d      	b.n	8005ad0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa08 	bl	8005e2a <USBD_CtlSendStatus>
      break;
 8005a1a:	e059      	b.n	8005ad0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <USBD_SetConfig+0x148>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d112      	bne.n	8005a4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <USBD_SetConfig+0x148>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a36:	4b29      	ldr	r3, [pc, #164]	; (8005adc <USBD_SetConfig+0x148>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff f93b 	bl	8004cb8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f9f1 	bl	8005e2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a48:	e042      	b.n	8005ad0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <USBD_SetConfig+0x148>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d02a      	beq.n	8005aae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff f929 	bl	8004cb8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <USBD_SetConfig+0x148>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a70:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <USBD_SetConfig+0x148>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff f902 	bl	8004c80 <USBD_SetClassConfig>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00f      	beq.n	8005aa6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005a86:	6839      	ldr	r1, [r7, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f903 	bl	8005c94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff f90e 	bl	8004cb8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005aa4:	e014      	b.n	8005ad0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9bf 	bl	8005e2a <USBD_CtlSendStatus>
      break;
 8005aac:	e010      	b.n	8005ad0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9bb 	bl	8005e2a <USBD_CtlSendStatus>
      break;
 8005ab4:	e00c      	b.n	8005ad0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005ab6:	6839      	ldr	r1, [r7, #0]
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8eb 	bl	8005c94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <USBD_SetConfig+0x148>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff f8f7 	bl	8004cb8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005aca:	2303      	movs	r3, #3
 8005acc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ace:	bf00      	nop
  }

  return ret;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000204 	.word	0x20000204

08005ae0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	88db      	ldrh	r3, [r3, #6]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d004      	beq.n	8005afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8cd 	bl	8005c94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005afa:	e023      	b.n	8005b44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	dc02      	bgt.n	8005b0e <USBD_GetConfig+0x2e>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dc03      	bgt.n	8005b14 <USBD_GetConfig+0x34>
 8005b0c:	e015      	b.n	8005b3a <USBD_GetConfig+0x5a>
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d00b      	beq.n	8005b2a <USBD_GetConfig+0x4a>
 8005b12:	e012      	b.n	8005b3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	2201      	movs	r2, #1
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f927 	bl	8005d76 <USBD_CtlSendData>
        break;
 8005b28:	e00c      	b.n	8005b44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f91f 	bl	8005d76 <USBD_CtlSendData>
        break;
 8005b38:	e004      	b.n	8005b44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8a9 	bl	8005c94 <USBD_CtlError>
        break;
 8005b42:	bf00      	nop
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d81e      	bhi.n	8005ba2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	88db      	ldrh	r3, [r3, #6]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d004      	beq.n	8005b76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f890 	bl	8005c94 <USBD_CtlError>
        break;
 8005b74:	e01a      	b.n	8005bac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f043 0202 	orr.w	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	330c      	adds	r3, #12
 8005b96:	2202      	movs	r2, #2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8eb 	bl	8005d76 <USBD_CtlSendData>
      break;
 8005ba0:	e004      	b.n	8005bac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f875 	bl	8005c94 <USBD_CtlError>
      break;
 8005baa:	bf00      	nop
  }
}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	885b      	ldrh	r3, [r3, #2]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d106      	bne.n	8005bd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f92b 	bl	8005e2a <USBD_CtlSendStatus>
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d80b      	bhi.n	8005c0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	885b      	ldrh	r3, [r3, #2]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d10c      	bne.n	8005c16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f910 	bl	8005e2a <USBD_CtlSendStatus>
      }
      break;
 8005c0a:	e004      	b.n	8005c16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f840 	bl	8005c94 <USBD_CtlError>
      break;
 8005c14:	e000      	b.n	8005c18 <USBD_ClrFeature+0x3c>
      break;
 8005c16:	bf00      	nop
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff fabb 	bl	80051c6 <SWAPBYTE>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff faae 	bl	80051c6 <SWAPBYTE>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff faa1 	bl	80051c6 <SWAPBYTE>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	80da      	strh	r2, [r3, #6]
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fcd7 	bl	8006654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fcd3 	bl	8006654 <USBD_LL_StallEP>
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d036      	beq.n	8005d3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005cd0:	6938      	ldr	r0, [r7, #16]
 8005cd2:	f000 f836 	bl	8005d42 <USBD_GetLen>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	701a      	strb	r2, [r3, #0]
  idx++;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	3301      	adds	r3, #1
 8005d04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d06:	e013      	b.n	8005d30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	3301      	adds	r3, #1
 8005d18:	613b      	str	r3, [r7, #16]
    idx++;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e7      	bne.n	8005d08 <USBD_GetString+0x52>
 8005d38:	e000      	b.n	8005d3c <USBD_GetString+0x86>
    return;
 8005d3a:	bf00      	nop
  }
}
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d52:	e005      	b.n	8005d60 <USBD_GetLen+0x1e>
  {
    len++;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	3301      	adds	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1f5      	bne.n	8005d54 <USBD_GetLen+0x12>
  }

  return len;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fce2 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fcd1 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	2100      	movs	r1, #0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fcd5 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	2100      	movs	r1, #0
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fcc4 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fc90 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e60:	2300      	movs	r3, #0
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fc9e 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4912      	ldr	r1, [pc, #72]	; (8005ec8 <MX_USB_DEVICE_Init+0x50>)
 8005e80:	4812      	ldr	r0, [pc, #72]	; (8005ecc <MX_USB_DEVICE_Init+0x54>)
 8005e82:	f7fe fe8f 	bl	8004ba4 <USBD_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e8c:	f7fa fc7a 	bl	8000784 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e90:	490f      	ldr	r1, [pc, #60]	; (8005ed0 <MX_USB_DEVICE_Init+0x58>)
 8005e92:	480e      	ldr	r0, [pc, #56]	; (8005ecc <MX_USB_DEVICE_Init+0x54>)
 8005e94:	f7fe feb6 	bl	8004c04 <USBD_RegisterClass>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e9e:	f7fa fc71 	bl	8000784 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005ea2:	490c      	ldr	r1, [pc, #48]	; (8005ed4 <MX_USB_DEVICE_Init+0x5c>)
 8005ea4:	4809      	ldr	r0, [pc, #36]	; (8005ecc <MX_USB_DEVICE_Init+0x54>)
 8005ea6:	f7fe fdd7 	bl	8004a58 <USBD_CDC_RegisterInterface>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005eb0:	f7fa fc68 	bl	8000784 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005eb4:	4805      	ldr	r0, [pc, #20]	; (8005ecc <MX_USB_DEVICE_Init+0x54>)
 8005eb6:	f7fe fecc 	bl	8004c52 <USBD_Start>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ec0:	f7fa fc60 	bl	8000784 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000130 	.word	0x20000130
 8005ecc:	20000488 	.word	0x20000488
 8005ed0:	20000018 	.word	0x20000018
 8005ed4:	2000011c 	.word	0x2000011c

08005ed8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	4905      	ldr	r1, [pc, #20]	; (8005ef4 <CDC_Init_FS+0x1c>)
 8005ee0:	4805      	ldr	r0, [pc, #20]	; (8005ef8 <CDC_Init_FS+0x20>)
 8005ee2:	f7fe fdce 	bl	8004a82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ee6:	4905      	ldr	r1, [pc, #20]	; (8005efc <CDC_Init_FS+0x24>)
 8005ee8:	4803      	ldr	r0, [pc, #12]	; (8005ef8 <CDC_Init_FS+0x20>)
 8005eea:	f7fe fde8 	bl	8004abe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005eee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000f58 	.word	0x20000f58
 8005ef8:	20000488 	.word	0x20000488
 8005efc:	20000758 	.word	0x20000758

08005f00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b23      	cmp	r3, #35	; 0x23
 8005f24:	d84a      	bhi.n	8005fbc <CDC_Control_FS+0xac>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <CDC_Control_FS+0x1c>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005fbd 	.word	0x08005fbd
 8005f30:	08005fbd 	.word	0x08005fbd
 8005f34:	08005fbd 	.word	0x08005fbd
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08005fbd 	.word	0x08005fbd
 8005f40:	08005fbd 	.word	0x08005fbd
 8005f44:	08005fbd 	.word	0x08005fbd
 8005f48:	08005fbd 	.word	0x08005fbd
 8005f4c:	08005fbd 	.word	0x08005fbd
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005fbd 	.word	0x08005fbd
 8005f5c:	08005fbd 	.word	0x08005fbd
 8005f60:	08005fbd 	.word	0x08005fbd
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005fbd 	.word	0x08005fbd
 8005f70:	08005fbd 	.word	0x08005fbd
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005fbd 	.word	0x08005fbd
 8005f7c:	08005fbd 	.word	0x08005fbd
 8005f80:	08005fbd 	.word	0x08005fbd
 8005f84:	08005fbd 	.word	0x08005fbd
 8005f88:	08005fbd 	.word	0x08005fbd
 8005f8c:	08005fbd 	.word	0x08005fbd
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fbd 	.word	0x08005fbd
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	08005fbd 	.word	0x08005fbd
 8005fa8:	08005fbd 	.word	0x08005fbd
 8005fac:	08005fbd 	.word	0x08005fbd
 8005fb0:	08005fbd 	.word	0x08005fbd
 8005fb4:	08005fbd 	.word	0x08005fbd
 8005fb8:	08005fbd 	.word	0x08005fbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005fbc:	bf00      	nop
  }

  return (USBD_OK);
 8005fbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <CDC_Receive_FS+0x24>)
 8005fda:	f7fe fd70 	bl	8004abe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005fde:	4804      	ldr	r0, [pc, #16]	; (8005ff0 <CDC_Receive_FS+0x24>)
 8005fe0:	f7fe fdb6 	bl	8004b50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005fe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000488 	.word	0x20000488

08005ff4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <CDC_Transmit_FS+0x48>)
 8006006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006016:	2301      	movs	r3, #1
 8006018:	e00b      	b.n	8006032 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800601a:	887b      	ldrh	r3, [r7, #2]
 800601c:	461a      	mov	r2, r3
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4806      	ldr	r0, [pc, #24]	; (800603c <CDC_Transmit_FS+0x48>)
 8006022:	f7fe fd2e 	bl	8004a82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006026:	4805      	ldr	r0, [pc, #20]	; (800603c <CDC_Transmit_FS+0x48>)
 8006028:	f7fe fd62 	bl	8004af0 <USBD_CDC_TransmitPacket>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000488 	.word	0x20000488

08006040 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2212      	movs	r2, #18
 8006074:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	2000014c 	.word	0x2000014c

08006088 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800609a:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	20000160 	.word	0x20000160

080060ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4907      	ldr	r1, [pc, #28]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80060c2:	4808      	ldr	r0, [pc, #32]	; (80060e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80060c4:	f7ff fdf7 	bl	8005cb6 <USBD_GetString>
 80060c8:	e004      	b.n	80060d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	4904      	ldr	r1, [pc, #16]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80060ce:	4805      	ldr	r0, [pc, #20]	; (80060e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80060d0:	f7ff fdf1 	bl	8005cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060d4:	4b02      	ldr	r3, [pc, #8]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001758 	.word	0x20001758
 80060e4:	080071a4 	.word	0x080071a4

080060e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	6039      	str	r1, [r7, #0]
 80060f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	4904      	ldr	r1, [pc, #16]	; (8006108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060f8:	4804      	ldr	r0, [pc, #16]	; (800610c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060fa:	f7ff fddc 	bl	8005cb6 <USBD_GetString>
  return USBD_StrDesc;
 80060fe:	4b02      	ldr	r3, [pc, #8]	; (8006108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	20001758 	.word	0x20001758
 800610c:	080071bc 	.word	0x080071bc

08006110 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	221a      	movs	r2, #26
 8006120:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006122:	f000 f843 	bl	80061ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006126:	4b02      	ldr	r3, [pc, #8]	; (8006130 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000164 	.word	0x20000164

08006134 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4907      	ldr	r1, [pc, #28]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <USBD_FS_ConfigStrDescriptor+0x38>)
 800614c:	f7ff fdb3 	bl	8005cb6 <USBD_GetString>
 8006150:	e004      	b.n	800615c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006156:	4805      	ldr	r0, [pc, #20]	; (800616c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006158:	f7ff fdad 	bl	8005cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20001758 	.word	0x20001758
 800616c:	080071d0 	.word	0x080071d0

08006170 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d105      	bne.n	800618e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4907      	ldr	r1, [pc, #28]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006186:	4808      	ldr	r0, [pc, #32]	; (80061a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006188:	f7ff fd95 	bl	8005cb6 <USBD_GetString>
 800618c:	e004      	b.n	8006198 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006194:	f7ff fd8f 	bl	8005cb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20001758 	.word	0x20001758
 80061a8:	080071dc 	.word	0x080071dc

080061ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <Get_SerialNum+0x44>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061b8:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <Get_SerialNum+0x48>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <Get_SerialNum+0x4c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061d2:	2208      	movs	r2, #8
 80061d4:	4909      	ldr	r1, [pc, #36]	; (80061fc <Get_SerialNum+0x50>)
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f814 	bl	8006204 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061dc:	2204      	movs	r2, #4
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <Get_SerialNum+0x54>)
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f000 f80f 	bl	8006204 <IntToUnicode>
  }
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	1fff7a10 	.word	0x1fff7a10
 80061f4:	1fff7a14 	.word	0x1fff7a14
 80061f8:	1fff7a18 	.word	0x1fff7a18
 80061fc:	20000166 	.word	0x20000166
 8006200:	20000176 	.word	0x20000176

08006204 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e027      	b.n	800626c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	0f1b      	lsrs	r3, r3, #28
 8006220:	2b09      	cmp	r3, #9
 8006222:	d80b      	bhi.n	800623c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	0f1b      	lsrs	r3, r3, #28
 8006228:	b2da      	uxtb	r2, r3
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4619      	mov	r1, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	440b      	add	r3, r1
 8006234:	3230      	adds	r2, #48	; 0x30
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e00a      	b.n	8006252 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	0f1b      	lsrs	r3, r3, #28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4619      	mov	r1, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	440b      	add	r3, r1
 800624c:	3237      	adds	r2, #55	; 0x37
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	3301      	adds	r3, #1
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	3301      	adds	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
 800626c:	7dfa      	ldrb	r2, [r7, #23]
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d3d3      	bcc.n	800621c <IntToUnicode+0x18>
  }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062a4:	d13a      	bne.n	800631c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6313      	str	r3, [r2, #48]	; 0x30
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c8:	2302      	movs	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d0:	2303      	movs	r3, #3
 80062d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062d4:	230a      	movs	r3, #10
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4619      	mov	r1, r3
 80062de:	4812      	ldr	r0, [pc, #72]	; (8006328 <HAL_PCD_MspInit+0xa4>)
 80062e0:	f7fa fd14 	bl	8000d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	6353      	str	r3, [r2, #52]	; 0x34
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fe:	6453      	str	r3, [r2, #68]	; 0x44
 8006300:	4b08      	ldr	r3, [pc, #32]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	2043      	movs	r0, #67	; 0x43
 8006312:	f7fa fcc4 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006316:	2043      	movs	r0, #67	; 0x43
 8006318:	f7fa fcdd 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800631c:	bf00      	nop
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	40020000 	.word	0x40020000

0800632c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe fcd0 	bl	8004ce8 <USBD_LL_SetupStage>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	4619      	mov	r1, r3
 800637a:	f7fe fd0a 	bl	8004d92 <USBD_LL_DataOutStage>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	3348      	adds	r3, #72	; 0x48
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fe fd53 	bl	8004e58 <USBD_LL_DataInStage>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe67 	bl	800509c <USBD_LL_SOF>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d001      	beq.n	80063ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80063ea:	f7fa f9cb 	bl	8000784 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fe11 	bl	8005020 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fdbd 	bl	8004f84 <USBD_LL_Reset>
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe0c 	bl	8005040 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4a03      	ldr	r2, [pc, #12]	; (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644e:	f043 0306 	orr.w	r3, r3, #6
 8006452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fdfc 	bl	800506c <USBD_LL_Resume>
}
 8006474:	bf00      	nop
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fe4a 	bl	800512c <USBD_LL_IsoOUTIncomplete>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fe12 	bl	80050e0 <USBD_LL_IsoINIncomplete>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fe50 	bl	8005178 <USBD_LL_DevConnected>
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fe4d 	bl	800518e <USBD_LL_DevDisconnected>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d13c      	bne.n	8006586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <USBD_LL_Init+0x94>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <USBD_LL_Init+0x94>)
 8006518:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800651c:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <USBD_LL_Init+0x94>)
 800651e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <USBD_LL_Init+0x94>)
 8006526:	2204      	movs	r2, #4
 8006528:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <USBD_LL_Init+0x94>)
 800652c:	2202      	movs	r2, #2
 800652e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006530:	4b17      	ldr	r3, [pc, #92]	; (8006590 <USBD_LL_Init+0x94>)
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006536:	4b16      	ldr	r3, [pc, #88]	; (8006590 <USBD_LL_Init+0x94>)
 8006538:	2202      	movs	r2, #2
 800653a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800653c:	4b14      	ldr	r3, [pc, #80]	; (8006590 <USBD_LL_Init+0x94>)
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <USBD_LL_Init+0x94>)
 8006544:	2200      	movs	r2, #0
 8006546:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <USBD_LL_Init+0x94>)
 800654a:	2200      	movs	r2, #0
 800654c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <USBD_LL_Init+0x94>)
 8006550:	2200      	movs	r2, #0
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <USBD_LL_Init+0x94>)
 8006556:	2200      	movs	r2, #0
 8006558:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800655a:	480d      	ldr	r0, [pc, #52]	; (8006590 <USBD_LL_Init+0x94>)
 800655c:	f7fa fe9e 	bl	800129c <HAL_PCD_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006566:	f7fa f90d 	bl	8000784 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800656a:	2180      	movs	r1, #128	; 0x80
 800656c:	4808      	ldr	r0, [pc, #32]	; (8006590 <USBD_LL_Init+0x94>)
 800656e:	f7fb fffc 	bl	800256a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006572:	2240      	movs	r2, #64	; 0x40
 8006574:	2100      	movs	r1, #0
 8006576:	4806      	ldr	r0, [pc, #24]	; (8006590 <USBD_LL_Init+0x94>)
 8006578:	f7fb ffb0 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800657c:	2280      	movs	r2, #128	; 0x80
 800657e:	2101      	movs	r1, #1
 8006580:	4803      	ldr	r0, [pc, #12]	; (8006590 <USBD_LL_Init+0x94>)
 8006582:	f7fb ffab 	bl	80024dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20001958 	.word	0x20001958

08006594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fa ff93 	bl	80014d6 <HAL_PCD_Start>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f942 	bl	8006840 <USBD_Get_USB_Status>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	4603      	mov	r3, r0
 80065da:	70fb      	strb	r3, [r7, #3]
 80065dc:	460b      	mov	r3, r1
 80065de:	70bb      	strb	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065f2:	78bb      	ldrb	r3, [r7, #2]
 80065f4:	883a      	ldrh	r2, [r7, #0]
 80065f6:	78f9      	ldrb	r1, [r7, #3]
 80065f8:	f7fb fb77 	bl	8001cea <HAL_PCD_EP_Open>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f91c 	bl	8006840 <USBD_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7fb fbc0 	bl	8001dba <HAL_PCD_EP_Close>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f8fd 	bl	8006840 <USBD_Get_USB_Status>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800664a:	7bbb      	ldrb	r3, [r7, #14]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f7fb fc98 	bl	8001fa8 <HAL_PCD_EP_SetStall>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f8de 	bl	8006840 <USBD_Get_USB_Status>
 8006684:	4603      	mov	r3, r0
 8006686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006688:	7bbb      	ldrb	r3, [r7, #14]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fb fcdd 	bl	8002070 <HAL_PCD_EP_ClrStall>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f8bf 	bl	8006840 <USBD_Get_USB_Status>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da0b      	bge.n	8006704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	333e      	adds	r3, #62	; 0x3e
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	e00b      	b.n	800671c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800671a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb faaa 	bl	8001ca0 <HAL_PCD_SetAddress>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f874 	bl	8006840 <USBD_Get_USB_Status>
 8006758:	4603      	mov	r3, r0
 800675a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800675c:	7bbb      	ldrb	r3, [r7, #14]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	460b      	mov	r3, r1
 8006774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006784:	7af9      	ldrb	r1, [r7, #11]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	f7fb fbc3 	bl	8001f14 <HAL_PCD_EP_Transmit>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f853 	bl	8006840 <USBD_Get_USB_Status>
 800679a:	4603      	mov	r3, r0
 800679c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800679e:	7dbb      	ldrb	r3, [r7, #22]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	460b      	mov	r3, r1
 80067b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80067c6:	7af9      	ldrb	r1, [r7, #11]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f7fb fb3f 	bl	8001e4e <HAL_PCD_EP_Receive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f832 	bl	8006840 <USBD_Get_USB_Status>
 80067dc:	4603      	mov	r3, r0
 80067de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7fb fb6f 	bl	8001ee4 <HAL_PCD_EP_GetRxCount>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <USBD_static_malloc+0x18>)
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000208 	.word	0x20000208

0800682c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	2b03      	cmp	r3, #3
 8006852:	d817      	bhi.n	8006884 <USBD_Get_USB_Status+0x44>
 8006854:	a201      	add	r2, pc, #4	; (adr r2, 800685c <USBD_Get_USB_Status+0x1c>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	0800686d 	.word	0x0800686d
 8006860:	08006873 	.word	0x08006873
 8006864:	08006879 	.word	0x08006879
 8006868:	0800687f 	.word	0x0800687f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
    break;
 8006870:	e00b      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006872:	2303      	movs	r3, #3
 8006874:	73fb      	strb	r3, [r7, #15]
    break;
 8006876:	e008      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
    break;
 800687c:	e005      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
    break;
 8006882:	e002      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	73fb      	strb	r3, [r7, #15]
    break;
 8006888:	bf00      	nop
  }
  return usb_status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <__errno>:
 8006898:	4b01      	ldr	r3, [pc, #4]	; (80068a0 <__errno+0x8>)
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000180 	.word	0x20000180

080068a4 <__libc_init_array>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	4d0d      	ldr	r5, [pc, #52]	; (80068dc <__libc_init_array+0x38>)
 80068a8:	4c0d      	ldr	r4, [pc, #52]	; (80068e0 <__libc_init_array+0x3c>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	2600      	movs	r6, #0
 80068b0:	42a6      	cmp	r6, r4
 80068b2:	d109      	bne.n	80068c8 <__libc_init_array+0x24>
 80068b4:	4d0b      	ldr	r5, [pc, #44]	; (80068e4 <__libc_init_array+0x40>)
 80068b6:	4c0c      	ldr	r4, [pc, #48]	; (80068e8 <__libc_init_array+0x44>)
 80068b8:	f000 fc62 	bl	8007180 <_init>
 80068bc:	1b64      	subs	r4, r4, r5
 80068be:	10a4      	asrs	r4, r4, #2
 80068c0:	2600      	movs	r6, #0
 80068c2:	42a6      	cmp	r6, r4
 80068c4:	d105      	bne.n	80068d2 <__libc_init_array+0x2e>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}
 80068c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068cc:	4798      	blx	r3
 80068ce:	3601      	adds	r6, #1
 80068d0:	e7ee      	b.n	80068b0 <__libc_init_array+0xc>
 80068d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d6:	4798      	blx	r3
 80068d8:	3601      	adds	r6, #1
 80068da:	e7f2      	b.n	80068c2 <__libc_init_array+0x1e>
 80068dc:	08007240 	.word	0x08007240
 80068e0:	08007240 	.word	0x08007240
 80068e4:	08007240 	.word	0x08007240
 80068e8:	08007244 	.word	0x08007244

080068ec <memset>:
 80068ec:	4402      	add	r2, r0
 80068ee:	4603      	mov	r3, r0
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d100      	bne.n	80068f6 <memset+0xa>
 80068f4:	4770      	bx	lr
 80068f6:	f803 1b01 	strb.w	r1, [r3], #1
 80068fa:	e7f9      	b.n	80068f0 <memset+0x4>

080068fc <sniprintf>:
 80068fc:	b40c      	push	{r2, r3}
 80068fe:	b530      	push	{r4, r5, lr}
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <sniprintf+0x64>)
 8006902:	1e0c      	subs	r4, r1, #0
 8006904:	681d      	ldr	r5, [r3, #0]
 8006906:	b09d      	sub	sp, #116	; 0x74
 8006908:	da08      	bge.n	800691c <sniprintf+0x20>
 800690a:	238b      	movs	r3, #139	; 0x8b
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	f04f 30ff 	mov.w	r0, #4294967295
 8006912:	b01d      	add	sp, #116	; 0x74
 8006914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006918:	b002      	add	sp, #8
 800691a:	4770      	bx	lr
 800691c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006920:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006924:	bf14      	ite	ne
 8006926:	f104 33ff 	addne.w	r3, r4, #4294967295
 800692a:	4623      	moveq	r3, r4
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	9307      	str	r3, [sp, #28]
 8006930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006934:	9002      	str	r0, [sp, #8]
 8006936:	9006      	str	r0, [sp, #24]
 8006938:	f8ad 3016 	strh.w	r3, [sp, #22]
 800693c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800693e:	ab21      	add	r3, sp, #132	; 0x84
 8006940:	a902      	add	r1, sp, #8
 8006942:	4628      	mov	r0, r5
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	f000 f869 	bl	8006a1c <_svfiprintf_r>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	bfbc      	itt	lt
 800694e:	238b      	movlt	r3, #139	; 0x8b
 8006950:	602b      	strlt	r3, [r5, #0]
 8006952:	2c00      	cmp	r4, #0
 8006954:	d0dd      	beq.n	8006912 <sniprintf+0x16>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e7d9      	b.n	8006912 <sniprintf+0x16>
 800695e:	bf00      	nop
 8006960:	20000180 	.word	0x20000180

08006964 <__ssputs_r>:
 8006964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	688e      	ldr	r6, [r1, #8]
 800696a:	429e      	cmp	r6, r3
 800696c:	4682      	mov	sl, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4690      	mov	r8, r2
 8006972:	461f      	mov	r7, r3
 8006974:	d838      	bhi.n	80069e8 <__ssputs_r+0x84>
 8006976:	898a      	ldrh	r2, [r1, #12]
 8006978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800697c:	d032      	beq.n	80069e4 <__ssputs_r+0x80>
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	6909      	ldr	r1, [r1, #16]
 8006982:	eba5 0901 	sub.w	r9, r5, r1
 8006986:	6965      	ldr	r5, [r4, #20]
 8006988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800698c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006990:	3301      	adds	r3, #1
 8006992:	444b      	add	r3, r9
 8006994:	106d      	asrs	r5, r5, #1
 8006996:	429d      	cmp	r5, r3
 8006998:	bf38      	it	cc
 800699a:	461d      	movcc	r5, r3
 800699c:	0553      	lsls	r3, r2, #21
 800699e:	d531      	bpl.n	8006a04 <__ssputs_r+0xa0>
 80069a0:	4629      	mov	r1, r5
 80069a2:	f000 fb47 	bl	8007034 <_malloc_r>
 80069a6:	4606      	mov	r6, r0
 80069a8:	b950      	cbnz	r0, 80069c0 <__ssputs_r+0x5c>
 80069aa:	230c      	movs	r3, #12
 80069ac:	f8ca 3000 	str.w	r3, [sl]
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c0:	6921      	ldr	r1, [r4, #16]
 80069c2:	464a      	mov	r2, r9
 80069c4:	f000 fabe 	bl	8006f44 <memcpy>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	6126      	str	r6, [r4, #16]
 80069d6:	6165      	str	r5, [r4, #20]
 80069d8:	444e      	add	r6, r9
 80069da:	eba5 0509 	sub.w	r5, r5, r9
 80069de:	6026      	str	r6, [r4, #0]
 80069e0:	60a5      	str	r5, [r4, #8]
 80069e2:	463e      	mov	r6, r7
 80069e4:	42be      	cmp	r6, r7
 80069e6:	d900      	bls.n	80069ea <__ssputs_r+0x86>
 80069e8:	463e      	mov	r6, r7
 80069ea:	4632      	mov	r2, r6
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	4641      	mov	r1, r8
 80069f0:	f000 fab6 	bl	8006f60 <memmove>
 80069f4:	68a3      	ldr	r3, [r4, #8]
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	1b9b      	subs	r3, r3, r6
 80069fa:	4432      	add	r2, r6
 80069fc:	60a3      	str	r3, [r4, #8]
 80069fe:	6022      	str	r2, [r4, #0]
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7db      	b.n	80069bc <__ssputs_r+0x58>
 8006a04:	462a      	mov	r2, r5
 8006a06:	f000 fb6f 	bl	80070e8 <_realloc_r>
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1e1      	bne.n	80069d4 <__ssputs_r+0x70>
 8006a10:	6921      	ldr	r1, [r4, #16]
 8006a12:	4650      	mov	r0, sl
 8006a14:	f000 fabe 	bl	8006f94 <_free_r>
 8006a18:	e7c7      	b.n	80069aa <__ssputs_r+0x46>
	...

08006a1c <_svfiprintf_r>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	4698      	mov	r8, r3
 8006a22:	898b      	ldrh	r3, [r1, #12]
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	b09d      	sub	sp, #116	; 0x74
 8006a28:	4607      	mov	r7, r0
 8006a2a:	460d      	mov	r5, r1
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	d50e      	bpl.n	8006a4e <_svfiprintf_r+0x32>
 8006a30:	690b      	ldr	r3, [r1, #16]
 8006a32:	b963      	cbnz	r3, 8006a4e <_svfiprintf_r+0x32>
 8006a34:	2140      	movs	r1, #64	; 0x40
 8006a36:	f000 fafd 	bl	8007034 <_malloc_r>
 8006a3a:	6028      	str	r0, [r5, #0]
 8006a3c:	6128      	str	r0, [r5, #16]
 8006a3e:	b920      	cbnz	r0, 8006a4a <_svfiprintf_r+0x2e>
 8006a40:	230c      	movs	r3, #12
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e0d1      	b.n	8006bee <_svfiprintf_r+0x1d2>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	616b      	str	r3, [r5, #20]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9309      	str	r3, [sp, #36]	; 0x24
 8006a52:	2320      	movs	r3, #32
 8006a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a5c:	2330      	movs	r3, #48	; 0x30
 8006a5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c08 <_svfiprintf_r+0x1ec>
 8006a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	4623      	mov	r3, r4
 8006a6c:	469a      	mov	sl, r3
 8006a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a72:	b10a      	cbz	r2, 8006a78 <_svfiprintf_r+0x5c>
 8006a74:	2a25      	cmp	r2, #37	; 0x25
 8006a76:	d1f9      	bne.n	8006a6c <_svfiprintf_r+0x50>
 8006a78:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7c:	d00b      	beq.n	8006a96 <_svfiprintf_r+0x7a>
 8006a7e:	465b      	mov	r3, fp
 8006a80:	4622      	mov	r2, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	4638      	mov	r0, r7
 8006a86:	f7ff ff6d 	bl	8006964 <__ssputs_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f000 80aa 	beq.w	8006be4 <_svfiprintf_r+0x1c8>
 8006a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a92:	445a      	add	r2, fp
 8006a94:	9209      	str	r2, [sp, #36]	; 0x24
 8006a96:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80a2 	beq.w	8006be4 <_svfiprintf_r+0x1c8>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aaa:	f10a 0a01 	add.w	sl, sl, #1
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab8:	4654      	mov	r4, sl
 8006aba:	2205      	movs	r2, #5
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	4851      	ldr	r0, [pc, #324]	; (8006c08 <_svfiprintf_r+0x1ec>)
 8006ac2:	f7f9 fb8d 	bl	80001e0 <memchr>
 8006ac6:	9a04      	ldr	r2, [sp, #16]
 8006ac8:	b9d8      	cbnz	r0, 8006b02 <_svfiprintf_r+0xe6>
 8006aca:	06d0      	lsls	r0, r2, #27
 8006acc:	bf44      	itt	mi
 8006ace:	2320      	movmi	r3, #32
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad4:	0711      	lsls	r1, r2, #28
 8006ad6:	bf44      	itt	mi
 8006ad8:	232b      	movmi	r3, #43	; 0x2b
 8006ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ade:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae4:	d015      	beq.n	8006b12 <_svfiprintf_r+0xf6>
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	4654      	mov	r4, sl
 8006aea:	2000      	movs	r0, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4621      	mov	r1, r4
 8006af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af6:	3b30      	subs	r3, #48	; 0x30
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d94e      	bls.n	8006b9a <_svfiprintf_r+0x17e>
 8006afc:	b1b0      	cbz	r0, 8006b2c <_svfiprintf_r+0x110>
 8006afe:	9207      	str	r2, [sp, #28]
 8006b00:	e014      	b.n	8006b2c <_svfiprintf_r+0x110>
 8006b02:	eba0 0308 	sub.w	r3, r0, r8
 8006b06:	fa09 f303 	lsl.w	r3, r9, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	46a2      	mov	sl, r4
 8006b10:	e7d2      	b.n	8006ab8 <_svfiprintf_r+0x9c>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	1d19      	adds	r1, r3, #4
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	9103      	str	r1, [sp, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bfbb      	ittet	lt
 8006b1e:	425b      	neglt	r3, r3
 8006b20:	f042 0202 	orrlt.w	r2, r2, #2
 8006b24:	9307      	strge	r3, [sp, #28]
 8006b26:	9307      	strlt	r3, [sp, #28]
 8006b28:	bfb8      	it	lt
 8006b2a:	9204      	strlt	r2, [sp, #16]
 8006b2c:	7823      	ldrb	r3, [r4, #0]
 8006b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b30:	d10c      	bne.n	8006b4c <_svfiprintf_r+0x130>
 8006b32:	7863      	ldrb	r3, [r4, #1]
 8006b34:	2b2a      	cmp	r3, #42	; 0x2a
 8006b36:	d135      	bne.n	8006ba4 <_svfiprintf_r+0x188>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9203      	str	r2, [sp, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bfb8      	it	lt
 8006b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b48:	3402      	adds	r4, #2
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c18 <_svfiprintf_r+0x1fc>
 8006b50:	7821      	ldrb	r1, [r4, #0]
 8006b52:	2203      	movs	r2, #3
 8006b54:	4650      	mov	r0, sl
 8006b56:	f7f9 fb43 	bl	80001e0 <memchr>
 8006b5a:	b140      	cbz	r0, 8006b6e <_svfiprintf_r+0x152>
 8006b5c:	2340      	movs	r3, #64	; 0x40
 8006b5e:	eba0 000a 	sub.w	r0, r0, sl
 8006b62:	fa03 f000 	lsl.w	r0, r3, r0
 8006b66:	9b04      	ldr	r3, [sp, #16]
 8006b68:	4303      	orrs	r3, r0
 8006b6a:	3401      	adds	r4, #1
 8006b6c:	9304      	str	r3, [sp, #16]
 8006b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b72:	4826      	ldr	r0, [pc, #152]	; (8006c0c <_svfiprintf_r+0x1f0>)
 8006b74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b78:	2206      	movs	r2, #6
 8006b7a:	f7f9 fb31 	bl	80001e0 <memchr>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d038      	beq.n	8006bf4 <_svfiprintf_r+0x1d8>
 8006b82:	4b23      	ldr	r3, [pc, #140]	; (8006c10 <_svfiprintf_r+0x1f4>)
 8006b84:	bb1b      	cbnz	r3, 8006bce <_svfiprintf_r+0x1b2>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	3307      	adds	r3, #7
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	3308      	adds	r3, #8
 8006b90:	9303      	str	r3, [sp, #12]
 8006b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b94:	4433      	add	r3, r6
 8006b96:	9309      	str	r3, [sp, #36]	; 0x24
 8006b98:	e767      	b.n	8006a6a <_svfiprintf_r+0x4e>
 8006b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	e7a5      	b.n	8006af0 <_svfiprintf_r+0xd4>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	3401      	adds	r4, #1
 8006ba8:	9305      	str	r3, [sp, #20]
 8006baa:	4619      	mov	r1, r3
 8006bac:	f04f 0c0a 	mov.w	ip, #10
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb6:	3a30      	subs	r2, #48	; 0x30
 8006bb8:	2a09      	cmp	r2, #9
 8006bba:	d903      	bls.n	8006bc4 <_svfiprintf_r+0x1a8>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0c5      	beq.n	8006b4c <_svfiprintf_r+0x130>
 8006bc0:	9105      	str	r1, [sp, #20]
 8006bc2:	e7c3      	b.n	8006b4c <_svfiprintf_r+0x130>
 8006bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc8:	4604      	mov	r4, r0
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e7f0      	b.n	8006bb0 <_svfiprintf_r+0x194>
 8006bce:	ab03      	add	r3, sp, #12
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	462a      	mov	r2, r5
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <_svfiprintf_r+0x1f8>)
 8006bd6:	a904      	add	r1, sp, #16
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f3af 8000 	nop.w
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	4606      	mov	r6, r0
 8006be2:	d1d6      	bne.n	8006b92 <_svfiprintf_r+0x176>
 8006be4:	89ab      	ldrh	r3, [r5, #12]
 8006be6:	065b      	lsls	r3, r3, #25
 8006be8:	f53f af2c 	bmi.w	8006a44 <_svfiprintf_r+0x28>
 8006bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bee:	b01d      	add	sp, #116	; 0x74
 8006bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf4:	ab03      	add	r3, sp, #12
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <_svfiprintf_r+0x1f8>)
 8006bfc:	a904      	add	r1, sp, #16
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f000 f87a 	bl	8006cf8 <_printf_i>
 8006c04:	e7eb      	b.n	8006bde <_svfiprintf_r+0x1c2>
 8006c06:	bf00      	nop
 8006c08:	08007204 	.word	0x08007204
 8006c0c:	0800720e 	.word	0x0800720e
 8006c10:	00000000 	.word	0x00000000
 8006c14:	08006965 	.word	0x08006965
 8006c18:	0800720a 	.word	0x0800720a

08006c1c <_printf_common>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	4616      	mov	r6, r2
 8006c22:	4699      	mov	r9, r3
 8006c24:	688a      	ldr	r2, [r1, #8]
 8006c26:	690b      	ldr	r3, [r1, #16]
 8006c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bfb8      	it	lt
 8006c30:	4613      	movlt	r3, r2
 8006c32:	6033      	str	r3, [r6, #0]
 8006c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c38:	4607      	mov	r7, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	b10a      	cbz	r2, 8006c42 <_printf_common+0x26>
 8006c3e:	3301      	adds	r3, #1
 8006c40:	6033      	str	r3, [r6, #0]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	0699      	lsls	r1, r3, #26
 8006c46:	bf42      	ittt	mi
 8006c48:	6833      	ldrmi	r3, [r6, #0]
 8006c4a:	3302      	addmi	r3, #2
 8006c4c:	6033      	strmi	r3, [r6, #0]
 8006c4e:	6825      	ldr	r5, [r4, #0]
 8006c50:	f015 0506 	ands.w	r5, r5, #6
 8006c54:	d106      	bne.n	8006c64 <_printf_common+0x48>
 8006c56:	f104 0a19 	add.w	sl, r4, #25
 8006c5a:	68e3      	ldr	r3, [r4, #12]
 8006c5c:	6832      	ldr	r2, [r6, #0]
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	42ab      	cmp	r3, r5
 8006c62:	dc26      	bgt.n	8006cb2 <_printf_common+0x96>
 8006c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c68:	1e13      	subs	r3, r2, #0
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	bf18      	it	ne
 8006c6e:	2301      	movne	r3, #1
 8006c70:	0692      	lsls	r2, r2, #26
 8006c72:	d42b      	bmi.n	8006ccc <_printf_common+0xb0>
 8006c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c78:	4649      	mov	r1, r9
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	47c0      	blx	r8
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d01e      	beq.n	8006cc0 <_printf_common+0xa4>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	68e5      	ldr	r5, [r4, #12]
 8006c86:	6832      	ldr	r2, [r6, #0]
 8006c88:	f003 0306 	and.w	r3, r3, #6
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	bf08      	it	eq
 8006c90:	1aad      	subeq	r5, r5, r2
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	6922      	ldr	r2, [r4, #16]
 8006c96:	bf0c      	ite	eq
 8006c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c9c:	2500      	movne	r5, #0
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	bfc4      	itt	gt
 8006ca2:	1a9b      	subgt	r3, r3, r2
 8006ca4:	18ed      	addgt	r5, r5, r3
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	341a      	adds	r4, #26
 8006caa:	42b5      	cmp	r5, r6
 8006cac:	d11a      	bne.n	8006ce4 <_printf_common+0xc8>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e008      	b.n	8006cc4 <_printf_common+0xa8>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4652      	mov	r2, sl
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	4638      	mov	r0, r7
 8006cba:	47c0      	blx	r8
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d103      	bne.n	8006cc8 <_printf_common+0xac>
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	3501      	adds	r5, #1
 8006cca:	e7c6      	b.n	8006c5a <_printf_common+0x3e>
 8006ccc:	18e1      	adds	r1, r4, r3
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	2030      	movs	r0, #48	; 0x30
 8006cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cd6:	4422      	add	r2, r4
 8006cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	e7c7      	b.n	8006c74 <_printf_common+0x58>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4638      	mov	r0, r7
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d0e6      	beq.n	8006cc0 <_printf_common+0xa4>
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	e7d9      	b.n	8006caa <_printf_common+0x8e>
	...

08006cf8 <_printf_i>:
 8006cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	4691      	mov	r9, r2
 8006d00:	7e27      	ldrb	r7, [r4, #24]
 8006d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d04:	2f78      	cmp	r7, #120	; 0x78
 8006d06:	4680      	mov	r8, r0
 8006d08:	469a      	mov	sl, r3
 8006d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d0e:	d807      	bhi.n	8006d20 <_printf_i+0x28>
 8006d10:	2f62      	cmp	r7, #98	; 0x62
 8006d12:	d80a      	bhi.n	8006d2a <_printf_i+0x32>
 8006d14:	2f00      	cmp	r7, #0
 8006d16:	f000 80d8 	beq.w	8006eca <_printf_i+0x1d2>
 8006d1a:	2f58      	cmp	r7, #88	; 0x58
 8006d1c:	f000 80a3 	beq.w	8006e66 <_printf_i+0x16e>
 8006d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d28:	e03a      	b.n	8006da0 <_printf_i+0xa8>
 8006d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d2e:	2b15      	cmp	r3, #21
 8006d30:	d8f6      	bhi.n	8006d20 <_printf_i+0x28>
 8006d32:	a001      	add	r0, pc, #4	; (adr r0, 8006d38 <_printf_i+0x40>)
 8006d34:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d38:	08006d91 	.word	0x08006d91
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006d21 	.word	0x08006d21
 8006d44:	08006d21 	.word	0x08006d21
 8006d48:	08006d21 	.word	0x08006d21
 8006d4c:	08006d21 	.word	0x08006d21
 8006d50:	08006da5 	.word	0x08006da5
 8006d54:	08006d21 	.word	0x08006d21
 8006d58:	08006d21 	.word	0x08006d21
 8006d5c:	08006d21 	.word	0x08006d21
 8006d60:	08006d21 	.word	0x08006d21
 8006d64:	08006eb1 	.word	0x08006eb1
 8006d68:	08006dd5 	.word	0x08006dd5
 8006d6c:	08006e93 	.word	0x08006e93
 8006d70:	08006d21 	.word	0x08006d21
 8006d74:	08006d21 	.word	0x08006d21
 8006d78:	08006ed3 	.word	0x08006ed3
 8006d7c:	08006d21 	.word	0x08006d21
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006d21 	.word	0x08006d21
 8006d88:	08006d21 	.word	0x08006d21
 8006d8c:	08006e9b 	.word	0x08006e9b
 8006d90:	680b      	ldr	r3, [r1, #0]
 8006d92:	1d1a      	adds	r2, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	600a      	str	r2, [r1, #0]
 8006d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006da0:	2301      	movs	r3, #1
 8006da2:	e0a3      	b.n	8006eec <_printf_i+0x1f4>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	6808      	ldr	r0, [r1, #0]
 8006da8:	062e      	lsls	r6, r5, #24
 8006daa:	f100 0304 	add.w	r3, r0, #4
 8006dae:	d50a      	bpl.n	8006dc6 <_printf_i+0xce>
 8006db0:	6805      	ldr	r5, [r0, #0]
 8006db2:	600b      	str	r3, [r1, #0]
 8006db4:	2d00      	cmp	r5, #0
 8006db6:	da03      	bge.n	8006dc0 <_printf_i+0xc8>
 8006db8:	232d      	movs	r3, #45	; 0x2d
 8006dba:	426d      	negs	r5, r5
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	485e      	ldr	r0, [pc, #376]	; (8006f3c <_printf_i+0x244>)
 8006dc2:	230a      	movs	r3, #10
 8006dc4:	e019      	b.n	8006dfa <_printf_i+0x102>
 8006dc6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dca:	6805      	ldr	r5, [r0, #0]
 8006dcc:	600b      	str	r3, [r1, #0]
 8006dce:	bf18      	it	ne
 8006dd0:	b22d      	sxthne	r5, r5
 8006dd2:	e7ef      	b.n	8006db4 <_printf_i+0xbc>
 8006dd4:	680b      	ldr	r3, [r1, #0]
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	1d18      	adds	r0, r3, #4
 8006dda:	6008      	str	r0, [r1, #0]
 8006ddc:	0628      	lsls	r0, r5, #24
 8006dde:	d501      	bpl.n	8006de4 <_printf_i+0xec>
 8006de0:	681d      	ldr	r5, [r3, #0]
 8006de2:	e002      	b.n	8006dea <_printf_i+0xf2>
 8006de4:	0669      	lsls	r1, r5, #25
 8006de6:	d5fb      	bpl.n	8006de0 <_printf_i+0xe8>
 8006de8:	881d      	ldrh	r5, [r3, #0]
 8006dea:	4854      	ldr	r0, [pc, #336]	; (8006f3c <_printf_i+0x244>)
 8006dec:	2f6f      	cmp	r7, #111	; 0x6f
 8006dee:	bf0c      	ite	eq
 8006df0:	2308      	moveq	r3, #8
 8006df2:	230a      	movne	r3, #10
 8006df4:	2100      	movs	r1, #0
 8006df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dfa:	6866      	ldr	r6, [r4, #4]
 8006dfc:	60a6      	str	r6, [r4, #8]
 8006dfe:	2e00      	cmp	r6, #0
 8006e00:	bfa2      	ittt	ge
 8006e02:	6821      	ldrge	r1, [r4, #0]
 8006e04:	f021 0104 	bicge.w	r1, r1, #4
 8006e08:	6021      	strge	r1, [r4, #0]
 8006e0a:	b90d      	cbnz	r5, 8006e10 <_printf_i+0x118>
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	d04d      	beq.n	8006eac <_printf_i+0x1b4>
 8006e10:	4616      	mov	r6, r2
 8006e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e16:	fb03 5711 	mls	r7, r3, r1, r5
 8006e1a:	5dc7      	ldrb	r7, [r0, r7]
 8006e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e20:	462f      	mov	r7, r5
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	460d      	mov	r5, r1
 8006e26:	d9f4      	bls.n	8006e12 <_printf_i+0x11a>
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d10b      	bne.n	8006e44 <_printf_i+0x14c>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07df      	lsls	r7, r3, #31
 8006e30:	d508      	bpl.n	8006e44 <_printf_i+0x14c>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	6861      	ldr	r1, [r4, #4]
 8006e36:	4299      	cmp	r1, r3
 8006e38:	bfde      	ittt	le
 8006e3a:	2330      	movle	r3, #48	; 0x30
 8006e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e44:	1b92      	subs	r2, r2, r6
 8006e46:	6122      	str	r2, [r4, #16]
 8006e48:	f8cd a000 	str.w	sl, [sp]
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	aa03      	add	r2, sp, #12
 8006e50:	4621      	mov	r1, r4
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7ff fee2 	bl	8006c1c <_printf_common>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d14c      	bne.n	8006ef6 <_printf_i+0x1fe>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	b004      	add	sp, #16
 8006e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e66:	4835      	ldr	r0, [pc, #212]	; (8006f3c <_printf_i+0x244>)
 8006e68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	680e      	ldr	r6, [r1, #0]
 8006e70:	061f      	lsls	r7, r3, #24
 8006e72:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e76:	600e      	str	r6, [r1, #0]
 8006e78:	d514      	bpl.n	8006ea4 <_printf_i+0x1ac>
 8006e7a:	07d9      	lsls	r1, r3, #31
 8006e7c:	bf44      	itt	mi
 8006e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e82:	6023      	strmi	r3, [r4, #0]
 8006e84:	b91d      	cbnz	r5, 8006e8e <_printf_i+0x196>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f023 0320 	bic.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	2310      	movs	r3, #16
 8006e90:	e7b0      	b.n	8006df4 <_printf_i+0xfc>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f043 0320 	orr.w	r3, r3, #32
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	2378      	movs	r3, #120	; 0x78
 8006e9c:	4828      	ldr	r0, [pc, #160]	; (8006f40 <_printf_i+0x248>)
 8006e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ea2:	e7e3      	b.n	8006e6c <_printf_i+0x174>
 8006ea4:	065e      	lsls	r6, r3, #25
 8006ea6:	bf48      	it	mi
 8006ea8:	b2ad      	uxthmi	r5, r5
 8006eaa:	e7e6      	b.n	8006e7a <_printf_i+0x182>
 8006eac:	4616      	mov	r6, r2
 8006eae:	e7bb      	b.n	8006e28 <_printf_i+0x130>
 8006eb0:	680b      	ldr	r3, [r1, #0]
 8006eb2:	6826      	ldr	r6, [r4, #0]
 8006eb4:	6960      	ldr	r0, [r4, #20]
 8006eb6:	1d1d      	adds	r5, r3, #4
 8006eb8:	600d      	str	r5, [r1, #0]
 8006eba:	0635      	lsls	r5, r6, #24
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0x1cc>
 8006ec0:	6018      	str	r0, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <_printf_i+0x1d2>
 8006ec4:	0671      	lsls	r1, r6, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0x1c8>
 8006ec8:	8018      	strh	r0, [r3, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6123      	str	r3, [r4, #16]
 8006ece:	4616      	mov	r6, r2
 8006ed0:	e7ba      	b.n	8006e48 <_printf_i+0x150>
 8006ed2:	680b      	ldr	r3, [r1, #0]
 8006ed4:	1d1a      	adds	r2, r3, #4
 8006ed6:	600a      	str	r2, [r1, #0]
 8006ed8:	681e      	ldr	r6, [r3, #0]
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	2100      	movs	r1, #0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7f9 f97e 	bl	80001e0 <memchr>
 8006ee4:	b108      	cbz	r0, 8006eea <_printf_i+0x1f2>
 8006ee6:	1b80      	subs	r0, r0, r6
 8006ee8:	6060      	str	r0, [r4, #4]
 8006eea:	6863      	ldr	r3, [r4, #4]
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ef4:	e7a8      	b.n	8006e48 <_printf_i+0x150>
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	4632      	mov	r2, r6
 8006efa:	4649      	mov	r1, r9
 8006efc:	4640      	mov	r0, r8
 8006efe:	47d0      	blx	sl
 8006f00:	3001      	adds	r0, #1
 8006f02:	d0ab      	beq.n	8006e5c <_printf_i+0x164>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	079b      	lsls	r3, r3, #30
 8006f08:	d413      	bmi.n	8006f32 <_printf_i+0x23a>
 8006f0a:	68e0      	ldr	r0, [r4, #12]
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	4298      	cmp	r0, r3
 8006f10:	bfb8      	it	lt
 8006f12:	4618      	movlt	r0, r3
 8006f14:	e7a4      	b.n	8006e60 <_printf_i+0x168>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	47d0      	blx	sl
 8006f20:	3001      	adds	r0, #1
 8006f22:	d09b      	beq.n	8006e5c <_printf_i+0x164>
 8006f24:	3501      	adds	r5, #1
 8006f26:	68e3      	ldr	r3, [r4, #12]
 8006f28:	9903      	ldr	r1, [sp, #12]
 8006f2a:	1a5b      	subs	r3, r3, r1
 8006f2c:	42ab      	cmp	r3, r5
 8006f2e:	dcf2      	bgt.n	8006f16 <_printf_i+0x21e>
 8006f30:	e7eb      	b.n	8006f0a <_printf_i+0x212>
 8006f32:	2500      	movs	r5, #0
 8006f34:	f104 0619 	add.w	r6, r4, #25
 8006f38:	e7f5      	b.n	8006f26 <_printf_i+0x22e>
 8006f3a:	bf00      	nop
 8006f3c:	08007215 	.word	0x08007215
 8006f40:	08007226 	.word	0x08007226

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <memmove>:
 8006f60:	4288      	cmp	r0, r1
 8006f62:	b510      	push	{r4, lr}
 8006f64:	eb01 0402 	add.w	r4, r1, r2
 8006f68:	d902      	bls.n	8006f70 <memmove+0x10>
 8006f6a:	4284      	cmp	r4, r0
 8006f6c:	4623      	mov	r3, r4
 8006f6e:	d807      	bhi.n	8006f80 <memmove+0x20>
 8006f70:	1e43      	subs	r3, r0, #1
 8006f72:	42a1      	cmp	r1, r4
 8006f74:	d008      	beq.n	8006f88 <memmove+0x28>
 8006f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f7e:	e7f8      	b.n	8006f72 <memmove+0x12>
 8006f80:	4402      	add	r2, r0
 8006f82:	4601      	mov	r1, r0
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d100      	bne.n	8006f8a <memmove+0x2a>
 8006f88:	bd10      	pop	{r4, pc}
 8006f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f92:	e7f7      	b.n	8006f84 <memmove+0x24>

08006f94 <_free_r>:
 8006f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d048      	beq.n	800702c <_free_r+0x98>
 8006f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9e:	9001      	str	r0, [sp, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fa6:	bfb8      	it	lt
 8006fa8:	18e4      	addlt	r4, r4, r3
 8006faa:	f000 f8d3 	bl	8007154 <__malloc_lock>
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <_free_r+0x9c>)
 8006fb0:	9801      	ldr	r0, [sp, #4]
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	b933      	cbnz	r3, 8006fc6 <_free_r+0x32>
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6014      	str	r4, [r2, #0]
 8006fbc:	b003      	add	sp, #12
 8006fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc2:	f000 b8cd 	b.w	8007160 <__malloc_unlock>
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	d90b      	bls.n	8006fe2 <_free_r+0x4e>
 8006fca:	6821      	ldr	r1, [r4, #0]
 8006fcc:	1862      	adds	r2, r4, r1
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bf04      	itt	eq
 8006fd2:	681a      	ldreq	r2, [r3, #0]
 8006fd4:	685b      	ldreq	r3, [r3, #4]
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	bf04      	itt	eq
 8006fda:	1852      	addeq	r2, r2, r1
 8006fdc:	6022      	streq	r2, [r4, #0]
 8006fde:	602c      	str	r4, [r5, #0]
 8006fe0:	e7ec      	b.n	8006fbc <_free_r+0x28>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x58>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x4e>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1855      	adds	r5, r2, r1
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x78>
 8006ff4:	6824      	ldr	r4, [r4, #0]
 8006ff6:	4421      	add	r1, r4
 8006ff8:	1854      	adds	r4, r2, r1
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1dd      	bne.n	8006fbc <_free_r+0x28>
 8007000:	681c      	ldr	r4, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4421      	add	r1, r4
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	e7d7      	b.n	8006fbc <_free_r+0x28>
 800700c:	d902      	bls.n	8007014 <_free_r+0x80>
 800700e:	230c      	movs	r3, #12
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	e7d3      	b.n	8006fbc <_free_r+0x28>
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1961      	adds	r1, r4, r5
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7c7      	b.n	8006fbc <_free_r+0x28>
 800702c:	b003      	add	sp, #12
 800702e:	bd30      	pop	{r4, r5, pc}
 8007030:	20000428 	.word	0x20000428

08007034 <_malloc_r>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	1ccd      	adds	r5, r1, #3
 8007038:	f025 0503 	bic.w	r5, r5, #3
 800703c:	3508      	adds	r5, #8
 800703e:	2d0c      	cmp	r5, #12
 8007040:	bf38      	it	cc
 8007042:	250c      	movcc	r5, #12
 8007044:	2d00      	cmp	r5, #0
 8007046:	4606      	mov	r6, r0
 8007048:	db01      	blt.n	800704e <_malloc_r+0x1a>
 800704a:	42a9      	cmp	r1, r5
 800704c:	d903      	bls.n	8007056 <_malloc_r+0x22>
 800704e:	230c      	movs	r3, #12
 8007050:	6033      	str	r3, [r6, #0]
 8007052:	2000      	movs	r0, #0
 8007054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007056:	f000 f87d 	bl	8007154 <__malloc_lock>
 800705a:	4921      	ldr	r1, [pc, #132]	; (80070e0 <_malloc_r+0xac>)
 800705c:	680a      	ldr	r2, [r1, #0]
 800705e:	4614      	mov	r4, r2
 8007060:	b99c      	cbnz	r4, 800708a <_malloc_r+0x56>
 8007062:	4f20      	ldr	r7, [pc, #128]	; (80070e4 <_malloc_r+0xb0>)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	b923      	cbnz	r3, 8007072 <_malloc_r+0x3e>
 8007068:	4621      	mov	r1, r4
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f862 	bl	8007134 <_sbrk_r>
 8007070:	6038      	str	r0, [r7, #0]
 8007072:	4629      	mov	r1, r5
 8007074:	4630      	mov	r0, r6
 8007076:	f000 f85d 	bl	8007134 <_sbrk_r>
 800707a:	1c43      	adds	r3, r0, #1
 800707c:	d123      	bne.n	80070c6 <_malloc_r+0x92>
 800707e:	230c      	movs	r3, #12
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	4630      	mov	r0, r6
 8007084:	f000 f86c 	bl	8007160 <__malloc_unlock>
 8007088:	e7e3      	b.n	8007052 <_malloc_r+0x1e>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	1b5b      	subs	r3, r3, r5
 800708e:	d417      	bmi.n	80070c0 <_malloc_r+0x8c>
 8007090:	2b0b      	cmp	r3, #11
 8007092:	d903      	bls.n	800709c <_malloc_r+0x68>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	441c      	add	r4, r3
 8007098:	6025      	str	r5, [r4, #0]
 800709a:	e004      	b.n	80070a6 <_malloc_r+0x72>
 800709c:	6863      	ldr	r3, [r4, #4]
 800709e:	42a2      	cmp	r2, r4
 80070a0:	bf0c      	ite	eq
 80070a2:	600b      	streq	r3, [r1, #0]
 80070a4:	6053      	strne	r3, [r2, #4]
 80070a6:	4630      	mov	r0, r6
 80070a8:	f000 f85a 	bl	8007160 <__malloc_unlock>
 80070ac:	f104 000b 	add.w	r0, r4, #11
 80070b0:	1d23      	adds	r3, r4, #4
 80070b2:	f020 0007 	bic.w	r0, r0, #7
 80070b6:	1ac2      	subs	r2, r0, r3
 80070b8:	d0cc      	beq.n	8007054 <_malloc_r+0x20>
 80070ba:	1a1b      	subs	r3, r3, r0
 80070bc:	50a3      	str	r3, [r4, r2]
 80070be:	e7c9      	b.n	8007054 <_malloc_r+0x20>
 80070c0:	4622      	mov	r2, r4
 80070c2:	6864      	ldr	r4, [r4, #4]
 80070c4:	e7cc      	b.n	8007060 <_malloc_r+0x2c>
 80070c6:	1cc4      	adds	r4, r0, #3
 80070c8:	f024 0403 	bic.w	r4, r4, #3
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d0e3      	beq.n	8007098 <_malloc_r+0x64>
 80070d0:	1a21      	subs	r1, r4, r0
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f82e 	bl	8007134 <_sbrk_r>
 80070d8:	3001      	adds	r0, #1
 80070da:	d1dd      	bne.n	8007098 <_malloc_r+0x64>
 80070dc:	e7cf      	b.n	800707e <_malloc_r+0x4a>
 80070de:	bf00      	nop
 80070e0:	20000428 	.word	0x20000428
 80070e4:	2000042c 	.word	0x2000042c

080070e8 <_realloc_r>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	4607      	mov	r7, r0
 80070ec:	4614      	mov	r4, r2
 80070ee:	460e      	mov	r6, r1
 80070f0:	b921      	cbnz	r1, 80070fc <_realloc_r+0x14>
 80070f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070f6:	4611      	mov	r1, r2
 80070f8:	f7ff bf9c 	b.w	8007034 <_malloc_r>
 80070fc:	b922      	cbnz	r2, 8007108 <_realloc_r+0x20>
 80070fe:	f7ff ff49 	bl	8006f94 <_free_r>
 8007102:	4625      	mov	r5, r4
 8007104:	4628      	mov	r0, r5
 8007106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007108:	f000 f830 	bl	800716c <_malloc_usable_size_r>
 800710c:	42a0      	cmp	r0, r4
 800710e:	d20f      	bcs.n	8007130 <_realloc_r+0x48>
 8007110:	4621      	mov	r1, r4
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff8e 	bl	8007034 <_malloc_r>
 8007118:	4605      	mov	r5, r0
 800711a:	2800      	cmp	r0, #0
 800711c:	d0f2      	beq.n	8007104 <_realloc_r+0x1c>
 800711e:	4631      	mov	r1, r6
 8007120:	4622      	mov	r2, r4
 8007122:	f7ff ff0f 	bl	8006f44 <memcpy>
 8007126:	4631      	mov	r1, r6
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ff33 	bl	8006f94 <_free_r>
 800712e:	e7e9      	b.n	8007104 <_realloc_r+0x1c>
 8007130:	4635      	mov	r5, r6
 8007132:	e7e7      	b.n	8007104 <_realloc_r+0x1c>

08007134 <_sbrk_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d06      	ldr	r5, [pc, #24]	; (8007150 <_sbrk_r+0x1c>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	602b      	str	r3, [r5, #0]
 8007140:	f7f9 fbca 	bl	80008d8 <_sbrk>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_sbrk_r+0x1a>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_sbrk_r+0x1a>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	20001d60 	.word	0x20001d60

08007154 <__malloc_lock>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__malloc_lock+0x8>)
 8007156:	f000 b811 	b.w	800717c <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20001d68 	.word	0x20001d68

08007160 <__malloc_unlock>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__malloc_unlock+0x8>)
 8007162:	f000 b80c 	b.w	800717e <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20001d68 	.word	0x20001d68

0800716c <_malloc_usable_size_r>:
 800716c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007170:	1f18      	subs	r0, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfbc      	itt	lt
 8007176:	580b      	ldrlt	r3, [r1, r0]
 8007178:	18c0      	addlt	r0, r0, r3
 800717a:	4770      	bx	lr

0800717c <__retarget_lock_acquire_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_release_recursive>:
 800717e:	4770      	bx	lr

08007180 <_init>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

0800718c <_fini>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr
