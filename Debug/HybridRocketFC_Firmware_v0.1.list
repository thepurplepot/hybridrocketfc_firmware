
HybridRocketFC_Firmware_v0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006574  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800676c  0800676c  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006774  08006774  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006774  08006774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800677c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000180  080068fc  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf0  080068fc  00021cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154ae  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003067  00000000  00000000  0003565e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000386c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00039480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001882d  00000000  00000000  0003a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012740  00000000  00000000  00052945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089899  00000000  00000000  00065085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee91e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000ee974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066f4 	.word	0x080066f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	080066f4 	.word	0x080066f4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9ca 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f89c 	bl	8000618 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e0:	f000 f86c 	bl	80005bc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f005 fbf0 	bl	8005cc8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x18>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 f8f2 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <SystemClock_Config+0xc8>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <SystemClock_Config+0xc8>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <SystemClock_Config+0xcc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <SystemClock_Config+0xcc>)
 8000536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000560:	2348      	movs	r3, #72	; 0x48
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000568:	2303      	movs	r3, #3
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f001 ff6f 	bl	8002454 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800057c:	f000 f890 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2302      	movs	r3, #2
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f9d1 	bl	8002944 <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005a8:	f000 f87a 	bl	80006a0 <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_I2C1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x50>)
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_I2C1_Init+0x58>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_I2C1_Init+0x50>)
 80005da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_I2C1_Init+0x50>)
 80005fa:	f000 fc63 	bl	8000ec4 <HAL_I2C_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f84c 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200003c0 	.word	0x200003c0
 8000610:	40005400 	.word	0x40005400
 8000614:	000186a0 	.word	0x000186a0

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_GPIO_Init+0x84>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1d      	ldr	r2, [pc, #116]	; (800069c <MX_GPIO_Init+0x84>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_GPIO_Init+0x84>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_GPIO_Init+0x84>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a16      	ldr	r2, [pc, #88]	; (800069c <MX_GPIO_Init+0x84>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_GPIO_Init+0x84>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_GPIO_Init+0x84>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MX_GPIO_Init+0x84>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_GPIO_Init+0x84>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <MX_GPIO_Init+0x84>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_GPIO_Init+0x84>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <HAL_MspInit+0x4c>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <HAL_I2C_MspInit+0x84>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d12b      	bne.n	8000776 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073a:	23c0      	movs	r3, #192	; 0xc0
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073e:	2312      	movs	r3, #18
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074a:	2304      	movs	r3, #4
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <HAL_I2C_MspInit+0x8c>)
 8000756:	f000 fa31 	bl	8000bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0x88>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_I2C_MspInit+0x88>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005400 	.word	0x40005400
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f89a 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <OTG_FS_IRQHandler+0x10>)
 80007e6:	f000 fe01 	bl	80013ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200018e8 	.word	0x200018e8

080007f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000842:	f7ff ffd7 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f005 ff29 	bl	800669c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe41 	bl	80004d0 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000850:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800085c:	0800677c 	.word	0x0800677c
  ldr r2, =_sbss
 8000860:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000864:	20001cf0 	.word	0x20001cf0

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_Init+0x40>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_Init+0x40>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x40>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f94f 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff ff04 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f967 	bl	8000ba2 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f92f 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000414 	.word	0x20000414

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000414 	.word	0x20000414

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff ffee 	bl	8000938 <HAL_GetTick>
 800095c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000976:	bf00      	nop
 8000978:	f7ff ffde 	bl	8000938 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e159      	b.n	8000e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f040 8148 	bne.w	8000e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80a2 	beq.w	8000e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a56      	ldr	r2, [pc, #344]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <HAL_GPIO_Init+0x2e8>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5e:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a49      	ldr	r2, [pc, #292]	; (8000eac <HAL_GPIO_Init+0x2f0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x202>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <HAL_GPIO_Init+0x2f4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x1fe>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a47      	ldr	r2, [pc, #284]	; (8000eb4 <HAL_GPIO_Init+0x2f8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x1fa>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a46      	ldr	r2, [pc, #280]	; (8000eb8 <HAL_GPIO_Init+0x2fc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x1f6>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a45      	ldr	r2, [pc, #276]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x1f2>
 8000daa:	2304      	movs	r3, #4
 8000dac:	e008      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000db2:	2303      	movs	r3, #3
 8000db4:	e004      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000db6:	2302      	movs	r3, #2
 8000db8:	e002      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x204>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	f002 0203 	and.w	r2, r2, #3
 8000dc6:	0092      	lsls	r2, r2, #2
 8000dc8:	4093      	lsls	r3, r2
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd0:	4935      	ldr	r1, [pc, #212]	; (8000ea8 <HAL_GPIO_Init+0x2ec>)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e02:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e2c:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e80:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	f67f aea2 	bls.w	8000bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40013c00 	.word	0x40013c00

08000ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e12b      	b.n	800112e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d106      	bne.n	8000ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fc06 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2224      	movs	r2, #36	; 0x24
 8000ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0201 	bic.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f28:	f001 fee0 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a81      	ldr	r2, [pc, #516]	; (8001138 <HAL_I2C_Init+0x274>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d807      	bhi.n	8000f48 <HAL_I2C_Init+0x84>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a80      	ldr	r2, [pc, #512]	; (800113c <HAL_I2C_Init+0x278>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	bf94      	ite	ls
 8000f40:	2301      	movls	r3, #1
 8000f42:	2300      	movhi	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	e006      	b.n	8000f56 <HAL_I2C_Init+0x92>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4a7d      	ldr	r2, [pc, #500]	; (8001140 <HAL_I2C_Init+0x27c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	bf94      	ite	ls
 8000f50:	2301      	movls	r3, #1
 8000f52:	2300      	movhi	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0e7      	b.n	800112e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4a78      	ldr	r2, [pc, #480]	; (8001144 <HAL_I2C_Init+0x280>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	0c9b      	lsrs	r3, r3, #18
 8000f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a6a      	ldr	r2, [pc, #424]	; (8001138 <HAL_I2C_Init+0x274>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d802      	bhi.n	8000f98 <HAL_I2C_Init+0xd4>
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	e009      	b.n	8000fac <HAL_I2C_Init+0xe8>
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a69      	ldr	r2, [pc, #420]	; (8001148 <HAL_I2C_Init+0x284>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	099b      	lsrs	r3, r3, #6
 8000faa:	3301      	adds	r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	6812      	ldr	r2, [r2, #0]
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	495c      	ldr	r1, [pc, #368]	; (8001138 <HAL_I2C_Init+0x274>)
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d819      	bhi.n	8001000 <HAL_I2C_Init+0x13c>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1e59      	subs	r1, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fda:	1c59      	adds	r1, r3, #1
 8000fdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <HAL_I2C_Init+0x138>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1e59      	subs	r1, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffa:	e051      	b.n	80010a0 <HAL_I2C_Init+0x1dc>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e04f      	b.n	80010a0 <HAL_I2C_Init+0x1dc>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d111      	bne.n	800102c <HAL_I2C_Init+0x168>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	440b      	add	r3, r1
 8001016:	fbb0 f3f3 	udiv	r3, r0, r3
 800101a:	3301      	adds	r3, #1
 800101c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	e012      	b.n	8001052 <HAL_I2C_Init+0x18e>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6859      	ldr	r1, [r3, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	0099      	lsls	r1, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001042:	3301      	adds	r3, #1
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_Init+0x196>
 8001056:	2301      	movs	r3, #1
 8001058:	e022      	b.n	80010a0 <HAL_I2C_Init+0x1dc>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10e      	bne.n	8001080 <HAL_I2C_Init+0x1bc>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1e58      	subs	r0, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6859      	ldr	r1, [r3, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	fbb0 f3f3 	udiv	r3, r0, r3
 8001074:	3301      	adds	r3, #1
 8001076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107e:	e00f      	b.n	80010a0 <HAL_I2C_Init+0x1dc>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1e58      	subs	r0, r3, #1
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6859      	ldr	r1, [r3, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	0099      	lsls	r1, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	fbb0 f3f3 	udiv	r3, r0, r3
 8001096:	3301      	adds	r3, #1
 8001098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800109c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	6809      	ldr	r1, [r1, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6911      	ldr	r1, [r2, #16]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68d2      	ldr	r2, [r2, #12]
 80010da:	4311      	orrs	r1, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2220      	movs	r2, #32
 800111a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	000186a0 	.word	0x000186a0
 800113c:	001e847f 	.word	0x001e847f
 8001140:	003d08ff 	.word	0x003d08ff
 8001144:	431bde83 	.word	0x431bde83
 8001148:	10624dd3 	.word	0x10624dd3

0800114c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b08f      	sub	sp, #60	; 0x3c
 8001150:	af0a      	add	r7, sp, #40	; 0x28
 8001152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e10f      	b.n	800137e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f004 ff85 	bl	8006088 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fece 	bl	8002f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	687e      	ldr	r6, [r7, #4]
 80011aa:	466d      	mov	r5, sp
 80011ac:	f106 0410 	add.w	r4, r6, #16
 80011b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80011c0:	1d33      	adds	r3, r6, #4
 80011c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f001 fda5 	bl	8002d14 <USB_CoreInit>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0d0      	b.n	800137e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 febc 	bl	8002f60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e04a      	b.n	8001284 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	333d      	adds	r3, #61	; 0x3d
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	333c      	adds	r3, #60	; 0x3c
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	b298      	uxth	r0, r3
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3342      	adds	r3, #66	; 0x42
 800122a:	4602      	mov	r2, r0
 800122c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	333f      	adds	r3, #63	; 0x3f
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3344      	adds	r3, #68	; 0x44
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	3348      	adds	r3, #72	; 0x48
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3350      	adds	r3, #80	; 0x50
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3301      	adds	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3af      	bcc.n	80011ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e044      	b.n	800131e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	1a9b      	subs	r3, r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3301      	adds	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3b5      	bcc.n	8001294 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	687e      	ldr	r6, [r7, #4]
 8001330:	466d      	mov	r5, sp
 8001332:	f106 0410 	add.w	r4, r6, #16
 8001336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001342:	e885 0003 	stmia.w	r5, {r0, r1}
 8001346:	1d33      	adds	r3, r6, #4
 8001348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f001 fe54 	bl	8002ff8 <USB_DevInit>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00d      	b.n	800137e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fed0 	bl	800411c <USB_DevDisconnect>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001386 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_PCD_Start+0x1c>
 800139e:	2302      	movs	r3, #2
 80013a0:	e020      	b.n	80013e4 <HAL_PCD_Start+0x5e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d109      	bne.n	80013c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d005      	beq.n	80013c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fda6 	bl	8002f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fe80 	bl	80040da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b08d      	sub	sp, #52	; 0x34
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 ff3e 	bl	8004284 <USB_GetMode>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 839d 	bne.w	8001b4a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fea2 	bl	800415e <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8393 	beq.w	8001b48 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fe99 	bl	800415e <USB_ReadInterrupts>
 800142c:	4603      	mov	r3, r0
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	695a      	ldr	r2, [r3, #20]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f002 0202 	and.w	r2, r2, #2
 8001444:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fe87 	bl	800415e <USB_ReadInterrupts>
 8001450:	4603      	mov	r3, r0
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b10      	cmp	r3, #16
 8001458:	d161      	bne.n	800151e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0210 	bic.w	r2, r2, #16
 8001468:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f003 020f 	and.w	r2, r3, #15
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	3304      	adds	r3, #4
 8001488:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	0c5b      	lsrs	r3, r3, #17
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	2b02      	cmp	r3, #2
 8001494:	d124      	bne.n	80014e0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d035      	beq.n	800150e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	6a38      	ldr	r0, [r7, #32]
 80014b6:	f002 fcbe 	bl	8003e36 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	441a      	add	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d8:	441a      	add	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	e016      	b.n	800150e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	0c5b      	lsrs	r3, r3, #17
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d110      	bne.n	800150e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80014f2:	2208      	movs	r2, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	6a38      	ldr	r0, [r7, #32]
 80014f8:	f002 fc9d 	bl	8003e36 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001508:	441a      	add	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0210 	orr.w	r2, r2, #16
 800151c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fe1b 	bl	800415e <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800152e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001532:	d16e      	bne.n	8001612 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fe21 	bl	8004184 <USB_ReadDevAllOutEpInterrupt>
 8001542:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001544:	e062      	b.n	800160c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d057      	beq.n	8001600 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fe46 	bl	80041ec <USB_ReadDevOutEPInterrupt>
 8001560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001578:	461a      	mov	r2, r3
 800157a:	2301      	movs	r3, #1
 800157c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800157e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fdb1 	bl	80020e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4413      	add	r3, r2
 8001598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159c:	461a      	mov	r2, r3
 800159e:	2308      	movs	r3, #8
 80015a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 feab 	bl	8002300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	2310      	movs	r3, #16
 80015c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015dc:	461a      	mov	r2, r3
 80015de:	2320      	movs	r3, #32
 80015e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d009      	beq.n	8001600 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f8:	461a      	mov	r2, r3
 80015fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	d199      	bne.n	8001546 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fda1 	bl	800415e <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001622:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001626:	f040 80c0 	bne.w	80017aa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fdc2 	bl	80041b8 <USB_ReadDevAllInEpInterrupt>
 8001634:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800163a:	e0b2      	b.n	80017a2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a7 	beq.w	8001796 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fde8 	bl	8004228 <USB_ReadDevInEPInterrupt>
 8001658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d057      	beq.n	8001714 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	2201      	movs	r2, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	69f9      	ldr	r1, [r7, #28]
 8001680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001684:	4013      	ands	r3, r2
 8001686:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	461a      	mov	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d132      	bne.n	8001708 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3348      	adds	r3, #72	; 0x48
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4403      	add	r3, r0
 80016c2:	3344      	adds	r3, #68	; 0x44
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4419      	add	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4403      	add	r3, r0
 80016d6:	3348      	adds	r3, #72	; 0x48
 80016d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d113      	bne.n	8001708 <HAL_PCD_IRQHandler+0x31c>
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e4:	4613      	mov	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	3350      	adds	r3, #80	; 0x50
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	f002 fdf0 	bl	80042e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f004 fd3b 	bl	800618a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172a:	461a      	mov	r2, r3
 800172c:	2308      	movs	r3, #8
 800172e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d008      	beq.n	800174c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	461a      	mov	r2, r3
 8001748:	2310      	movs	r3, #16
 800174a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d008      	beq.n	8001768 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001762:	461a      	mov	r2, r3
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177e:	461a      	mov	r2, r3
 8001780:	2302      	movs	r3, #2
 8001782:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800178e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fc1b 	bl	8001fcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	3301      	adds	r3, #1
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	085b      	lsrs	r3, r3, #1
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f af49 	bne.w	800163c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fcd5 	bl	800415e <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017be:	d122      	bne.n	8001806 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017e6:	2100      	movs	r1, #0
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fe27 	bl	800243c <HAL_PCDEx_LPM_Callback>
 80017ee:	e002      	b.n	80017f6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f004 fd37 	bl	8006264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fca7 	bl	800415e <USB_ReadInterrupts>
 8001810:	4603      	mov	r3, r0
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800181a:	d112      	bne.n	8001842 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d102      	bne.n	8001832 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f004 fcf3 	bl	8006218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001840:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fc89 	bl	800415e <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001856:	f040 80c7 	bne.w	80019e8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2110      	movs	r1, #16
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fd23 	bl	80032c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	e056      	b.n	800192e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	4413      	add	r3, r2
 8001888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800188c:	461a      	mov	r2, r3
 800188e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001892:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018a4:	0151      	lsls	r1, r2, #5
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	440a      	add	r2, r1
 80018aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c4:	0151      	lsls	r1, r2, #5
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	440a      	add	r2, r1
 80018ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e0:	461a      	mov	r2, r3
 80018e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f8:	0151      	lsls	r1, r2, #5
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	440a      	add	r2, r1
 80018fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001906:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001918:	0151      	lsls	r1, r2, #5
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	440a      	add	r2, r1
 800191e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001926:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	3301      	adds	r3, #1
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001934:	429a      	cmp	r2, r3
 8001936:	d3a3      	bcc.n	8001880 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001946:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800194a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800195a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001964:	f043 030b 	orr.w	r3, r3, #11
 8001968:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197a:	f043 030b 	orr.w	r3, r3, #11
 800197e:	6453      	str	r3, [r2, #68]	; 0x44
 8001980:	e015      	b.n	80019ae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001990:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001994:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001998:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f043 030b 	orr.w	r3, r3, #11
 80019ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019d2:	461a      	mov	r2, r3
 80019d4:	f002 fc88 	bl	80042e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fbb6 	bl	800415e <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d124      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fc4c 	bl	80042a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fcb4 	bl	800337a <USB_GetDevSpeed>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681c      	ldr	r4, [r3, #0]
 8001a1e:	f001 f959 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8001a22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f001 f9d3 	bl	8002dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f004 fbd1 	bl	80061da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fb86 	bl	800415e <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d10a      	bne.n	8001a72 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f004 fbae 	bl	80061be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f002 0208 	and.w	r2, r2, #8
 8001a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fb71 	bl	800415e <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a86:	d10f      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f004 fc06 	bl	80062a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fb56 	bl	800415e <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001abc:	d10f      	bne.n	8001ade <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f004 fbd9 	bl	8006280 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fb3b 	bl	800415e <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d10a      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f004 fbe7 	bl	80062c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fb25 	bl	800415e <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d115      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f004 fbd7 	bl	80062e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e000      	b.n	8001b4a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b48:	bf00      	nop
    }
  }
}
 8001b4a:	3734      	adds	r7, #52	; 0x34
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}

08001b50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_SetAddress+0x1a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e013      	b.n	8001b92 <HAL_PCD_SetAddress+0x42>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fa83 	bl	800408e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	460b      	mov	r3, r1
 8001bae:	803b      	strh	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da0f      	bge.n	8001be0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3338      	adds	r3, #56	; 0x38
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	705a      	strb	r2, [r3, #1]
 8001bde:	e00f      	b.n	8001c00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 020f 	and.w	r2, r3, #15
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c0c:	883a      	ldrh	r2, [r7, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	78ba      	ldrb	r2, [r7, #2]
 8001c16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d102      	bne.n	8001c36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_EP_Open+0xaa>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00e      	b.n	8001c62 <HAL_PCD_EP_Open+0xc8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fbb6 	bl	80033c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c60:	7afb      	ldrb	r3, [r7, #11]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da0f      	bge.n	8001c9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	705a      	strb	r2, [r3, #1]
 8001c9c:	e00f      	b.n	8001cbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_EP_Close+0x6e>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e00e      	b.n	8001cf6 <HAL_PCD_EP_Close+0x8c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fbf4 	bl	80034d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	f001 fecf 	bl	8003b14 <USB_EP0StartXfer>
 8001d76:	e008      	b.n	8001d8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	f001 fc81 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	3338      	adds	r3, #56	; 0x38
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	3304      	adds	r3, #4
 8001dea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2201      	movs	r2, #1
 8001e02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	6979      	ldr	r1, [r7, #20]
 8001e36:	f001 fe6d 	bl	8003b14 <USB_EP0StartXfer>
 8001e3a:	e008      	b.n	8001e4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	f001 fc1f 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 020f 	and.w	r2, r3, #15
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d901      	bls.n	8001e76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e050      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0f      	bge.n	8001e9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3338      	adds	r3, #56	; 0x38
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e00d      	b.n	8001eba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_EP_SetStall+0x82>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e01e      	b.n	8001f18 <HAL_PCD_EP_SetStall+0xc0>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 fffc 	bl	8003ee6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	b2d9      	uxtb	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f002 f9ed 	bl	80042e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 020f 	and.w	r2, r3, #15
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d901      	bls.n	8001f3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e042      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0f      	bge.n	8001f66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00f      	b.n	8001f86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_EP_ClrStall+0x86>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00e      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0xa4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 f804 	bl	8003fc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3338      	adds	r3, #56	; 0x38
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d901      	bls.n	8002004 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e06c      	b.n	80020de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d902      	bls.n	8002020 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3303      	adds	r3, #3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002028:	e02b      	b.n	8002082 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	429a      	cmp	r2, r3
 800203e:	d902      	bls.n	8002046 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3303      	adds	r3, #3
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68d9      	ldr	r1, [r3, #12]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800205e:	b2db      	uxtb	r3, r3
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	4603      	mov	r3, r0
 8002064:	6978      	ldr	r0, [r7, #20]
 8002066:	f001 fea8 	bl	8003dba <USB_WritePacket>

    ep->xfer_buff  += len;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	441a      	add	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	441a      	add	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	b29b      	uxth	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	429a      	cmp	r2, r3
 8002096:	d809      	bhi.n	80020ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	699a      	ldr	r2, [r3, #24]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d203      	bcs.n	80020ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1be      	bne.n	800202a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d811      	bhi.n	80020dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	2201      	movs	r2, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020d8:	4013      	ands	r3, r2
 80020da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	333c      	adds	r3, #60	; 0x3c
 8002100:	3304      	adds	r3, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	2b01      	cmp	r3, #1
 800211c:	f040 80a0 	bne.w	8002260 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d015      	beq.n	8002156 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <PCD_EP_OutXfrComplete_int+0x210>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f240 80dd 	bls.w	80022ee <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d7 	beq.w	80022ee <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	461a      	mov	r2, r3
 800214e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	e0cb      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216c:	461a      	mov	r2, r3
 800216e:	2320      	movs	r3, #32
 8002170:	6093      	str	r3, [r2, #8]
 8002172:	e0bc      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 80b7 	bne.w	80022ee <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d90f      	bls.n	80021a8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a4:	6093      	str	r3, [r2, #8]
 80021a6:	e0a2      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021ba:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	0159      	lsls	r1, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80021ce:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4403      	add	r3, r0
 80021de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021e2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4419      	add	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4403      	add	r3, r0
 800221c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002220:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d114      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x16a>
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d108      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800224a:	461a      	mov	r2, r3
 800224c:	2101      	movs	r1, #1
 800224e:	f002 f84b 	bl	80042e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	4619      	mov	r1, r3
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f003 ff7b 	bl	8006154 <HAL_PCD_DataOutStageCallback>
 800225e:	e046      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a26      	ldr	r2, [pc, #152]	; (80022fc <PCD_EP_OutXfrComplete_int+0x214>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d124      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227e:	461a      	mov	r2, r3
 8002280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002284:	6093      	str	r3, [r2, #8]
 8002286:	e032      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	461a      	mov	r2, r3
 80022a0:	2320      	movs	r3, #32
 80022a2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f003 ff52 	bl	8006154 <HAL_PCD_DataOutStageCallback>
 80022b0:	e01d      	b.n	80022ee <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d114      	bne.n	80022e2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022da:	461a      	mov	r2, r3
 80022dc:	2100      	movs	r1, #0
 80022de:	f002 f803 	bl	80042e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4619      	mov	r1, r3
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f003 ff33 	bl	8006154 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	4f54300a 	.word	0x4f54300a
 80022fc:	4f54310a 	.word	0x4f54310a

08002300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	333c      	adds	r3, #60	; 0x3c
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d90e      	bls.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f003 feeb 	bl	8006130 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <PCD_EP_OutSetupPacket_int+0x88>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d90c      	bls.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d108      	bne.n	800237c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002374:	461a      	mov	r2, r3
 8002376:	2101      	movs	r1, #1
 8002378:	f001 ffb6 	bl	80042e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	4f54300a 	.word	0x4f54300a

0800238c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
 8002398:	4613      	mov	r3, r2
 800239a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d107      	bne.n	80023ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023aa:	883b      	ldrh	r3, [r7, #0]
 80023ac:	0419      	lsls	r1, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
 80023b8:	e028      	b.n	800240c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e00d      	b.n	80023ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3340      	adds	r3, #64	; 0x40
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3ec      	bcc.n	80023ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023f4:	883b      	ldrh	r3, [r7, #0]
 80023f6:	0418      	lsls	r0, r3, #16
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	3b01      	subs	r3, #1
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4302      	orrs	r2, r0
 8002404:	3340      	adds	r3, #64	; 0x40
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e264      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	4ba3      	ldr	r3, [pc, #652]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00c      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247e:	4ba0      	ldr	r3, [pc, #640]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	2b08      	cmp	r3, #8
 8002488:	d112      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b9d      	ldr	r3, [pc, #628]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b99      	ldr	r3, [pc, #612]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e23f      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b91      	ldr	r3, [pc, #580]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a90      	ldr	r2, [pc, #576]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a8a      	ldr	r2, [pc, #552]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a87      	ldr	r2, [pc, #540]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a83      	ldr	r2, [pc, #524]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a80      	ldr	r2, [pc, #512]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fa14 	bl	8000938 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fa10 	bl	8000938 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e204      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	4b76      	ldr	r3, [pc, #472]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fa00 	bl	8000938 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe f9fc 	bl	8000938 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1f0      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	4b65      	ldr	r3, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002576:	4b62      	ldr	r3, [pc, #392]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11c      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e1c4      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a6:	4b56      	ldr	r3, [pc, #344]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4952      	ldr	r1, [pc, #328]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	e03a      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c4:	4b4f      	ldr	r3, [pc, #316]	; (8002704 <HAL_RCC_OscConfig+0x2b0>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe f9b5 	bl	8000938 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe f9b1 	bl	8000938 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1a5      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4940      	ldr	r1, [pc, #256]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	4313      	orrs	r3, r2
 8002602:	600b      	str	r3, [r1, #0]
 8002604:	e015      	b.n	8002632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x2b0>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe f994 	bl	8000938 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe f990 	bl	8000938 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e184      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d030      	beq.n	80026a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x2b4>)
 8002648:	2201      	movs	r2, #1
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe f974 	bl	8000938 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe f970 	bl	8000938 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e164      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
 8002672:	e015      	b.n	80026a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b24      	ldr	r3, [pc, #144]	; (8002708 <HAL_RCC_OscConfig+0x2b4>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe f95d 	bl	8000938 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe f959 	bl	8000938 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e14d      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80a0 	beq.w	80027ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x2b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d121      	bne.n	800272e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCC_OscConfig+0x2b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_RCC_OscConfig+0x2b8>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe f91f 	bl	8000938 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e011      	b.n	8002722 <HAL_RCC_OscConfig+0x2ce>
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	42470000 	.word	0x42470000
 8002708:	42470e80 	.word	0x42470e80
 800270c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002710:	f7fe f912 	bl	8000938 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e106      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b85      	ldr	r3, [pc, #532]	; (8002938 <HAL_RCC_OscConfig+0x4e4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d106      	bne.n	8002744 <HAL_RCC_OscConfig+0x2f0>
 8002736:	4b81      	ldr	r3, [pc, #516]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a80      	ldr	r2, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x32a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x312>
 800274c:	4b7b      	ldr	r3, [pc, #492]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a7a      	ldr	r2, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b78      	ldr	r3, [pc, #480]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a77      	ldr	r2, [pc, #476]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x32a>
 8002766:	4b75      	ldr	r3, [pc, #468]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a74      	ldr	r2, [pc, #464]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	4b72      	ldr	r3, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a71      	ldr	r2, [pc, #452]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe f8d7 	bl	8000938 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe f8d3 	bl	8000938 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0c5      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b65      	ldr	r3, [pc, #404]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x33a>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f8c1 	bl	8000938 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe f8bd 	bl	8000938 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0af      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b5a      	ldr	r3, [pc, #360]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a55      	ldr	r2, [pc, #340]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 809b 	beq.w	800292e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f8:	4b50      	ldr	r3, [pc, #320]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d05c      	beq.n	80028be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d141      	bne.n	8002890 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe f891 	bl	8000938 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281a:	f7fe f88d 	bl	8000938 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e081      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	019b      	lsls	r3, r3, #6
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	061b      	lsls	r3, r3, #24
 800285c:	4937      	ldr	r1, [pc, #220]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f866 	bl	8000938 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe f862 	bl	8000938 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e056      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x41c>
 800288e:	e04e      	b.n	800292e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x4ec>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7fe f84f 	bl	8000938 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe f84b 	bl	8000938 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e03f      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x44a>
 80028bc:	e037      	b.n	800292e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e032      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_RCC_OscConfig+0x4e8>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d028      	beq.n	800292a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d121      	bne.n	800292a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d11a      	bne.n	800292a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002900:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002902:	4293      	cmp	r3, r2
 8002904:	d111      	bne.n	800292a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d107      	bne.n	800292a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40007000 	.word	0x40007000
 800293c:	40023800 	.word	0x40023800
 8002940:	42470060 	.word	0x42470060

08002944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0cc      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d90c      	bls.n	8002980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002998:	4b59      	ldr	r3, [pc, #356]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a58      	ldr	r2, [pc, #352]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a52      	ldr	r2, [pc, #328]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	494d      	ldr	r1, [pc, #308]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d044      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d119      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e07f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e067      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b37      	ldr	r3, [pc, #220]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4934      	ldr	r1, [pc, #208]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7fd ff80 	bl	8000938 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7fd ff7c 	bl	8000938 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d20c      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e032      	b.n	8002af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4916      	ldr	r1, [pc, #88]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	490e      	ldr	r1, [pc, #56]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aca:	f000 f821 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	490a      	ldr	r1, [pc, #40]	; (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	5ccb      	ldrb	r3, [r1, r3]
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fee0 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08006754 	.word	0x08006754
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	2300      	movs	r3, #0
 8002b22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b28:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x40>
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	f200 80bd 	bhi.w	8002cb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b42:	e0b7      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b46:	60bb      	str	r3, [r7, #8]
       break;
 8002b48:	e0b7      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b61      	ldr	r3, [pc, #388]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b4c:	60bb      	str	r3, [r7, #8]
      break;
 8002b4e:	e0b4      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b50:	4b5d      	ldr	r3, [pc, #372]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5a:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04d      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	ea02 0800 	and.w	r8, r2, r0
 8002b7e:	ea03 0901 	and.w	r9, r3, r1
 8002b82:	4640      	mov	r0, r8
 8002b84:	4649      	mov	r1, r9
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	014b      	lsls	r3, r1, #5
 8002b90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b94:	0142      	lsls	r2, r0, #5
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b9e:	eb61 0109 	sbc.w	r1, r1, r9
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	018b      	lsls	r3, r1, #6
 8002bac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bb0:	0182      	lsls	r2, r0, #6
 8002bb2:	1a12      	subs	r2, r2, r0
 8002bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	00d9      	lsls	r1, r3, #3
 8002bc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bc6:	00d0      	lsls	r0, r2, #3
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	eb12 0208 	adds.w	r2, r2, r8
 8002bd0:	eb43 0309 	adc.w	r3, r3, r9
 8002bd4:	f04f 0000 	mov.w	r0, #0
 8002bd8:	f04f 0100 	mov.w	r1, #0
 8002bdc:	0259      	lsls	r1, r3, #9
 8002bde:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002be2:	0250      	lsls	r0, r2, #9
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	f7fd faf0 	bl	80001d8 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e04a      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c12:	f04f 0100 	mov.w	r1, #0
 8002c16:	ea02 0400 	and.w	r4, r2, r0
 8002c1a:	ea03 0501 	and.w	r5, r3, r1
 8002c1e:	4620      	mov	r0, r4
 8002c20:	4629      	mov	r1, r5
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	014b      	lsls	r3, r1, #5
 8002c2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c30:	0142      	lsls	r2, r0, #5
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	1b00      	subs	r0, r0, r4
 8002c38:	eb61 0105 	sbc.w	r1, r1, r5
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	018b      	lsls	r3, r1, #6
 8002c46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c4a:	0182      	lsls	r2, r0, #6
 8002c4c:	1a12      	subs	r2, r2, r0
 8002c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	00d9      	lsls	r1, r3, #3
 8002c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c60:	00d0      	lsls	r0, r2, #3
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	1912      	adds	r2, r2, r4
 8002c68:	eb45 0303 	adc.w	r3, r5, r3
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0299      	lsls	r1, r3, #10
 8002c76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c7a:	0290      	lsls	r0, r2, #10
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	f7fd faa4 	bl	80001d8 <__aeabi_uldivmod>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4613      	mov	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	60bb      	str	r3, [r7, #8]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cb6:	60bb      	str	r3, [r7, #8]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	68bb      	ldr	r3, [r7, #8]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	007a1200 	.word	0x007a1200

08002cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf0:	f7ff fff0 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0a9b      	lsrs	r3, r3, #10
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08006764 	.word	0x08006764

08002d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d14:	b084      	sub	sp, #16
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	f107 001c 	add.w	r0, r7, #28
 8002d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d122      	bne.n	8002d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f001 fb1c 	bl	80043a4 <USB_CoreReset>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e01a      	b.n	8002da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 fb10 	bl	80043a4 <USB_CoreReset>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9a:	e005      	b.n	8002da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10b      	bne.n	8002dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f043 0206 	orr.w	r2, r3, #6
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dd2:	b004      	add	sp, #16
 8002dd4:	4770      	bx	lr
	...

08002dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	4613      	mov	r3, r2
 8002de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d165      	bne.n	8002eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a41      	ldr	r2, [pc, #260]	; (8002ef4 <USB_SetTurnaroundTime+0x11c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d906      	bls.n	8002e02 <USB_SetTurnaroundTime+0x2a>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <USB_SetTurnaroundTime+0x120>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d202      	bcs.n	8002e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e062      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <USB_SetTurnaroundTime+0x120>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d306      	bcc.n	8002e18 <USB_SetTurnaroundTime+0x40>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	; (8002efc <USB_SetTurnaroundTime+0x124>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d202      	bcs.n	8002e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e12:	230e      	movs	r3, #14
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	e057      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a38      	ldr	r2, [pc, #224]	; (8002efc <USB_SetTurnaroundTime+0x124>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d306      	bcc.n	8002e2e <USB_SetTurnaroundTime+0x56>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a37      	ldr	r2, [pc, #220]	; (8002f00 <USB_SetTurnaroundTime+0x128>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d202      	bcs.n	8002e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e28:	230d      	movs	r3, #13
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e04c      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <USB_SetTurnaroundTime+0x128>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d306      	bcc.n	8002e44 <USB_SetTurnaroundTime+0x6c>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <USB_SetTurnaroundTime+0x12c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d802      	bhi.n	8002e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e3e:	230c      	movs	r3, #12
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e041      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <USB_SetTurnaroundTime+0x12c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d906      	bls.n	8002e5a <USB_SetTurnaroundTime+0x82>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <USB_SetTurnaroundTime+0x130>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d802      	bhi.n	8002e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e54:	230b      	movs	r3, #11
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e036      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <USB_SetTurnaroundTime+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d906      	bls.n	8002e70 <USB_SetTurnaroundTime+0x98>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <USB_SetTurnaroundTime+0x134>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d802      	bhi.n	8002e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e02b      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <USB_SetTurnaroundTime+0x134>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d906      	bls.n	8002e86 <USB_SetTurnaroundTime+0xae>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <USB_SetTurnaroundTime+0x138>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d202      	bcs.n	8002e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e80:	2309      	movs	r3, #9
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e020      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <USB_SetTurnaroundTime+0x138>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d306      	bcc.n	8002e9c <USB_SetTurnaroundTime+0xc4>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4a20      	ldr	r2, [pc, #128]	; (8002f14 <USB_SetTurnaroundTime+0x13c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d802      	bhi.n	8002e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e96:	2308      	movs	r3, #8
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e015      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <USB_SetTurnaroundTime+0x13c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d906      	bls.n	8002eb2 <USB_SetTurnaroundTime+0xda>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <USB_SetTurnaroundTime+0x140>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d202      	bcs.n	8002eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002eac:	2307      	movs	r3, #7
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e00a      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e007      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ebe:	2309      	movs	r3, #9
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e001      	b.n	8002ec8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ec4:	2309      	movs	r3, #9
 8002ec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	00d8acbf 	.word	0x00d8acbf
 8002ef8:	00e4e1c0 	.word	0x00e4e1c0
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	01067380 	.word	0x01067380
 8002f04:	011a499f 	.word	0x011a499f
 8002f08:	01312cff 	.word	0x01312cff
 8002f0c:	014ca43f 	.word	0x014ca43f
 8002f10:	016e3600 	.word	0x016e3600
 8002f14:	01a6ab1f 	.word	0x01a6ab1f
 8002f18:	01e84800 	.word	0x01e84800

08002f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0201 	bic.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d115      	bne.n	8002fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f7fd fcde 	bl	8000950 <HAL_Delay>
      ms++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f001 f972 	bl	8004284 <USB_GetMode>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d01e      	beq.n	8002fe4 <USB_SetCurrentMode+0x84>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b31      	cmp	r3, #49	; 0x31
 8002faa:	d9f0      	bls.n	8002f8e <USB_SetCurrentMode+0x2e>
 8002fac:	e01a      	b.n	8002fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fd fcc5 	bl	8000950 <HAL_Delay>
      ms++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f001 f959 	bl	8004284 <USB_GetMode>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <USB_SetCurrentMode+0x84>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b31      	cmp	r3, #49	; 0x31
 8002fdc:	d9f0      	bls.n	8002fc0 <USB_SetCurrentMode+0x60>
 8002fde:	e001      	b.n	8002fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e005      	b.n	8002ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b32      	cmp	r3, #50	; 0x32
 8002fe8:	d101      	bne.n	8002fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e009      	b.n	800302c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3340      	adds	r3, #64	; 0x40
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	2200      	movs	r2, #0
 8003024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3301      	adds	r3, #1
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b0e      	cmp	r3, #14
 8003030:	d9f2      	bls.n	8003018 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11c      	bne.n	8003072 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
 8003070:	e00b      	b.n	800308a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	4619      	mov	r1, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	461a      	mov	r2, r3
 80030a6:	680b      	ldr	r3, [r1, #0]
 80030a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10c      	bne.n	80030ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030b6:	2100      	movs	r1, #0
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f945 	bl	8003348 <USB_SetDevSpeed>
 80030be:	e008      	b.n	80030d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030c0:	2101      	movs	r1, #1
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f940 	bl	8003348 <USB_SetDevSpeed>
 80030c8:	e003      	b.n	80030d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030ca:	2103      	movs	r1, #3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f93b 	bl	8003348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030d2:	2110      	movs	r1, #16
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8f3 	bl	80032c0 <USB_FlushTxFifo>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f90f 	bl	8003308 <USB_FlushRxFifo>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fa:	461a      	mov	r2, r3
 80030fc:	2300      	movs	r3, #0
 80030fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	461a      	mov	r2, r3
 8003114:	2300      	movs	r3, #0
 8003116:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e043      	b.n	80031a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003134:	d118      	bne.n	8003168 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e013      	b.n	800317a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	461a      	mov	r2, r3
 8003160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e008      	b.n	800317a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	461a      	mov	r2, r3
 8003176:	2300      	movs	r3, #0
 8003178:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800319e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3301      	adds	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3b7      	bcc.n	800311e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e043      	b.n	800323c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ca:	d118      	bne.n	80031fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e013      	b.n	8003210 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f4:	461a      	mov	r2, r3
 80031f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e008      	b.n	8003210 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2300      	movs	r3, #0
 8003220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3301      	adds	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d3b7      	bcc.n	80031b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003256:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003264:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f043 0210 	orr.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <USB_DevInit+0x2c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f043 0208 	orr.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032b8:	b004      	add	sp, #16
 80032ba:	4770      	bx	lr
 80032bc:	803c3800 	.word	0x803c3800

080032c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3301      	adds	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <USB_FlushTxFifo+0x44>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e006      	b.n	80032f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d0f1      	beq.n	80032da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	00030d40 	.word	0x00030d40

08003308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2210      	movs	r2, #16
 8003318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <USB_FlushRxFifo+0x3c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e006      	b.n	8003338 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b10      	cmp	r3, #16
 8003334:	d0f1      	beq.n	800331a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	00030d40 	.word	0x00030d40

08003348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800337a:	b480      	push	{r7}
 800337c:	b087      	sub	sp, #28
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0306 	and.w	r3, r3, #6
 8003392:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
 800339e:	e00a      	b.n	80033b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d002      	beq.n	80033ac <USB_GetDevSpeed+0x32>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d102      	bne.n	80033b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033ac:	2302      	movs	r3, #2
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e001      	b.n	80033b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033b2:	230f      	movs	r3, #15
 80033b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d13a      	bne.n	8003456 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fe:	4313      	orrs	r3, r2
 8003400:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d155      	bne.n	80034c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	78db      	ldrb	r3, [r3, #3]
 8003432:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003434:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	059b      	lsls	r3, r3, #22
 800343a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800343c:	4313      	orrs	r3, r2
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800344a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e036      	b.n	80034c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11a      	bne.n	80034c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	78db      	ldrb	r3, [r3, #3]
 80034a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034aa:	430b      	orrs	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d161      	bne.n	80035b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003506:	d11f      	bne.n	8003548 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003526:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003568:	4013      	ands	r3, r2
 800356a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4013      	ands	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	4619      	mov	r1, r3
 80035ac:	4b35      	ldr	r3, [pc, #212]	; (8003684 <USB_DeactivateEndpoint+0x1b0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
 80035b2:	e060      	b.n	8003676 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ca:	d11f      	bne.n	800360c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	440a      	add	r2, r1
 8003602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800360a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	43db      	mvns	r3, r3
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800362c:	4013      	ands	r3, r2
 800362e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	43db      	mvns	r3, r3
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003650:	4013      	ands	r3, r2
 8003652:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0159      	lsls	r1, r3, #5
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	440b      	add	r3, r1
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	4619      	mov	r1, r3
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <USB_DeactivateEndpoint+0x1b4>)
 8003672:	4013      	ands	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	ec337800 	.word	0xec337800
 8003688:	eff37800 	.word	0xeff37800

0800368c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 815c 	bne.w	8003966 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d132      	bne.n	800371c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003714:	0cdb      	lsrs	r3, r3, #19
 8003716:	04db      	lsls	r3, r3, #19
 8003718:	6113      	str	r3, [r2, #16]
 800371a:	e074      	b.n	8003806 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003736:	0cdb      	lsrs	r3, r3, #19
 8003738:	04db      	lsls	r3, r3, #19
 800373a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800375a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800375e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6959      	ldr	r1, [r3, #20]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	440b      	add	r3, r1
 8003778:	1e59      	subs	r1, r3, #1
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003782:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003784:	4b9d      	ldr	r3, [pc, #628]	; (80039fc <USB_EPStartXfer+0x370>)
 8003786:	400b      	ands	r3, r1
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	0148      	lsls	r0, r1, #5
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	4401      	add	r1, r0
 8003790:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ae:	69b9      	ldr	r1, [r7, #24]
 80037b0:	0148      	lsls	r0, r1, #5
 80037b2:	69f9      	ldr	r1, [r7, #28]
 80037b4:	4401      	add	r1, r0
 80037b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	78db      	ldrb	r3, [r3, #3]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d11f      	bne.n	8003806 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	0151      	lsls	r1, r2, #5
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	440a      	add	r2, r1
 80037dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003804:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d14b      	bne.n	80038a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	78db      	ldrb	r3, [r3, #3]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d128      	bne.n	8003882 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d110      	bne.n	8003862 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e00f      	b.n	8003882 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e12f      	b.n	8003b04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d015      	beq.n	80038f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8117 	beq.w	8003b04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	69f9      	ldr	r1, [r7, #28]
 80038ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038f2:	4313      	orrs	r3, r2
 80038f4:	634b      	str	r3, [r1, #52]	; 0x34
 80038f6:	e105      	b.n	8003b04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	440a      	add	r2, r1
 800391e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e00f      	b.n	800394a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	440a      	add	r2, r1
 8003940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	b298      	uxth	r0, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4603      	mov	r3, r0
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fa2b 	bl	8003dba <USB_WritePacket>
 8003964:	e0ce      	b.n	8003b04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003980:	0cdb      	lsrs	r3, r3, #19
 8003982:	04db      	lsls	r3, r3, #19
 8003984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	440a      	add	r2, r1
 800399c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039be:	691a      	ldr	r2, [r3, #16]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	0148      	lsls	r0, r1, #5
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	4401      	add	r1, r0
 80039d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	0151      	lsls	r1, r2, #5
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	440a      	add	r2, r1
 80039ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f6:	6113      	str	r3, [r2, #16]
 80039f8:	e036      	b.n	8003a68 <USB_EPStartXfer+0x3dc>
 80039fa:	bf00      	nop
 80039fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	8afb      	ldrh	r3, [r7, #22]
 8003a26:	04d9      	lsls	r1, r3, #19
 8003a28:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <USB_EPStartXfer+0x484>)
 8003a2a:	400b      	ands	r3, r1
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	0148      	lsls	r0, r1, #5
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	4401      	add	r1, r0
 8003a34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	8af9      	ldrh	r1, [r7, #22]
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	0148      	lsls	r0, r1, #5
 8003a5c:	69f9      	ldr	r1, [r7, #28]
 8003a5e:	4401      	add	r1, r0
 8003a60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10d      	bne.n	8003a8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	68d9      	ldr	r1, [r3, #12]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	460a      	mov	r2, r1
 8003a88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d128      	bne.n	8003ae4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d110      	bne.n	8003ac4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	0151      	lsls	r1, r2, #5
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	440a      	add	r2, r1
 8003ab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00f      	b.n	8003ae4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	1ff80000 	.word	0x1ff80000

08003b14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 80cd 	bne.w	8003cd0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d132      	bne.n	8003ba4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9c:	0cdb      	lsrs	r3, r3, #19
 8003b9e:	04db      	lsls	r3, r3, #19
 8003ba0:	6113      	str	r3, [r2, #16]
 8003ba2:	e04e      	b.n	8003c42 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	0151      	lsls	r1, r2, #5
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	440a      	add	r2, r1
 8003bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbe:	0cdb      	lsrs	r3, r3, #19
 8003bc0:	04db      	lsls	r3, r3, #19
 8003bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003be2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003be6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d903      	bls.n	8003bfc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	0151      	lsls	r1, r2, #5
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	440a      	add	r2, r1
 8003c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	6939      	ldr	r1, [r7, #16]
 8003c34:	0148      	lsls	r0, r1, #5
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	4401      	add	r1, r0
 8003c3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d11e      	bne.n	8003c86 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	e092      	b.n	8003dac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ca4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d07e      	beq.n	8003dac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	6979      	ldr	r1, [r7, #20]
 8003cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	634b      	str	r3, [r1, #52]	; 0x34
 8003cce:	e06d      	b.n	8003dac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cea:	0cdb      	lsrs	r3, r3, #19
 8003cec:	04db      	lsls	r3, r3, #19
 8003cee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d12:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5a:	6939      	ldr	r1, [r7, #16]
 8003d5c:	0148      	lsls	r0, r1, #5
 8003d5e:	6979      	ldr	r1, [r7, #20]
 8003d60:	4401      	add	r1, r0
 8003d62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10d      	bne.n	8003d8c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	460a      	mov	r2, r1
 8003d8a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003daa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b089      	sub	sp, #36	; 0x24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d123      	bne.n	8003e28 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003de0:	88bb      	ldrh	r3, [r7, #4]
 8003de2:	3303      	adds	r3, #3
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e018      	b.n	8003e20 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	031a      	lsls	r2, r3, #12
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3301      	adds	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3e2      	bcc.n	8003dee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3724      	adds	r7, #36	; 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b08b      	sub	sp, #44	; 0x2c
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	e014      	b.n	8003e8c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	3301      	adds	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	3301      	adds	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	3301      	adds	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3e6      	bcc.n	8003e62 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003e94:	8bfb      	ldrh	r3, [r7, #30]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	701a      	strb	r2, [r3, #0]
      i++;
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ecc:	8bfb      	ldrh	r3, [r7, #30]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003ed2:	8bfb      	ldrh	r3, [r7, #30]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ea      	bne.n	8003eae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	372c      	adds	r7, #44	; 0x2c
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d12c      	bne.n	8003f5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db12      	blt.n	8003f3a <USB_EPSetStall+0x54>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	0151      	lsls	r1, r2, #5
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	440a      	add	r2, r1
 8003f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e02b      	b.n	8003fb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db12      	blt.n	8003f94 <USB_EPSetStall+0xae>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	0151      	lsls	r1, r2, #5
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	440a      	add	r2, r1
 8003f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d128      	bne.n	8004030 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	0151      	lsls	r1, r2, #5
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	440a      	add	r2, r1
 8003ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d003      	beq.n	800400e <USB_EPClearStall+0x4c>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	78db      	ldrb	r3, [r3, #3]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d138      	bne.n	8004080 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	0151      	lsls	r1, r2, #5
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	440a      	add	r2, r1
 8004024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e027      	b.n	8004080 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800404a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800404e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d003      	beq.n	8004060 <USB_EPClearStall+0x9e>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d10f      	bne.n	8004080 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	0151      	lsls	r1, r2, #5
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	440a      	add	r2, r1
 8004076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004176:	68fb      	ldr	r3, [r7, #12]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	0c1b      	lsrs	r3, r3, #16
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	b29b      	uxth	r3, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4013      	ands	r3, r2
 8004218:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800421a:	68bb      	ldr	r3, [r7, #8]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	01db      	lsls	r3, r3, #7
 800425a:	b2db      	uxtb	r3, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004276:	68bb      	ldr	r3, [r7, #8]
}
 8004278:	4618      	mov	r0, r3
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0301 	and.w	r3, r3, #1
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	460b      	mov	r3, r1
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	333c      	adds	r3, #60	; 0x3c
 80042fe:	3304      	adds	r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4a26      	ldr	r2, [pc, #152]	; (80043a0 <USB_EP0_OutStart+0xb8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d90a      	bls.n	8004322 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431c:	d101      	bne.n	8004322 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e037      	b.n	8004392 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	2300      	movs	r3, #0
 800432c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004350:	f043 0318 	orr.w	r3, r3, #24
 8004354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004364:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004368:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800436a:	7afb      	ldrb	r3, [r7, #11]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10f      	bne.n	8004390 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800438e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	4f54300a 	.word	0x4f54300a

080043a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3301      	adds	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <USB_CoreReset+0x60>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e01a      	b.n	80043f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	daf3      	bge.n	80043b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <USB_CoreReset+0x60>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e006      	b.n	80043f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d0f1      	beq.n	80043d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	00030d40 	.word	0x00030d40

08004408 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004414:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004418:	f002 f8fc 	bl	8006614 <USBD_static_malloc>
 800441c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800442c:	2302      	movs	r3, #2
 800442e:	e066      	b.n	80044fe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7c1b      	ldrb	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d119      	bne.n	8004474 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004444:	2202      	movs	r2, #2
 8004446:	2181      	movs	r1, #129	; 0x81
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 ffc0 	bl	80063ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004458:	2202      	movs	r2, #2
 800445a:	2101      	movs	r1, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f001 ffb6 	bl	80063ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2210      	movs	r2, #16
 800446e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004472:	e016      	b.n	80044a2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004474:	2340      	movs	r3, #64	; 0x40
 8004476:	2202      	movs	r2, #2
 8004478:	2181      	movs	r1, #129	; 0x81
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f001 ffa7 	bl	80063ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004486:	2340      	movs	r3, #64	; 0x40
 8004488:	2202      	movs	r2, #2
 800448a:	2101      	movs	r1, #1
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 ff9e 	bl	80063ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2210      	movs	r2, #16
 800449e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80044a2:	2308      	movs	r3, #8
 80044a4:	2203      	movs	r2, #3
 80044a6:	2182      	movs	r1, #130	; 0x82
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f001 ff90 	bl	80063ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7c1b      	ldrb	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e2:	2101      	movs	r1, #1
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f002 f861 	bl	80065ac <USBD_LL_PrepareReceive>
 80044ea:	e007      	b.n	80044fc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044f2:	2340      	movs	r3, #64	; 0x40
 80044f4:	2101      	movs	r1, #1
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f002 f858 	bl	80065ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004512:	2181      	movs	r1, #129	; 0x81
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f001 ff80 	bl	800641a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 ff79 	bl	800641a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004530:	2182      	movs	r1, #130	; 0x82
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 ff71 	bl	800641a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00e      	beq.n	8004570 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004562:	4618      	mov	r0, r3
 8004564:	f002 f864 	bl	8006630 <USBD_static_free>
    pdev->pClassData = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800458c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0af      	b.n	8004704 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d03f      	beq.n	8004630 <USBD_CDC_Setup+0xb4>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	f040 809f 	bne.w	80046f4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	88db      	ldrh	r3, [r3, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02e      	beq.n	800461c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da16      	bge.n	80045f6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80045d4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	88d2      	ldrh	r2, [r2, #6]
 80045da:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	88db      	ldrh	r3, [r3, #6]
 80045e0:	2b07      	cmp	r3, #7
 80045e2:	bf28      	it	cs
 80045e4:	2307      	movcs	r3, #7
 80045e6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	89fa      	ldrh	r2, [r7, #14]
 80045ec:	4619      	mov	r1, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 fae9 	bl	8005bc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80045f4:	e085      	b.n	8004702 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	785a      	ldrb	r2, [r3, #1]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	88db      	ldrh	r3, [r3, #6]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	88db      	ldrh	r3, [r3, #6]
 8004612:	461a      	mov	r2, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 fb02 	bl	8005c1e <USBD_CtlPrepareRx>
      break;
 800461a:	e072      	b.n	8004702 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	7850      	ldrb	r0, [r2, #1]
 8004628:	2200      	movs	r2, #0
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	4798      	blx	r3
      break;
 800462e:	e068      	b.n	8004702 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b0b      	cmp	r3, #11
 8004636:	d852      	bhi.n	80046de <USBD_CDC_Setup+0x162>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <USBD_CDC_Setup+0xc4>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004671 	.word	0x08004671
 8004644:	080046ed 	.word	0x080046ed
 8004648:	080046df 	.word	0x080046df
 800464c:	080046df 	.word	0x080046df
 8004650:	080046df 	.word	0x080046df
 8004654:	080046df 	.word	0x080046df
 8004658:	080046df 	.word	0x080046df
 800465c:	080046df 	.word	0x080046df
 8004660:	080046df 	.word	0x080046df
 8004664:	080046df 	.word	0x080046df
 8004668:	0800469b 	.word	0x0800469b
 800466c:	080046c5 	.word	0x080046c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b03      	cmp	r3, #3
 800467a:	d107      	bne.n	800468c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800467c:	f107 030a 	add.w	r3, r7, #10
 8004680:	2202      	movs	r2, #2
 8004682:	4619      	mov	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f001 fa9e 	bl	8005bc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800468a:	e032      	b.n	80046f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f001 fa28 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004694:	2303      	movs	r3, #3
 8004696:	75fb      	strb	r3, [r7, #23]
          break;
 8004698:	e02b      	b.n	80046f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d107      	bne.n	80046b6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80046a6:	f107 030d 	add.w	r3, r7, #13
 80046aa:	2201      	movs	r2, #1
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 fa89 	bl	8005bc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046b4:	e01d      	b.n	80046f2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fa13 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 80046be:	2303      	movs	r3, #3
 80046c0:	75fb      	strb	r3, [r7, #23]
          break;
 80046c2:	e016      	b.n	80046f2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d00f      	beq.n	80046f0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f001 fa06 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 80046d8:	2303      	movs	r3, #3
 80046da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80046dc:	e008      	b.n	80046f0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f001 f9ff 	bl	8005ae4 <USBD_CtlError>
          ret = USBD_FAIL;
 80046e6:	2303      	movs	r3, #3
 80046e8:	75fb      	strb	r3, [r7, #23]
          break;
 80046ea:	e002      	b.n	80046f2 <USBD_CDC_Setup+0x176>
          break;
 80046ec:	bf00      	nop
 80046ee:	e008      	b.n	8004702 <USBD_CDC_Setup+0x186>
          break;
 80046f0:	bf00      	nop
      }
      break;
 80046f2:	e006      	b.n	8004702 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 f9f4 	bl	8005ae4 <USBD_CtlError>
      ret = USBD_FAIL;
 80046fc:	2303      	movs	r3, #3
 80046fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004700:	bf00      	nop
  }

  return (uint8_t)ret;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800471e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800472a:	2303      	movs	r3, #3
 800472c:	e04f      	b.n	80047ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004734:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	3318      	adds	r3, #24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d029      	beq.n	80047a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3318      	adds	r3, #24
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	78f9      	ldrb	r1, [r7, #3]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	460b      	mov	r3, r1
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	1a5b      	subs	r3, r3, r1
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4403      	add	r3, r0
 800476c:	3344      	adds	r3, #68	; 0x44
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	fbb2 f1f3 	udiv	r1, r2, r3
 8004774:	fb03 f301 	mul.w	r3, r3, r1
 8004778:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d110      	bne.n	80047a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	3318      	adds	r3, #24
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004792:	78f9      	ldrb	r1, [r7, #3]
 8004794:	2300      	movs	r3, #0
 8004796:	2200      	movs	r2, #0
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fee6 	bl	800656a <USBD_LL_Transmit>
 800479e:	e015      	b.n	80047cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e015      	b.n	8004824 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f001 fef6 	bl	80065ee <USBD_LL_GetRxDataSize>
 8004802:	4602      	mov	r2, r0
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800481e:	4611      	mov	r1, r2
 8004820:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800483a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004842:	2303      	movs	r3, #3
 8004844:	e01b      	b.n	800487e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <USBD_CDC_EP0_RxReady+0x50>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004856:	2bff      	cmp	r3, #255	; 0xff
 8004858:	d010      	beq.n	800487c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004868:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004870:	b292      	uxth	r2, r2
 8004872:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2243      	movs	r2, #67	; 0x43
 8004894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	20000094 	.word	0x20000094

080048a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2243      	movs	r2, #67	; 0x43
 80048b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80048b6:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000050 	.word	0x20000050

080048c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2243      	movs	r2, #67	; 0x43
 80048d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80048d6:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200000d8 	.word	0x200000d8

080048e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	220a      	movs	r2, #10
 80048f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80048f6:	4b03      	ldr	r3, [pc, #12]	; (8004904 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	2000000c 	.word	0x2000000c

08004908 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004918:	2303      	movs	r3, #3
 800491a:	e004      	b.n	8004926 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004932:	b480      	push	{r7}
 8004934:	b087      	sub	sp, #28
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004944:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800494c:	2303      	movs	r3, #3
 800494e:	e008      	b.n	8004962 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800497e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004986:	2303      	movs	r3, #3
 8004988:	e004      	b.n	8004994 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e016      	b.n	80049ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7c1b      	ldrb	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d0:	2101      	movs	r1, #1
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 fdea 	bl	80065ac <USBD_LL_PrepareReceive>
 80049d8:	e007      	b.n	80049ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049e0:	2340      	movs	r3, #64	; 0x40
 80049e2:	2101      	movs	r1, #1
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fde1 	bl	80065ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e01f      	b.n	8004a4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	79fa      	ldrb	r2, [r7, #7]
 8004a3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f001 fc5d 	bl	8006300 <USBD_LL_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e016      	b.n	8004a9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	f107 020e 	add.w	r2, r7, #14
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
 8004a90:	4602      	mov	r2, r0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fc74 	bl	8006398 <USBD_LL_Start>
 8004ab0:	4603      	mov	r3, r0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004adc:	2303      	movs	r3, #3
 8004ade:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	4611      	mov	r1, r2
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
  }

  return USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ff90 	bl	8005a70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d01a      	beq.n	8004baa <USBD_LL_SetupStage+0x72>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d822      	bhi.n	8004bbe <USBD_LL_SetupStage+0x86>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <USBD_LL_SetupStage+0x4a>
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d00a      	beq.n	8004b96 <USBD_LL_SetupStage+0x5e>
 8004b80:	e01d      	b.n	8004bbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa62 	bl	8005054 <USBD_StdDevReq>
 8004b90:	4603      	mov	r3, r0
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e020      	b.n	8004bd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fac6 	bl	8005130 <USBD_StdItfReq>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e016      	b.n	8004bd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fb05 	bl	80051c2 <USBD_StdEPReq>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbc:	e00c      	b.n	8004bd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fc43 	bl	8006458 <USBD_LL_StallEP>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd6:	bf00      	nop
  }

  return ret;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	460b      	mov	r3, r1
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d138      	bne.n	8004c68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004bfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d14a      	bne.n	8004c9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d913      	bls.n	8004c3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	1ad2      	subs	r2, r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	bf28      	it	cs
 8004c2e:	4613      	movcs	r3, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 f80f 	bl	8005c58 <USBD_CtlContinueRx>
 8004c3a:	e030      	b.n	8004c9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d10b      	bne.n	8004c60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f001 f80a 	bl	8005c7a <USBD_CtlSendStatus>
 8004c66:	e01a      	b.n	8004c9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d114      	bne.n	8004c9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00e      	beq.n	8004c9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	7afa      	ldrb	r2, [r7, #11]
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	4798      	blx	r3
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004c94:	7dfb      	ldrb	r3, [r7, #23]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	e000      	b.n	8004ca0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cb6:	7afb      	ldrb	r3, [r7, #11]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d16b      	bne.n	8004d94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d156      	bne.n	8004d7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d914      	bls.n	8004d02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 ff84 	bl	8005bfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fc56 	bl	80065ac <USBD_LL_PrepareReceive>
 8004d00:	e03b      	b.n	8004d7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d11c      	bne.n	8004d48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d316      	bcc.n	8004d48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d20f      	bcs.n	8004d48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 ff65 	bl	8005bfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f001 fc33 	bl	80065ac <USBD_LL_PrepareReceive>
 8004d46:	e018      	b.n	8004d7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d10b      	bne.n	8004d6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f001 fb72 	bl	8006458 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 ff93 	bl	8005ca0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d122      	bne.n	8004dca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff fe98 	bl	8004aba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004d92:	e01a      	b.n	8004dca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d114      	bne.n	8004dca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	7afa      	ldrb	r2, [r7, #11]
 8004db6:	4611      	mov	r1, r2
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	4798      	blx	r3
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	e000      	b.n	8004dcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e02f      	b.n	8004e68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6852      	ldr	r2, [r2, #4]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	2200      	movs	r2, #0
 8004e36:	2100      	movs	r1, #0
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 fac8 	bl	80063ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2240      	movs	r2, #64	; 0x40
 8004e4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	2200      	movs	r2, #0
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 faba 	bl	80063ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d106      	bne.n	8004ede <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e012      	b.n	8004f28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d10b      	bne.n	8004f26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e014      	b.n	8004f74 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d10d      	bne.n	8004f72 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d007      	beq.n	8004f72 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e014      	b.n	8004fc0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d10d      	bne.n	8004fbe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d007      	beq.n	8004fbe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6852      	ldr	r2, [r2, #4]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	4611      	mov	r1, r2
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
  }

  return USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005016:	b480      	push	{r7}
 8005018:	b087      	sub	sp, #28
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	3301      	adds	r3, #1
 800502c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005034:	8a3b      	ldrh	r3, [r7, #16]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	b21a      	sxth	r2, r3
 800503a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800503e:	4313      	orrs	r3, r2
 8005040:	b21b      	sxth	r3, r3
 8005042:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005044:	89fb      	ldrh	r3, [r7, #14]
}
 8005046:	4618      	mov	r0, r3
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d005      	beq.n	800507a <USBD_StdDevReq+0x26>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d853      	bhi.n	800511a <USBD_StdDevReq+0xc6>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <USBD_StdDevReq+0x3a>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d14f      	bne.n	800511a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
 8005088:	4603      	mov	r3, r0
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e04a      	b.n	8005124 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	785b      	ldrb	r3, [r3, #1]
 8005092:	2b09      	cmp	r3, #9
 8005094:	d83b      	bhi.n	800510e <USBD_StdDevReq+0xba>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <USBD_StdDevReq+0x48>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	08005105 	.word	0x08005105
 80050a4:	0800510f 	.word	0x0800510f
 80050a8:	080050fb 	.word	0x080050fb
 80050ac:	0800510f 	.word	0x0800510f
 80050b0:	080050cf 	.word	0x080050cf
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	0800510f 	.word	0x0800510f
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050d9 	.word	0x080050d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9de 	bl	8005488 <USBD_GetDescriptor>
          break;
 80050cc:	e024      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fb43 	bl	800575c <USBD_SetAddress>
          break;
 80050d6:	e01f      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fb82 	bl	80057e4 <USBD_SetConfig>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
          break;
 80050e4:	e018      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fc21 	bl	8005930 <USBD_GetConfig>
          break;
 80050ee:	e013      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fc52 	bl	800599c <USBD_GetStatus>
          break;
 80050f8:	e00e      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fc81 	bl	8005a04 <USBD_SetFeature>
          break;
 8005102:	e009      	b.n	8005118 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fc90 	bl	8005a2c <USBD_ClrFeature>
          break;
 800510c:	e004      	b.n	8005118 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fce7 	bl	8005ae4 <USBD_CtlError>
          break;
 8005116:	bf00      	nop
      }
      break;
 8005118:	e004      	b.n	8005124 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800511a:	6839      	ldr	r1, [r7, #0]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fce1 	bl	8005ae4 <USBD_CtlError>
      break;
 8005122:	bf00      	nop
  }

  return ret;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop

08005130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d005      	beq.n	8005156 <USBD_StdItfReq+0x26>
 800514a:	2b40      	cmp	r3, #64	; 0x40
 800514c:	d82f      	bhi.n	80051ae <USBD_StdItfReq+0x7e>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <USBD_StdItfReq+0x26>
 8005152:	2b20      	cmp	r3, #32
 8005154:	d12b      	bne.n	80051ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800515c:	b2db      	uxtb	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	2b02      	cmp	r3, #2
 8005162:	d81d      	bhi.n	80051a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	889b      	ldrh	r3, [r3, #4]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d813      	bhi.n	8005196 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
 800517c:	4603      	mov	r3, r0
 800517e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	88db      	ldrh	r3, [r3, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d110      	bne.n	80051aa <USBD_StdItfReq+0x7a>
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fd73 	bl	8005c7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005194:	e009      	b.n	80051aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fca3 	bl	8005ae4 <USBD_CtlError>
          break;
 800519e:	e004      	b.n	80051aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fc9e 	bl	8005ae4 <USBD_CtlError>
          break;
 80051a8:	e000      	b.n	80051ac <USBD_StdItfReq+0x7c>
          break;
 80051aa:	bf00      	nop
      }
      break;
 80051ac:	e004      	b.n	80051b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fc97 	bl	8005ae4 <USBD_CtlError>
      break;
 80051b6:	bf00      	nop
  }

  return ret;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	889b      	ldrh	r3, [r3, #4]
 80051d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d007      	beq.n	80051f2 <USBD_StdEPReq+0x30>
 80051e2:	2b40      	cmp	r3, #64	; 0x40
 80051e4:	f200 8145 	bhi.w	8005472 <USBD_StdEPReq+0x2b0>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <USBD_StdEPReq+0x44>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	f040 8140 	bne.w	8005472 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]
      break;
 8005204:	e13a      	b.n	800547c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b03      	cmp	r3, #3
 800520c:	d007      	beq.n	800521e <USBD_StdEPReq+0x5c>
 800520e:	2b03      	cmp	r3, #3
 8005210:	f300 8129 	bgt.w	8005466 <USBD_StdEPReq+0x2a4>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d07f      	beq.n	8005318 <USBD_StdEPReq+0x156>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d03c      	beq.n	8005296 <USBD_StdEPReq+0xd4>
 800521c:	e123      	b.n	8005466 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d002      	beq.n	8005230 <USBD_StdEPReq+0x6e>
 800522a:	2b03      	cmp	r3, #3
 800522c:	d016      	beq.n	800525c <USBD_StdEPReq+0x9a>
 800522e:	e02c      	b.n	800528a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <USBD_StdEPReq+0x90>
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d00a      	beq.n	8005252 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f001 f909 	bl	8006458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 f905 	bl	8006458 <USBD_LL_StallEP>
 800524e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005250:	e020      	b.n	8005294 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fc45 	bl	8005ae4 <USBD_CtlError>
              break;
 800525a:	e01b      	b.n	8005294 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	885b      	ldrh	r3, [r3, #2]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10e      	bne.n	8005282 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00b      	beq.n	8005282 <USBD_StdEPReq+0xc0>
 800526a:	7bbb      	ldrb	r3, [r7, #14]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d008      	beq.n	8005282 <USBD_StdEPReq+0xc0>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	88db      	ldrh	r3, [r3, #6]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 f8eb 	bl	8006458 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fcf9 	bl	8005c7a <USBD_CtlSendStatus>

              break;
 8005288:	e004      	b.n	8005294 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fc29 	bl	8005ae4 <USBD_CtlError>
              break;
 8005292:	bf00      	nop
          }
          break;
 8005294:	e0ec      	b.n	8005470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d002      	beq.n	80052a8 <USBD_StdEPReq+0xe6>
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d016      	beq.n	80052d4 <USBD_StdEPReq+0x112>
 80052a6:	e030      	b.n	800530a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <USBD_StdEPReq+0x108>
 80052ae:	7bbb      	ldrb	r3, [r7, #14]
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d00a      	beq.n	80052ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 f8cd 	bl	8006458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052be:	2180      	movs	r1, #128	; 0x80
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f8c9 	bl	8006458 <USBD_LL_StallEP>
 80052c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052c8:	e025      	b.n	8005316 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc09 	bl	8005ae4 <USBD_CtlError>
              break;
 80052d2:	e020      	b.n	8005316 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11b      	bne.n	8005314 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	4619      	mov	r1, r3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f8d3 	bl	8006496 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fcc2 	bl	8005c7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005308:	e004      	b.n	8005314 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fbe9 	bl	8005ae4 <USBD_CtlError>
              break;
 8005312:	e000      	b.n	8005316 <USBD_StdEPReq+0x154>
              break;
 8005314:	bf00      	nop
          }
          break;
 8005316:	e0ab      	b.n	8005470 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d002      	beq.n	800532a <USBD_StdEPReq+0x168>
 8005324:	2b03      	cmp	r3, #3
 8005326:	d032      	beq.n	800538e <USBD_StdEPReq+0x1cc>
 8005328:	e097      	b.n	800545a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800532a:	7bbb      	ldrb	r3, [r7, #14]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <USBD_StdEPReq+0x17e>
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d004      	beq.n	8005340 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fbd3 	bl	8005ae4 <USBD_CtlError>
                break;
 800533e:	e091      	b.n	8005464 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005344:	2b00      	cmp	r3, #0
 8005346:	da0b      	bge.n	8005360 <USBD_StdEPReq+0x19e>
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	3310      	adds	r3, #16
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	3304      	adds	r3, #4
 800535e:	e00b      	b.n	8005378 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2202      	movs	r2, #2
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fc1d 	bl	8005bc6 <USBD_CtlSendData>
              break;
 800538c:	e06a      	b.n	8005464 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800538e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005392:	2b00      	cmp	r3, #0
 8005394:	da11      	bge.n	80053ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	f003 020f 	and.w	r2, r3, #15
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3324      	adds	r3, #36	; 0x24
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d117      	bne.n	80053e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb96 	bl	8005ae4 <USBD_CtlError>
                  break;
 80053b8:	e054      	b.n	8005464 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fb83 	bl	8005ae4 <USBD_CtlError>
                  break;
 80053de:	e041      	b.n	8005464 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	da0b      	bge.n	8005400 <USBD_StdEPReq+0x23e>
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	3310      	adds	r3, #16
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	4413      	add	r3, r2
 80053fc:	3304      	adds	r3, #4
 80053fe:	e00b      	b.n	8005418 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	3304      	adds	r3, #4
 8005418:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <USBD_StdEPReq+0x264>
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d103      	bne.n	800542e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e00e      	b.n	800544c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 f84e 	bl	80064d4 <USBD_LL_IsStallEP>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e002      	b.n	800544c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2202      	movs	r2, #2
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fbb7 	bl	8005bc6 <USBD_CtlSendData>
              break;
 8005458:	e004      	b.n	8005464 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fb41 	bl	8005ae4 <USBD_CtlError>
              break;
 8005462:	bf00      	nop
          }
          break;
 8005464:	e004      	b.n	8005470 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb3b 	bl	8005ae4 <USBD_CtlError>
          break;
 800546e:	bf00      	nop
      }
      break;
 8005470:	e004      	b.n	800547c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb35 	bl	8005ae4 <USBD_CtlError>
      break;
 800547a:	bf00      	nop
  }

  return ret;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	885b      	ldrh	r3, [r3, #2]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	f200 8128 	bhi.w	80056fe <USBD_GetDescriptor+0x276>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <USBD_GetDescriptor+0x2c>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054e9 	.word	0x080054e9
 80054bc:	08005529 	.word	0x08005529
 80054c0:	080056ff 	.word	0x080056ff
 80054c4:	080056ff 	.word	0x080056ff
 80054c8:	0800569f 	.word	0x0800569f
 80054cc:	080056cb 	.word	0x080056cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	7c12      	ldrb	r2, [r2, #16]
 80054dc:	f107 0108 	add.w	r1, r7, #8
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
 80054e4:	60f8      	str	r0, [r7, #12]
      break;
 80054e6:	e112      	b.n	800570e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	7c1b      	ldrb	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10d      	bne.n	800550c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f107 0208 	add.w	r2, r7, #8
 80054fc:	4610      	mov	r0, r2
 80054fe:	4798      	blx	r3
 8005500:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3301      	adds	r3, #1
 8005506:	2202      	movs	r2, #2
 8005508:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800550a:	e100      	b.n	800570e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f107 0208 	add.w	r2, r7, #8
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	2202      	movs	r2, #2
 8005524:	701a      	strb	r2, [r3, #0]
      break;
 8005526:	e0f2      	b.n	800570e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	885b      	ldrh	r3, [r3, #2]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b05      	cmp	r3, #5
 8005530:	f200 80ac 	bhi.w	800568c <USBD_GetDescriptor+0x204>
 8005534:	a201      	add	r2, pc, #4	; (adr r2, 800553c <USBD_GetDescriptor+0xb4>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005555 	.word	0x08005555
 8005540:	08005589 	.word	0x08005589
 8005544:	080055bd 	.word	0x080055bd
 8005548:	080055f1 	.word	0x080055f1
 800554c:	08005625 	.word	0x08005625
 8005550:	08005659 	.word	0x08005659
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	7c12      	ldrb	r2, [r2, #16]
 800556c:	f107 0108 	add.w	r1, r7, #8
 8005570:	4610      	mov	r0, r2
 8005572:	4798      	blx	r3
 8005574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005576:	e091      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fab2 	bl	8005ae4 <USBD_CtlError>
            err++;
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	3301      	adds	r3, #1
 8005584:	72fb      	strb	r3, [r7, #11]
          break;
 8005586:	e089      	b.n	800569c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	7c12      	ldrb	r2, [r2, #16]
 80055a0:	f107 0108 	add.w	r1, r7, #8
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
 80055a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055aa:	e077      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa98 	bl	8005ae4 <USBD_CtlError>
            err++;
 80055b4:	7afb      	ldrb	r3, [r7, #11]
 80055b6:	3301      	adds	r3, #1
 80055b8:	72fb      	strb	r3, [r7, #11]
          break;
 80055ba:	e06f      	b.n	800569c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	7c12      	ldrb	r2, [r2, #16]
 80055d4:	f107 0108 	add.w	r1, r7, #8
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
 80055dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055de:	e05d      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa7e 	bl	8005ae4 <USBD_CtlError>
            err++;
 80055e8:	7afb      	ldrb	r3, [r7, #11]
 80055ea:	3301      	adds	r3, #1
 80055ec:	72fb      	strb	r3, [r7, #11]
          break;
 80055ee:	e055      	b.n	800569c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	7c12      	ldrb	r2, [r2, #16]
 8005608:	f107 0108 	add.w	r1, r7, #8
 800560c:	4610      	mov	r0, r2
 800560e:	4798      	blx	r3
 8005610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005612:	e043      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa64 	bl	8005ae4 <USBD_CtlError>
            err++;
 800561c:	7afb      	ldrb	r3, [r7, #11]
 800561e:	3301      	adds	r3, #1
 8005620:	72fb      	strb	r3, [r7, #11]
          break;
 8005622:	e03b      	b.n	800569c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	7c12      	ldrb	r2, [r2, #16]
 800563c:	f107 0108 	add.w	r1, r7, #8
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005646:	e029      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa4a 	bl	8005ae4 <USBD_CtlError>
            err++;
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	3301      	adds	r3, #1
 8005654:	72fb      	strb	r3, [r7, #11]
          break;
 8005656:	e021      	b.n	800569c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	7c12      	ldrb	r2, [r2, #16]
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567a:	e00f      	b.n	800569c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa30 	bl	8005ae4 <USBD_CtlError>
            err++;
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	3301      	adds	r3, #1
 8005688:	72fb      	strb	r3, [r7, #11]
          break;
 800568a:	e007      	b.n	800569c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa28 	bl	8005ae4 <USBD_CtlError>
          err++;
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	3301      	adds	r3, #1
 8005698:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800569a:	bf00      	nop
      }
      break;
 800569c:	e037      	b.n	800570e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7c1b      	ldrb	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	f107 0208 	add.w	r2, r7, #8
 80056b2:	4610      	mov	r0, r2
 80056b4:	4798      	blx	r3
 80056b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056b8:	e029      	b.n	800570e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fa11 	bl	8005ae4 <USBD_CtlError>
        err++;
 80056c2:	7afb      	ldrb	r3, [r7, #11]
 80056c4:	3301      	adds	r3, #1
 80056c6:	72fb      	strb	r3, [r7, #11]
      break;
 80056c8:	e021      	b.n	800570e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	7c1b      	ldrb	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10d      	bne.n	80056ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	f107 0208 	add.w	r2, r7, #8
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
 80056e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	2207      	movs	r2, #7
 80056ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056ec:	e00f      	b.n	800570e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9f7 	bl	8005ae4 <USBD_CtlError>
        err++;
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	3301      	adds	r3, #1
 80056fa:	72fb      	strb	r3, [r7, #11]
      break;
 80056fc:	e007      	b.n	800570e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f9ef 	bl	8005ae4 <USBD_CtlError>
      err++;
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	3301      	adds	r3, #1
 800570a:	72fb      	strb	r3, [r7, #11]
      break;
 800570c:	bf00      	nop
  }

  if (err != 0U)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11e      	bne.n	8005752 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	88db      	ldrh	r3, [r3, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	88da      	ldrh	r2, [r3, #6]
 8005726:	893b      	ldrh	r3, [r7, #8]
 8005728:	4293      	cmp	r3, r2
 800572a:	bf28      	it	cs
 800572c:	4613      	movcs	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	461a      	mov	r2, r3
 8005736:	68f9      	ldr	r1, [r7, #12]
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fa44 	bl	8005bc6 <USBD_CtlSendData>
 800573e:	e009      	b.n	8005754 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9ce 	bl	8005ae4 <USBD_CtlError>
 8005748:	e004      	b.n	8005754 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa95 	bl	8005c7a <USBD_CtlSendStatus>
 8005750:	e000      	b.n	8005754 <USBD_GetDescriptor+0x2cc>
    return;
 8005752:	bf00      	nop
  }
}
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop

0800575c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	889b      	ldrh	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d131      	bne.n	80057d2 <USBD_SetAddress+0x76>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	88db      	ldrh	r3, [r3, #6]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d12d      	bne.n	80057d2 <USBD_SetAddress+0x76>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	885b      	ldrh	r3, [r3, #2]
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d829      	bhi.n	80057d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	885b      	ldrh	r3, [r3, #2]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005788:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b03      	cmp	r3, #3
 8005794:	d104      	bne.n	80057a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f9a3 	bl	8005ae4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579e:	e01d      	b.n	80057dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 febd 	bl	800652c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fa61 	bl	8005c7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c6:	e009      	b.n	80057dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d0:	e004      	b.n	80057dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f985 	bl	8005ae4 <USBD_CtlError>
  }
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	885b      	ldrh	r3, [r3, #2]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	4b4c      	ldr	r3, [pc, #304]	; (800592c <USBD_SetConfig+0x148>)
 80057fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80057fc:	4b4b      	ldr	r3, [pc, #300]	; (800592c <USBD_SetConfig+0x148>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d905      	bls.n	8005810 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f96c 	bl	8005ae4 <USBD_CtlError>
    return USBD_FAIL;
 800580c:	2303      	movs	r3, #3
 800580e:	e088      	b.n	8005922 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d002      	beq.n	8005822 <USBD_SetConfig+0x3e>
 800581c:	2b03      	cmp	r3, #3
 800581e:	d025      	beq.n	800586c <USBD_SetConfig+0x88>
 8005820:	e071      	b.n	8005906 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005822:	4b42      	ldr	r3, [pc, #264]	; (800592c <USBD_SetConfig+0x148>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01c      	beq.n	8005864 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800582a:	4b40      	ldr	r3, [pc, #256]	; (800592c <USBD_SetConfig+0x148>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005834:	4b3d      	ldr	r3, [pc, #244]	; (800592c <USBD_SetConfig+0x148>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff f948 	bl	8004ad0 <USBD_SetClassConfig>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f949 	bl	8005ae4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005852:	e065      	b.n	8005920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa10 	bl	8005c7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2203      	movs	r2, #3
 800585e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005862:	e05d      	b.n	8005920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fa08 	bl	8005c7a <USBD_CtlSendStatus>
      break;
 800586a:	e059      	b.n	8005920 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800586c:	4b2f      	ldr	r3, [pc, #188]	; (800592c <USBD_SetConfig+0x148>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d112      	bne.n	800589a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800587c:	4b2b      	ldr	r3, [pc, #172]	; (800592c <USBD_SetConfig+0x148>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <USBD_SetConfig+0x148>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff f93b 	bl	8004b08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9f1 	bl	8005c7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005898:	e042      	b.n	8005920 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <USBD_SetConfig+0x148>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d02a      	beq.n	80058fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff f929 	bl	8004b08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <USBD_SetConfig+0x148>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058c0:	4b1a      	ldr	r3, [pc, #104]	; (800592c <USBD_SetConfig+0x148>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4619      	mov	r1, r3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff f902 	bl	8004ad0 <USBD_SetClassConfig>
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00f      	beq.n	80058f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f903 	bl	8005ae4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff f90e 	bl	8004b08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80058f4:	e014      	b.n	8005920 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9bf 	bl	8005c7a <USBD_CtlSendStatus>
      break;
 80058fc:	e010      	b.n	8005920 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9bb 	bl	8005c7a <USBD_CtlSendStatus>
      break;
 8005904:	e00c      	b.n	8005920 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f8eb 	bl	8005ae4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <USBD_SetConfig+0x148>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff f8f7 	bl	8004b08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800591a:	2303      	movs	r3, #3
 800591c:	73fb      	strb	r3, [r7, #15]
      break;
 800591e:	bf00      	nop
  }

  return ret;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	2000019c 	.word	0x2000019c

08005930 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	88db      	ldrh	r3, [r3, #6]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d004      	beq.n	800594c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8cd 	bl	8005ae4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800594a:	e023      	b.n	8005994 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	dc02      	bgt.n	800595e <USBD_GetConfig+0x2e>
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc03      	bgt.n	8005964 <USBD_GetConfig+0x34>
 800595c:	e015      	b.n	800598a <USBD_GetConfig+0x5a>
 800595e:	2b03      	cmp	r3, #3
 8005960:	d00b      	beq.n	800597a <USBD_GetConfig+0x4a>
 8005962:	e012      	b.n	800598a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3308      	adds	r3, #8
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f927 	bl	8005bc6 <USBD_CtlSendData>
        break;
 8005978:	e00c      	b.n	8005994 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f91f 	bl	8005bc6 <USBD_CtlSendData>
        break;
 8005988:	e004      	b.n	8005994 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8a9 	bl	8005ae4 <USBD_CtlError>
        break;
 8005992:	bf00      	nop
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d81e      	bhi.n	80059f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	88db      	ldrh	r3, [r3, #6]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d004      	beq.n	80059c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f890 	bl	8005ae4 <USBD_CtlError>
        break;
 80059c4:	e01a      	b.n	80059fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	330c      	adds	r3, #12
 80059e6:	2202      	movs	r2, #2
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f8eb 	bl	8005bc6 <USBD_CtlSendData>
      break;
 80059f0:	e004      	b.n	80059fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f875 	bl	8005ae4 <USBD_CtlError>
      break;
 80059fa:	bf00      	nop
  }
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d106      	bne.n	8005a24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f92b 	bl	8005c7a <USBD_CtlSendStatus>
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d80b      	bhi.n	8005a5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	885b      	ldrh	r3, [r3, #2]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d10c      	bne.n	8005a66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f910 	bl	8005c7a <USBD_CtlSendStatus>
      }
      break;
 8005a5a:	e004      	b.n	8005a66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005a5c:	6839      	ldr	r1, [r7, #0]
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f840 	bl	8005ae4 <USBD_CtlError>
      break;
 8005a64:	e000      	b.n	8005a68 <USBD_ClrFeature+0x3c>
      break;
 8005a66:	bf00      	nop
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	781a      	ldrb	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff fabb 	bl	8005016 <SWAPBYTE>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff faae 	bl	8005016 <SWAPBYTE>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff faa1 	bl	8005016 <SWAPBYTE>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	80da      	strh	r2, [r3, #6]
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fcb1 	bl	8006458 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fcad 	bl	8006458 <USBD_LL_StallEP>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d036      	beq.n	8005b8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b20:	6938      	ldr	r0, [r7, #16]
 8005b22:	f000 f836 	bl	8005b92 <USBD_GetLen>
 8005b26:	4603      	mov	r3, r0
 8005b28:	3301      	adds	r3, #1
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	7812      	ldrb	r2, [r2, #0]
 8005b3e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	3301      	adds	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	3301      	adds	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005b56:	e013      	b.n	8005b80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
    idx++;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
    idx++;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e7      	bne.n	8005b58 <USBD_GetString+0x52>
 8005b88:	e000      	b.n	8005b8c <USBD_GetString+0x86>
    return;
 8005b8a:	bf00      	nop
  }
}
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005ba2:	e005      	b.n	8005bb0 <USBD_GetLen+0x1e>
  {
    len++;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f5      	bne.n	8005ba4 <USBD_GetLen+0x12>
  }

  return len;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	2100      	movs	r1, #0
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fcbc 	bl	800656a <USBD_LL_Transmit>

  return USBD_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fcab 	bl	800656a <USBD_LL_Transmit>

  return USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	2100      	movs	r1, #0
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fcaf 	bl	80065ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fc9e 	bl	80065ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2204      	movs	r2, #4
 8005c86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fc6a 	bl	800656a <USBD_LL_Transmit>

  return USBD_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2205      	movs	r2, #5
 8005cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc78 	bl	80065ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	4912      	ldr	r1, [pc, #72]	; (8005d18 <MX_USB_DEVICE_Init+0x50>)
 8005cd0:	4812      	ldr	r0, [pc, #72]	; (8005d1c <MX_USB_DEVICE_Init+0x54>)
 8005cd2:	f7fe fe8f 	bl	80049f4 <USBD_Init>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005cdc:	f7fa fce0 	bl	80006a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ce0:	490f      	ldr	r1, [pc, #60]	; (8005d20 <MX_USB_DEVICE_Init+0x58>)
 8005ce2:	480e      	ldr	r0, [pc, #56]	; (8005d1c <MX_USB_DEVICE_Init+0x54>)
 8005ce4:	f7fe feb6 	bl	8004a54 <USBD_RegisterClass>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005cee:	f7fa fcd7 	bl	80006a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005cf2:	490c      	ldr	r1, [pc, #48]	; (8005d24 <MX_USB_DEVICE_Init+0x5c>)
 8005cf4:	4809      	ldr	r0, [pc, #36]	; (8005d1c <MX_USB_DEVICE_Init+0x54>)
 8005cf6:	f7fe fe07 	bl	8004908 <USBD_CDC_RegisterInterface>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005d00:	f7fa fcce 	bl	80006a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d04:	4805      	ldr	r0, [pc, #20]	; (8005d1c <MX_USB_DEVICE_Init+0x54>)
 8005d06:	f7fe fecc 	bl	8004aa2 <USBD_Start>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d10:	f7fa fcc6 	bl	80006a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d14:	bf00      	nop
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000130 	.word	0x20000130
 8005d1c:	20000418 	.word	0x20000418
 8005d20:	20000018 	.word	0x20000018
 8005d24:	2000011c 	.word	0x2000011c

08005d28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4905      	ldr	r1, [pc, #20]	; (8005d44 <CDC_Init_FS+0x1c>)
 8005d30:	4805      	ldr	r0, [pc, #20]	; (8005d48 <CDC_Init_FS+0x20>)
 8005d32:	f7fe fdfe 	bl	8004932 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d36:	4905      	ldr	r1, [pc, #20]	; (8005d4c <CDC_Init_FS+0x24>)
 8005d38:	4803      	ldr	r0, [pc, #12]	; (8005d48 <CDC_Init_FS+0x20>)
 8005d3a:	f7fe fe18 	bl	800496e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000ee8 	.word	0x20000ee8
 8005d48:	20000418 	.word	0x20000418
 8005d4c:	200006e8 	.word	0x200006e8

08005d50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b23      	cmp	r3, #35	; 0x23
 8005d74:	d84a      	bhi.n	8005e0c <CDC_Control_FS+0xac>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <CDC_Control_FS+0x1c>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005e0d 	.word	0x08005e0d
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e0d 	.word	0x08005e0d
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005e0d 	.word	0x08005e0d
 8005d90:	08005e0d 	.word	0x08005e0d
 8005d94:	08005e0d 	.word	0x08005e0d
 8005d98:	08005e0d 	.word	0x08005e0d
 8005d9c:	08005e0d 	.word	0x08005e0d
 8005da0:	08005e0d 	.word	0x08005e0d
 8005da4:	08005e0d 	.word	0x08005e0d
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e0d 	.word	0x08005e0d
 8005db0:	08005e0d 	.word	0x08005e0d
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e0d 	.word	0x08005e0d
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005e0d 	.word	0x08005e0d
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e0d 	.word	0x08005e0d
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e0d 	.word	0x08005e0d
 8005e04:	08005e0d 	.word	0x08005e0d
 8005e08:	08005e0d 	.word	0x08005e0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e0c:	bf00      	nop
  }

  return (USBD_OK);
 8005e0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4805      	ldr	r0, [pc, #20]	; (8005e40 <CDC_Receive_FS+0x24>)
 8005e2a:	f7fe fda0 	bl	800496e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e2e:	4804      	ldr	r0, [pc, #16]	; (8005e40 <CDC_Receive_FS+0x24>)
 8005e30:	f7fe fdb6 	bl	80049a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005e34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000418 	.word	0x20000418

08005e44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2212      	movs	r2, #18
 8005e78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	2000014c 	.word	0x2000014c

08005e8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000160 	.word	0x20000160

08005eb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	6039      	str	r1, [r7, #0]
 8005eba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4907      	ldr	r1, [pc, #28]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ec6:	4808      	ldr	r0, [pc, #32]	; (8005ee8 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ec8:	f7ff fe1d 	bl	8005b06 <USBD_GetString>
 8005ecc:	e004      	b.n	8005ed8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	4904      	ldr	r1, [pc, #16]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ed2:	4805      	ldr	r0, [pc, #20]	; (8005ee8 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ed4:	f7ff fe17 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200016e8 	.word	0x200016e8
 8005ee8:	0800670c 	.word	0x0800670c

08005eec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	4904      	ldr	r1, [pc, #16]	; (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005efc:	4804      	ldr	r0, [pc, #16]	; (8005f10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005efe:	f7ff fe02 	bl	8005b06 <USBD_GetString>
  return USBD_StrDesc;
 8005f02:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200016e8 	.word	0x200016e8
 8005f10:	08006724 	.word	0x08006724

08005f14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	6039      	str	r1, [r7, #0]
 8005f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	221a      	movs	r2, #26
 8005f24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f26:	f000 f843 	bl	8005fb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f2a:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000164 	.word	0x20000164

08005f38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	4907      	ldr	r1, [pc, #28]	; (8005f6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f4e:	4808      	ldr	r0, [pc, #32]	; (8005f70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f50:	f7ff fdd9 	bl	8005b06 <USBD_GetString>
 8005f54:	e004      	b.n	8005f60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	4904      	ldr	r1, [pc, #16]	; (8005f6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f5a:	4805      	ldr	r0, [pc, #20]	; (8005f70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f5c:	f7ff fdd3 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f60:	4b02      	ldr	r3, [pc, #8]	; (8005f6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	200016e8 	.word	0x200016e8
 8005f70:	08006738 	.word	0x08006738

08005f74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f8a:	4808      	ldr	r0, [pc, #32]	; (8005fac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f8c:	f7ff fdbb 	bl	8005b06 <USBD_GetString>
 8005f90:	e004      	b.n	8005f9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	4904      	ldr	r1, [pc, #16]	; (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f96:	4805      	ldr	r0, [pc, #20]	; (8005fac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f98:	f7ff fdb5 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200016e8 	.word	0x200016e8
 8005fac:	08006744 	.word	0x08006744

08005fb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <Get_SerialNum+0x44>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <Get_SerialNum+0x48>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fc2:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <Get_SerialNum+0x4c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005fd6:	2208      	movs	r2, #8
 8005fd8:	4909      	ldr	r1, [pc, #36]	; (8006000 <Get_SerialNum+0x50>)
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f814 	bl	8006008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4908      	ldr	r1, [pc, #32]	; (8006004 <Get_SerialNum+0x54>)
 8005fe4:	68b8      	ldr	r0, [r7, #8]
 8005fe6:	f000 f80f 	bl	8006008 <IntToUnicode>
  }
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	1fff7a10 	.word	0x1fff7a10
 8005ff8:	1fff7a14 	.word	0x1fff7a14
 8005ffc:	1fff7a18 	.word	0x1fff7a18
 8006000:	20000166 	.word	0x20000166
 8006004:	20000176 	.word	0x20000176

08006008 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]
 800601e:	e027      	b.n	8006070 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	0f1b      	lsrs	r3, r3, #28
 8006024:	2b09      	cmp	r3, #9
 8006026:	d80b      	bhi.n	8006040 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	0f1b      	lsrs	r3, r3, #28
 800602c:	b2da      	uxtb	r2, r3
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	4619      	mov	r1, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	440b      	add	r3, r1
 8006038:	3230      	adds	r2, #48	; 0x30
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e00a      	b.n	8006056 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	0f1b      	lsrs	r3, r3, #28
 8006044:	b2da      	uxtb	r2, r3
 8006046:	7dfb      	ldrb	r3, [r7, #23]
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4619      	mov	r1, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	440b      	add	r3, r1
 8006050:	3237      	adds	r2, #55	; 0x37
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	3301      	adds	r3, #1
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	4413      	add	r3, r2
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	3301      	adds	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
 8006070:	7dfa      	ldrb	r2, [r7, #23]
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d3d3      	bcc.n	8006020 <IntToUnicode+0x18>
  }
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 0314 	add.w	r3, r7, #20
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060a8:	d13a      	bne.n	8006120 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6313      	str	r3, [r2, #48]	; 0x30
 80060ba:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060cc:	2302      	movs	r3, #2
 80060ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d4:	2303      	movs	r3, #3
 80060d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060d8:	230a      	movs	r3, #10
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4619      	mov	r1, r3
 80060e2:	4812      	ldr	r0, [pc, #72]	; (800612c <HAL_PCD_MspInit+0xa4>)
 80060e4:	f7fa fd6a 	bl	8000bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	4a0e      	ldr	r2, [pc, #56]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f2:	6353      	str	r3, [r2, #52]	; 0x34
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 80060fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006102:	6453      	str	r3, [r2, #68]	; 0x44
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <HAL_PCD_MspInit+0xa0>)
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006110:	2200      	movs	r2, #0
 8006112:	2100      	movs	r1, #0
 8006114:	2043      	movs	r0, #67	; 0x43
 8006116:	f7fa fd1a 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800611a:	2043      	movs	r0, #67	; 0x43
 800611c:	f7fa fd33 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006120:	bf00      	nop
 8006122:	3728      	adds	r7, #40	; 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40023800 	.word	0x40023800
 800612c:	40020000 	.word	0x40020000

08006130 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7fe fcf6 	bl	8004b38 <USBD_LL_SetupStage>
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	4619      	mov	r1, r3
 800617e:	f7fe fd30 	bl	8004be2 <USBD_LL_DataOutStage>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	3348      	adds	r3, #72	; 0x48
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	4619      	mov	r1, r3
 80061b2:	f7fe fd79 	bl	8004ca8 <USBD_LL_DataInStage>
}
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe fe8d 	bl	8004eec <USBD_LL_SOF>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d001      	beq.n	80061f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80061ee:	f7fa fa57 	bl	80006a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061f8:	7bfa      	ldrb	r2, [r7, #15]
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fe37 	bl	8004e70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fde3 	bl	8004dd4 <USBD_LL_Reset>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fe32 	bl	8004e90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_PCD_SuspendCallback+0x48>)
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	4a03      	ldr	r2, [pc, #12]	; (8006260 <HAL_PCD_SuspendCallback+0x48>)
 8006252:	f043 0306 	orr.w	r3, r3, #6
 8006256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006258:	bf00      	nop
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	e000ed00 	.word	0xe000ed00

08006264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fe22 	bl	8004ebc <USBD_LL_Resume>
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	4611      	mov	r1, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fe70 	bl	8004f7c <USBD_LL_IsoOUTIncomplete>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fe38 	bl	8004f30 <USBD_LL_IsoINIncomplete>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe fe76 	bl	8004fc8 <USBD_LL_DevConnected>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fe73 	bl	8004fde <USBD_LL_DevDisconnected>
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d13c      	bne.n	800638a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006310:	4a20      	ldr	r2, [pc, #128]	; (8006394 <USBD_LL_Init+0x94>)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <USBD_LL_Init+0x94>)
 800631c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006320:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <USBD_LL_Init+0x94>)
 8006322:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006326:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <USBD_LL_Init+0x94>)
 800632a:	2204      	movs	r2, #4
 800632c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800632e:	4b19      	ldr	r3, [pc, #100]	; (8006394 <USBD_LL_Init+0x94>)
 8006330:	2202      	movs	r2, #2
 8006332:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <USBD_LL_Init+0x94>)
 8006336:	2200      	movs	r2, #0
 8006338:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800633a:	4b16      	ldr	r3, [pc, #88]	; (8006394 <USBD_LL_Init+0x94>)
 800633c:	2202      	movs	r2, #2
 800633e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006340:	4b14      	ldr	r3, [pc, #80]	; (8006394 <USBD_LL_Init+0x94>)
 8006342:	2200      	movs	r2, #0
 8006344:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006346:	4b13      	ldr	r3, [pc, #76]	; (8006394 <USBD_LL_Init+0x94>)
 8006348:	2200      	movs	r2, #0
 800634a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <USBD_LL_Init+0x94>)
 800634e:	2200      	movs	r2, #0
 8006350:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <USBD_LL_Init+0x94>)
 8006354:	2200      	movs	r2, #0
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <USBD_LL_Init+0x94>)
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800635e:	480d      	ldr	r0, [pc, #52]	; (8006394 <USBD_LL_Init+0x94>)
 8006360:	f7fa fef4 	bl	800114c <HAL_PCD_Init>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800636a:	f7fa f999 	bl	80006a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	4808      	ldr	r0, [pc, #32]	; (8006394 <USBD_LL_Init+0x94>)
 8006372:	f7fc f852 	bl	800241a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006376:	2240      	movs	r2, #64	; 0x40
 8006378:	2100      	movs	r1, #0
 800637a:	4806      	ldr	r0, [pc, #24]	; (8006394 <USBD_LL_Init+0x94>)
 800637c:	f7fc f806 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	2101      	movs	r1, #1
 8006384:	4803      	ldr	r0, [pc, #12]	; (8006394 <USBD_LL_Init+0x94>)
 8006386:	f7fc f801 	bl	800238c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200018e8 	.word	0x200018e8

08006398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa ffe9 	bl	8001386 <HAL_PCD_Start>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f942 	bl	8006644 <USBD_Get_USB_Status>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	4608      	mov	r0, r1
 80063d8:	4611      	mov	r1, r2
 80063da:	461a      	mov	r2, r3
 80063dc:	4603      	mov	r3, r0
 80063de:	70fb      	strb	r3, [r7, #3]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70bb      	strb	r3, [r7, #2]
 80063e4:	4613      	mov	r3, r2
 80063e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80063f6:	78bb      	ldrb	r3, [r7, #2]
 80063f8:	883a      	ldrh	r2, [r7, #0]
 80063fa:	78f9      	ldrb	r1, [r7, #3]
 80063fc:	f7fb fbcd 	bl	8001b9a <HAL_PCD_EP_Open>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f91c 	bl	8006644 <USBD_Get_USB_Status>
 800640c:	4603      	mov	r3, r0
 800640e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006410:	7bbb      	ldrb	r3, [r7, #14]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006434:	78fa      	ldrb	r2, [r7, #3]
 8006436:	4611      	mov	r1, r2
 8006438:	4618      	mov	r0, r3
 800643a:	f7fb fc16 	bl	8001c6a <HAL_PCD_EP_Close>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f8fd 	bl	8006644 <USBD_Get_USB_Status>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800644e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	4611      	mov	r1, r2
 8006476:	4618      	mov	r0, r3
 8006478:	f7fb fcee 	bl	8001e58 <HAL_PCD_EP_SetStall>
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f8de 	bl	8006644 <USBD_Get_USB_Status>
 8006488:	4603      	mov	r3, r0
 800648a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800648c:	7bbb      	ldrb	r3, [r7, #14]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fb fd33 	bl	8001f20 <HAL_PCD_EP_ClrStall>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f8bf 	bl	8006644 <USBD_Get_USB_Status>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80064e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da0b      	bge.n	8006508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	333e      	adds	r3, #62	; 0x3e
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	e00b      	b.n	8006520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800651e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006546:	78fa      	ldrb	r2, [r7, #3]
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f7fb fb00 	bl	8001b50 <HAL_PCD_SetAddress>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f874 	bl	8006644 <USBD_Get_USB_Status>
 800655c:	4603      	mov	r3, r0
 800655e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006560:	7bbb      	ldrb	r3, [r7, #14]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b086      	sub	sp, #24
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	460b      	mov	r3, r1
 8006578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006588:	7af9      	ldrb	r1, [r7, #11]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f7fb fc19 	bl	8001dc4 <HAL_PCD_EP_Transmit>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f853 	bl	8006644 <USBD_Get_USB_Status>
 800659e:	4603      	mov	r3, r0
 80065a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	460b      	mov	r3, r1
 80065ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065ca:	7af9      	ldrb	r1, [r7, #11]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	f7fb fb95 	bl	8001cfe <HAL_PCD_EP_Receive>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f832 	bl	8006644 <USBD_Get_USB_Status>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80065e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	460b      	mov	r3, r1
 80065f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f7fb fbc5 	bl	8001d94 <HAL_PCD_EP_GetRxCount>
 800660a:	4603      	mov	r3, r0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <USBD_static_malloc+0x18>)
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	200001a0 	.word	0x200001a0

08006630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d817      	bhi.n	8006688 <USBD_Get_USB_Status+0x44>
 8006658:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <USBD_Get_USB_Status+0x1c>)
 800665a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665e:	bf00      	nop
 8006660:	08006671 	.word	0x08006671
 8006664:	08006677 	.word	0x08006677
 8006668:	0800667d 	.word	0x0800667d
 800666c:	08006683 	.word	0x08006683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
    break;
 8006674:	e00b      	b.n	800668e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006676:	2303      	movs	r3, #3
 8006678:	73fb      	strb	r3, [r7, #15]
    break;
 800667a:	e008      	b.n	800668e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
    break;
 8006680:	e005      	b.n	800668e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	73fb      	strb	r3, [r7, #15]
    break;
 8006686:	e002      	b.n	800668e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	73fb      	strb	r3, [r7, #15]
    break;
 800668c:	bf00      	nop
  }
  return usb_status;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <__libc_init_array>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4d0d      	ldr	r5, [pc, #52]	; (80066d4 <__libc_init_array+0x38>)
 80066a0:	4c0d      	ldr	r4, [pc, #52]	; (80066d8 <__libc_init_array+0x3c>)
 80066a2:	1b64      	subs	r4, r4, r5
 80066a4:	10a4      	asrs	r4, r4, #2
 80066a6:	2600      	movs	r6, #0
 80066a8:	42a6      	cmp	r6, r4
 80066aa:	d109      	bne.n	80066c0 <__libc_init_array+0x24>
 80066ac:	4d0b      	ldr	r5, [pc, #44]	; (80066dc <__libc_init_array+0x40>)
 80066ae:	4c0c      	ldr	r4, [pc, #48]	; (80066e0 <__libc_init_array+0x44>)
 80066b0:	f000 f820 	bl	80066f4 <_init>
 80066b4:	1b64      	subs	r4, r4, r5
 80066b6:	10a4      	asrs	r4, r4, #2
 80066b8:	2600      	movs	r6, #0
 80066ba:	42a6      	cmp	r6, r4
 80066bc:	d105      	bne.n	80066ca <__libc_init_array+0x2e>
 80066be:	bd70      	pop	{r4, r5, r6, pc}
 80066c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c4:	4798      	blx	r3
 80066c6:	3601      	adds	r6, #1
 80066c8:	e7ee      	b.n	80066a8 <__libc_init_array+0xc>
 80066ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ce:	4798      	blx	r3
 80066d0:	3601      	adds	r6, #1
 80066d2:	e7f2      	b.n	80066ba <__libc_init_array+0x1e>
 80066d4:	08006774 	.word	0x08006774
 80066d8:	08006774 	.word	0x08006774
 80066dc:	08006774 	.word	0x08006774
 80066e0:	08006778 	.word	0x08006778

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
